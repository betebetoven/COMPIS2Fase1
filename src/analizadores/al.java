// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: al.jflex

 /* JFlex example: partial Java language lexer specification */
 package analizadores;
 import java_cup.runtime.*;


    /*
     * This class is a simple example lexer.
     */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class al implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100"+
    "\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900"+
    "\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100\1\u5d00\45\u2000"+
    "\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000\1\u6100\1\u6200"+
    "\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000\1\u6700\5\u2000"+
    "\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00\2\u2000\1\u6d00"+
    "\1\u2000\1\u6e00\21\u2000\246\u1100\1\u6f00\20\u1100\1\u7000\1\u7100"+
    "\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100\1\u7400\u0b05\u2000"+
    "\1\u7500\1\u7600\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\5\1\6\1\5\1\0\2\5\1\7\1\10"+
    "\1\11\1\12\1\5\1\13\1\14\1\15\1\16\1\17"+
    "\11\20\1\5\1\21\2\5\1\22\1\23\1\5\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\0\1\51\1\0"+
    "\1\52\1\5\1\53\1\5\1\54\1\5\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\0\1\51\1\0\4\5"+
    "\41\0\2\5\4\0\4\5\1\0\2\5\1\0\7\5"+
    "\1\0\4\5\1\0\4\5\1\55\27\0\1\5\37\0"+
    "\1\5\70\0\2\34\115\0\1\45\u0142\0\4\5\14\0"+
    "\16\5\5\0\7\5\1\0\1\5\1\0\21\5\165\0"+
    "\1\5\2\0\2\5\4\0\1\5\1\0\6\5\1\0"+
    "\1\5\3\0\1\5\1\0\1\5\24\0\1\5\123\0"+
    "\1\5\213\0\1\5\5\0\2\5\246\0\1\5\46\0"+
    "\2\5\1\0\6\5\51\0\6\5\1\0\1\5\55\0"+
    "\1\5\1\0\1\5\2\0\1\5\2\0\1\5\1\0"+
    "\10\5\33\0\4\5\4\0\15\5\6\0\5\5\1\0"+
    "\4\5\13\0\1\5\1\0\3\5\112\0\4\5\146\0"+
    "\1\5\11\0\1\5\12\0\1\5\23\0\2\5\1\0"+
    "\17\5\74\0\2\5\145\0\16\5\66\0\4\5\1\0"+
    "\2\5\61\0\22\5\34\0\4\5\13\0\65\5\25\0"+
    "\1\5\10\0\25\5\221\0\2\5\12\0\1\5\23\0"+
    "\1\5\10\0\2\5\2\0\2\5\26\0\1\5\7\0"+
    "\1\5\1\0\3\5\4\0\2\5\11\0\2\5\2\0"+
    "\2\5\4\0\10\5\1\0\4\5\2\0\1\5\5\0"+
    "\2\5\16\0\7\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\5\6\0\4\5\2\0\2\5\26\0\1\5\7\0"+
    "\1\5\2\0\1\5\2\0\1\5\2\0\2\5\1\0"+
    "\1\5\5\0\4\5\2\0\2\5\3\0\3\5\1\0"+
    "\7\5\4\0\1\5\1\0\7\5\20\0\13\5\3\0"+
    "\1\5\11\0\1\5\3\0\1\5\26\0\1\5\7\0"+
    "\1\5\2\0\1\5\5\0\2\5\12\0\1\5\3\0"+
    "\1\5\3\0\2\5\1\0\17\5\4\0\2\5\12\0"+
    "\1\5\1\0\7\5\7\0\1\5\3\0\1\5\10\0"+
    "\2\5\2\0\2\5\26\0\1\5\7\0\1\5\2\0"+
    "\1\5\5\0\2\5\11\0\2\5\2\0\2\5\3\0"+
    "\10\5\2\0\4\5\2\0\1\5\5\0\2\5\12\0"+
    "\1\5\1\0\20\5\2\0\1\5\6\0\3\5\3\0"+
    "\1\5\4\0\3\5\2\0\1\5\1\0\1\5\2\0"+
    "\3\5\2\0\3\5\3\0\3\5\14\0\4\5\5\0"+
    "\3\5\3\0\1\5\4\0\2\5\1\0\6\5\1\0"+
    "\16\5\12\0\11\5\1\0\6\5\15\0\1\5\3\0"+
    "\1\5\27\0\1\5\20\0\3\5\10\0\1\5\3\0"+
    "\1\5\4\0\7\5\2\0\1\5\3\0\5\5\4\0"+
    "\2\5\12\0\20\5\4\0\1\5\10\0\1\5\3\0"+
    "\1\5\27\0\1\5\12\0\1\5\5\0\2\5\11\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\7\5\1\0"+
    "\1\5\4\0\2\5\12\0\1\5\2\0\15\5\4\0"+
    "\1\5\10\0\1\5\3\0\1\5\63\0\1\5\3\0"+
    "\1\5\5\0\5\5\4\0\7\5\5\0\2\5\12\0"+
    "\12\5\6\0\2\5\2\0\1\5\22\0\3\5\30\0"+
    "\1\5\11\0\1\5\1\0\2\5\7\0\3\5\1\0"+
    "\4\5\6\0\1\5\1\0\1\5\10\0\6\5\12\0"+
    "\2\5\2\0\15\5\72\0\4\5\20\0\1\5\12\0"+
    "\47\5\2\0\1\5\1\0\1\5\5\0\1\5\30\0"+
    "\1\5\1\0\1\5\27\0\2\5\5\0\1\5\1\0"+
    "\1\5\6\0\2\5\12\0\2\5\4\0\40\5\1\0"+
    "\27\5\2\0\6\5\12\0\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\12\0\1\5\44\0\4\5\24\0"+
    "\1\5\22\0\1\5\44\0\11\5\1\0\71\5\112\0"+
    "\6\5\116\0\2\5\46\0\1\5\1\0\5\5\1\0"+
    "\2\5\53\0\1\5\u014d\0\1\5\4\0\2\5\7\0"+
    "\1\5\1\0\1\5\4\0\2\5\51\0\1\5\4\0"+
    "\2\5\41\0\1\5\4\0\2\5\7\0\1\5\1\0"+
    "\1\5\4\0\2\5\17\0\1\5\71\0\1\5\4\0"+
    "\2\5\103\0\2\5\3\0\40\5\20\0\20\5\126\0"+
    "\2\5\6\0\3\5\u016c\0\2\5\21\0\1\5\32\0"+
    "\5\5\113\0\3\5\13\0\7\5\15\0\1\5\7\0"+
    "\13\5\25\0\13\5\24\0\14\5\15\0\1\5\3\0"+
    "\1\5\2\0\14\5\124\0\3\5\1\0\3\5\3\0"+
    "\2\5\12\0\41\5\4\0\1\5\12\0\6\5\131\0"+
    "\7\5\53\0\5\5\106\0\12\5\37\0\1\5\14\0"+
    "\4\5\14\0\12\5\50\0\2\5\5\0\13\5\54\0"+
    "\4\5\32\0\6\5\12\0\46\5\34\0\4\5\77\0"+
    "\1\5\35\0\2\5\13\0\6\5\12\0\15\5\1\0"+
    "\10\5\16\0\102\5\114\0\4\5\12\0\21\5\11\0"+
    "\14\5\164\0\14\5\70\0\10\5\12\0\3\5\61\0"+
    "\2\5\11\0\7\5\53\0\2\5\3\0\20\5\3\0"+
    "\1\5\47\0\5\5\372\0\1\5\33\0\2\5\6\0"+
    "\2\5\46\0\2\5\6\0\2\5\10\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\37\0\2\5\65\0"+
    "\1\5\7\0\1\5\1\0\3\5\3\0\1\5\7\0"+
    "\3\5\4\0\2\5\6\0\4\5\15\0\5\5\3\0"+
    "\1\5\7\0\16\5\5\0\30\5\2\3\5\0\20\5"+
    "\2\0\23\5\1\0\13\5\5\0\1\5\12\0\1\5"+
    "\1\0\15\5\1\0\20\5\15\0\3\5\40\0\20\5"+
    "\15\0\4\5\1\0\3\5\14\0\21\5\1\0\4\5"+
    "\1\0\2\5\12\0\1\5\1\0\3\5\5\0\6\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\4\0\1\5"+
    "\13\0\2\5\4\0\5\5\5\0\4\5\1\0\21\5"+
    "\51\0\u0177\5\57\0\1\5\57\0\1\5\205\0\6\5"+
    "\11\0\14\5\46\0\1\5\1\0\5\5\1\0\2\5"+
    "\70\0\7\5\1\0\17\5\30\0\11\5\7\0\1\5"+
    "\7\0\1\5\7\0\1\5\7\0\1\5\7\0\1\5"+
    "\7\0\1\5\7\0\1\5\7\0\1\5\40\0\57\5"+
    "\1\0\325\5\3\0\31\5\17\0\1\5\5\0\2\5"+
    "\5\0\4\5\126\0\2\5\2\0\2\5\3\0\1\5"+
    "\132\0\1\5\4\0\5\5\53\0\1\5\136\0\21\5"+
    "\33\0\65\5\306\0\112\5\360\0\20\5\215\0\103\5"+
    "\56\0\2\5\15\0\3\5\34\0\24\5\60\0\4\5"+
    "\12\0\1\5\163\0\45\5\11\0\2\5\147\0\2\5"+
    "\65\0\2\5\5\0\60\5\61\0\20\5\1\0\7\5"+
    "\64\0\14\5\106\0\12\5\12\0\6\5\30\0\3\5"+
    "\1\0\1\5\61\0\2\5\44\0\14\5\35\0\3\5"+
    "\101\0\16\5\13\0\6\5\37\0\1\5\67\0\11\5"+
    "\16\0\2\5\12\0\6\5\27\0\3\5\111\0\30\5"+
    "\3\0\2\5\20\0\2\5\5\0\12\5\6\0\2\5"+
    "\6\0\2\5\6\0\11\5\7\0\1\5\7\0\1\5"+
    "\53\0\1\5\14\0\10\5\173\0\1\5\2\0\2\5"+
    "\12\0\6\5\244\0\14\5\27\0\4\5\61\0\4\5"+
    "\u0100\3\156\0\2\5\152\0\46\5\7\0\14\5\5\0"+
    "\5\5\14\0\1\5\15\0\1\5\5\0\1\5\1\0"+
    "\1\5\2\0\1\5\2\0\1\5\154\0\41\5\153\0"+
    "\22\5\100\0\2\5\66\0\50\5\15\0\3\5\20\0"+
    "\20\5\20\0\3\5\2\0\30\5\3\0\31\5\1\0"+
    "\6\5\5\0\1\5\207\0\2\5\1\0\4\5\1\0"+
    "\13\5\12\0\7\5\32\0\4\5\1\0\1\5\32\0"+
    "\13\5\131\0\3\5\6\0\2\5\6\0\2\5\6\0"+
    "\2\5\3\0\3\5\2\0\3\5\2\0\22\5\3\0"+
    "\4\5\14\0\1\5\32\0\1\5\23\0\1\5\2\0"+
    "\1\5\17\0\2\5\16\0\42\5\173\0\105\5\65\0"+
    "\210\5\1\0\202\5\35\0\3\5\61\0\17\5\1\0"+
    "\37\5\40\0\15\5\36\0\5\5\53\0\5\5\36\0"+
    "\2\5\44\0\4\5\10\0\1\5\5\0\52\5\236\0"+
    "\2\5\12\0\6\5\44\0\4\5\44\0\4\5\50\0"+
    "\10\5\64\0\234\5\67\0\11\5\26\0\12\5\10\0"+
    "\230\5\6\0\2\5\1\0\1\5\54\0\1\5\2\0"+
    "\3\5\1\0\2\5\27\0\12\5\27\0\11\5\37\0"+
    "\101\5\23\0\1\5\2\0\12\5\26\0\12\5\32\0"+
    "\106\5\70\0\6\5\2\0\100\5\4\0\1\5\2\0"+
    "\5\5\10\0\1\5\3\0\1\5\35\0\2\5\3\0"+
    "\4\5\1\0\40\5\35\0\3\5\35\0\43\5\10\0"+
    "\1\5\36\0\31\5\66\0\12\5\26\0\12\5\23\0"+
    "\15\5\22\0\156\5\111\0\67\5\63\0\15\5\63\0"+
    "\15\5\50\0\10\5\12\0\306\5\35\0\12\5\1\0"+
    "\10\5\41\0\217\5\27\0\11\5\107\0\37\5\12\0"+
    "\17\5\74\0\2\5\1\0\17\5\1\0\2\5\31\0"+
    "\7\5\12\0\6\5\65\0\1\5\12\0\4\5\3\0"+
    "\11\5\44\0\2\5\1\0\11\5\105\0\4\5\4\0"+
    "\3\5\13\0\1\5\1\0\43\5\22\0\1\5\45\0"+
    "\6\5\1\0\101\5\7\0\1\5\1\0\1\5\4\0"+
    "\1\5\17\0\1\5\12\0\7\5\73\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\0\2\5\2\0\2\5\26\0"+
    "\1\5\7\0\1\5\2\0\1\5\5\0\1\5\12\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\0\6\5\1\0"+
    "\5\5\7\0\2\5\7\0\3\5\5\0\213\5\113\0"+
    "\5\5\12\0\4\5\2\0\40\5\106\0\1\5\1\0"+
    "\10\5\12\0\246\5\66\0\2\5\11\0\27\5\6\0"+
    "\42\5\101\0\3\5\1\0\13\5\12\0\46\5\71\0"+
    "\7\5\12\0\66\5\33\0\2\5\17\0\4\5\12\0"+
    "\306\5\73\0\145\5\112\0\25\5\1\0\240\5\10\0"+
    "\2\5\56\0\2\5\10\0\1\5\2\0\33\5\77\0"+
    "\10\5\1\0\10\5\112\0\3\5\1\0\42\5\71\0"+
    "\7\5\11\0\1\5\55\0\1\5\11\0\17\5\12\0"+
    "\30\5\36\0\2\5\26\0\1\5\16\0\111\5\7\0"+
    "\1\5\2\0\1\5\54\0\3\5\1\0\1\5\2\0"+
    "\1\5\11\0\10\5\12\0\6\5\6\0\1\5\2\0"+
    "\1\5\45\0\1\5\2\0\1\5\6\0\7\5\12\0"+
    "\u0136\5\27\0\346\5\4\0\37\5\232\0\146\5\157\0"+
    "\21\5\304\0\274\5\57\0\1\5\11\0\307\5\107\0"+
    "\271\5\71\0\7\5\37\0\1\5\12\0\146\5\36\0"+
    "\2\5\5\0\13\5\67\0\11\5\4\0\14\5\12\0"+
    "\11\5\25\0\5\5\23\0\260\5\100\0\200\5\113\0"+
    "\4\5\71\0\7\5\21\0\100\5\2\0\1\5\1\0"+
    "\34\5\370\0\10\5\363\0\15\5\37\0\61\5\3\0"+
    "\21\5\4\0\10\5\u018c\0\4\5\153\0\5\5\15\0"+
    "\3\5\11\0\7\5\12\0\3\5\2\0\1\5\4\0"+
    "\301\5\5\0\3\5\26\0\2\5\7\0\36\5\4\0"+
    "\224\5\3\0\273\5\125\0\1\5\107\0\1\5\2\0"+
    "\2\5\1\0\2\5\2\0\2\5\4\0\1\5\14\0"+
    "\1\5\1\0\1\5\7\0\1\5\101\0\1\5\4\0"+
    "\2\5\10\0\1\5\7\0\1\5\34\0\1\5\4\0"+
    "\1\5\5\0\1\5\1\0\3\5\7\0\1\5\u0154\0"+
    "\2\5\31\0\1\5\31\0\1\5\37\0\1\5\31\0"+
    "\1\5\37\0\1\5\31\0\1\5\37\0\1\5\31\0"+
    "\1\5\37\0\1\5\31\0\1\5\10\0\2\5\151\0"+
    "\4\5\62\0\10\5\1\0\16\5\1\0\26\5\5\0"+
    "\1\5\17\0\120\5\7\0\1\5\21\0\2\5\7\0"+
    "\1\5\2\0\1\5\5\0\325\5\55\0\3\5\16\0"+
    "\2\5\12\0\4\5\1\0\u0171\5\72\0\5\5\306\0"+
    "\13\5\7\0\51\5\114\0\4\5\12\0\u0156\5\1\0"+
    "\117\5\4\0\1\5\33\0\1\5\2\0\1\5\1\0"+
    "\2\5\1\0\1\5\12\0\1\5\4\0\1\5\1\0"+
    "\1\5\1\0\6\5\1\0\4\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\1\5\2\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\1\0\2\5\4\0"+
    "\1\5\7\0\1\5\4\0\1\5\4\0\1\5\1\0"+
    "\1\5\12\0\1\5\21\0\5\5\3\0\1\5\5\0"+
    "\1\5\21\0\104\5\327\0\51\5\65\0\13\5\336\0"+
    "\2\5\u0182\0\16\5\u0131\0\37\5\36\0\343\5\1\0"+
    "\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30464];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\3\1\4\1\5\1\6\2\3"+
    "\1\7\1\10\1\11\17\1\1\12\1\13\1\14\1\15"+
    "\1\0\1\16\1\0\1\17\1\0\1\2\1\7\25\1"+
    "\1\20\5\1\1\21\2\1\1\22\2\0\2\7\1\23"+
    "\22\1\1\24\4\1\1\25\1\26\3\1\1\27\5\1"+
    "\1\30\1\0\1\2\3\1\1\31\25\1\1\32\1\33"+
    "\21\1\1\34\1\35\5\1\1\36\1\37\3\1\1\40"+
    "\1\41\1\42\6\1\1\43\2\1\1\44\17\1\1\45"+
    "\4\1\1\46\2\1\1\47\1\1\1\50\4\1\1\51"+
    "\17\1\1\52\7\1\1\53\2\1\1\54\4\1\1\55"+
    "\1\56\1\57\1\1\1\60\3\1\1\61\2\1\1\62"+
    "\1\63\2\1\1\64\1\65\1\66\3\1\1\67\5\1"+
    "\1\70\1\71\3\1\1\72\5\1\1\73\10\1\1\74"+
    "\1\1\1\75\5\1\1\76\1\77\5\1\1\100\1\101"+
    "\1\1\1\102\1\1\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\134\0\270\0\346\0\134"+
    "\0\134\0\134\0\u0114\0\u0142\0\u0170\0\134\0\134\0\u019e"+
    "\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e"+
    "\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422\0\134\0\134"+
    "\0\u0450\0\134\0\270\0\134\0\u047e\0\134\0\u04ac\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\56\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u09b4\0\56\0\u09e2\0\u0a10\0\134"+
    "\0\u0a3e\0\u0a6c\0\134\0\u0a9a\0\56\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\56"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\56\0\56\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\56\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u0a10"+
    "\0\u102c\0\u0a3e\0\u105a\0\u1088\0\u10b6\0\56\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\56\0\56\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\56\0\56"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\56\0\u189e\0\u18cc"+
    "\0\u18fa\0\u1928\0\u1956\0\u1984\0\56\0\u19b2\0\u19e0\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\56\0\u1ac6\0\u1af4\0\56\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\56\0\u1dd4"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\56\0\u1e8c\0\u1eba\0\56\0\u1ee8"+
    "\0\56\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\56\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c"+
    "\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\56\0\u2280\0\u22ae"+
    "\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\56\0\u23c2\0\u23f0"+
    "\0\56\0\u241e\0\u244c\0\u247a\0\u24a8\0\56\0\56\0\56"+
    "\0\u24d6\0\56\0\u2504\0\u2532\0\u2560\0\56\0\u258e\0\u25bc"+
    "\0\u25ea\0\56\0\u2618\0\u2646\0\56\0\56\0\56\0\u2674"+
    "\0\u26a2\0\u26d0\0\56\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\56\0\56\0\u27e4\0\u2812\0\u2840\0\56\0\u286e\0\u289c"+
    "\0\u28ca\0\u28f8\0\u2926\0\56\0\u2954\0\u2982\0\u29b0\0\u29de"+
    "\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\56\0\u2ac4\0\56\0\u2af2"+
    "\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\56\0\56\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\56\0\56\0\u2cbe\0\56\0\u2cec"+
    "\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\5\1\12\1\13\1\5\1\14\2\15\1\16"+
    "\1\5\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\2\1\26\1\27\2\2\1\30\1\31\1\32\1\33"+
    "\1\2\1\34\1\35\2\2\1\36\1\2\1\37\1\40"+
    "\1\41\1\42\1\2\16\0\2\2\3\0\26\2\2\0"+
    "\1\2\61\0\1\3\53\0\3\43\1\0\1\43\1\0"+
    "\1\44\10\0\2\43\3\0\26\43\2\0\1\43\1\0"+
    "\1\45\16\0\2\45\3\0\26\45\2\0\1\45\23\0"+
    "\1\46\45\0\1\47\3\0\1\50\37\0\1\2\14\0"+
    "\1\51\1\0\2\15\3\0\26\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\14\2\1\52\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\15\2\1\53"+
    "\10\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\1\54\14\2\1\55\10\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\4\2\1\56\3\2\1\57\15\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\11\2"+
    "\1\60\2\2\1\61\4\2\1\62\4\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\1\63\7\2\1\64"+
    "\12\2\1\65\2\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\1\66\25\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\13\2\1\67\1\70\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\1\71\3\2"+
    "\1\72\3\2\1\73\4\2\1\74\10\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\15\2\1\75\5\2"+
    "\1\76\2\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\20\2\1\77\5\2\2\0\1\100\1\0\1\2"+
    "\16\0\2\2\3\0\1\101\14\2\1\102\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\4\2\1\103"+
    "\21\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\104\3\2\1\105\15\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\4\2\1\106\21\2\2\0"+
    "\1\2\1\0\1\107\16\0\2\107\3\0\26\107\2\0"+
    "\1\107\10\0\1\110\46\0\12\111\1\112\43\111\2\50"+
    "\1\3\1\50\1\4\51\50\17\0\1\113\1\114\35\0"+
    "\1\2\16\0\2\2\3\0\3\2\1\115\22\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\15\2\1\116"+
    "\10\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\3\2\1\117\14\2\1\120\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\13\2\1\121\1\122\11\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\26\2"+
    "\2\0\1\123\1\0\1\2\16\0\2\2\3\0\24\2"+
    "\1\124\1\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\4\2\1\125\21\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\22\2\1\126\3\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\26\2\2\0\1\127"+
    "\1\0\1\2\16\0\2\2\3\0\12\2\1\130\13\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\14\2"+
    "\1\131\11\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\14\2\1\132\11\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\2\2\1\133\16\2\1\134\4\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\16\2"+
    "\1\135\7\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\6\2\1\136\1\2\1\137\15\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\21\2\1\140\3\2"+
    "\1\141\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\14\2\1\142\5\2\1\143\3\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\4\2\1\144\21\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\3\2\1\145"+
    "\22\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\22\2\1\146\3\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\13\2\1\147\12\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\21\2\1\150\4\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\20\2\1\151"+
    "\5\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\20\2\1\152\1\2\1\153\3\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\16\2\1\154\3\2\1\155"+
    "\3\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\6\2\1\156\17\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\157\5\2\2\0\1\2\1\0"+
    "\1\107\16\0\2\107\3\0\26\107\2\0\1\160\1\0"+
    "\12\111\1\161\55\111\1\161\3\111\1\162\37\111\17\0"+
    "\2\114\35\0\1\2\16\0\2\2\3\0\12\2\1\163"+
    "\13\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\164\21\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\1\165\25\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\15\2\1\166\10\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\26\2\2\0\1\167"+
    "\1\0\1\2\16\0\2\2\3\0\12\2\1\170\13\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\10\2"+
    "\1\171\15\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\2\2\1\172\23\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\15\2\1\173\10\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\3\2\1\174\4\2"+
    "\1\175\15\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\21\2\1\176\4\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\1\177\25\2\2\0\1\200\1\0"+
    "\1\2\16\0\2\2\3\0\2\2\1\201\23\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\4\2\1\202"+
    "\21\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\22\2\1\203\3\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\204\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\20\2\1\205\5\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\2\2\1\206"+
    "\23\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\207\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\15\2\1\210\10\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\211\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\212"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\213\21\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\10\2\1\214\15\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\1\215\25\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\4\2\1\216\21\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\4\2"+
    "\1\217\21\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\15\2\1\220\10\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\23\2\1\221\2\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\3\2\1\222\22\2"+
    "\2\0\1\2\1\0\12\111\1\161\3\111\1\3\37\111"+
    "\1\2\16\0\2\2\3\0\4\2\1\223\21\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\224"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\2\2\1\225\23\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\10\2\1\226\5\2\1\227\5\2\1\230"+
    "\1\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\231\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\3\2\1\232\22\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\23\2\1\233\2\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\234"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\10\2\1\235\15\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\6\2\1\236\17\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\237\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\12\2\1\240"+
    "\13\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\5\2\1\241\5\2\1\242\2\2\1\243\2\2\1\244"+
    "\4\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\10\2\1\245\15\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\246\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\1\247\25\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\10\2\1\250\15\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\4\2"+
    "\1\251\21\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\10\2\1\252\15\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\20\2\1\253\5\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\20\2\1\254\1\255"+
    "\4\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\3\2\1\256\22\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\22\2\1\257\3\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\20\2\1\260\5\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\261"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\22\2\1\262\3\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\263\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\14\2\1\264\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\1\265\25\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\1\266"+
    "\25\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\1\267\25\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\22\2\1\270\3\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\14\2\1\271\11\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\1\272\25\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\1\273\25\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\26\2"+
    "\2\0\1\274\1\0\1\2\16\0\2\2\3\0\10\2"+
    "\1\275\15\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\22\2\1\276\3\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\2\2\1\277\23\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\5\2\1\300\20\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\23\2"+
    "\1\301\2\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\23\2\1\302\2\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\4\2\1\303\3\2\1\304\15\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\1\305"+
    "\25\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\306\3\2\1\307\15\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\310\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\26\2\2\0"+
    "\1\311\1\0\1\2\16\0\2\2\3\0\13\2\1\312"+
    "\12\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\21\2\1\313\4\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\15\2\1\314\10\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\26\2\2\0\1\315\1\0"+
    "\1\2\16\0\2\2\3\0\26\2\2\0\1\316\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\317\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\20\2\1\320"+
    "\5\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\321\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\2\2\1\322\23\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\10\2\1\323\15\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\324"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\3\2\1\325\22\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\14\2\1\326\11\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\4\2\1\327\21\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\2\2\1\330"+
    "\23\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\20\2\1\331\5\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\12\2\1\332\13\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\2\2\1\333\23\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\3\2\1\334"+
    "\22\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\1\335\25\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\4\2\1\336\21\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\4\2\1\337\21\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\1\340\25\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\14\2\1\341"+
    "\11\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\22\2\1\342\3\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\4\2\1\343\21\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\20\2\1\344\5\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\6\2\1\345"+
    "\17\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\14\2\1\346\11\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\17\2\1\347\6\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\10\2\1\350\15\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\1\351\25\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\15\2"+
    "\1\352\10\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\15\2\1\353\10\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\1\354\25\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\10\2\1\355\15\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\20\2\1\356"+
    "\5\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\1\357\25\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\4\2\1\360\21\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\20\2\1\361\5\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\20\2\1\362\5\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\1\363"+
    "\25\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\364\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\15\2\1\365\10\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\366\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\20\2\1\367"+
    "\5\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\21\2\1\370\4\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\371\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\12\2\1\372\13\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\2\2\1\373"+
    "\23\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\374\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\14\2\1\375\11\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\1\376\25\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\23\2\1\377\2\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\23\2"+
    "\1\u0100\2\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\20\2\1\u0101\5\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\20\2\1\u0102\5\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\26\2\2\0\1\u0103"+
    "\1\0\1\2\16\0\2\2\3\0\26\2\2\0\1\u0104"+
    "\1\0\1\2\16\0\2\2\3\0\21\2\1\u0105\4\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\1\u0106"+
    "\25\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\20\2\1\u0107\5\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\u0108\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\4\2\1\u0109\21\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\13\2\1\u010a"+
    "\12\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\20\2\1\u010b\5\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\14\2\1\u010c\11\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\4\2\1\u010d\21\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\10\2\1\u010e"+
    "\15\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\3\2\1\u010f\22\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\22\2\1\u0110\3\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\14\2\1\u0111\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\4\2\1\u0112"+
    "\21\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\26\2\2\0\1\u0113\1\0\1\2\16\0\2\2\3\0"+
    "\10\2\1\u0114\15\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\10\2\1\u0115\15\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\15\2\1\u0116\10\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\13\2\1\u0117"+
    "\12\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\u0118\21\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\22\2\1\u0119\3\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\14\2\1\u011a\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\15\2\1\u011b"+
    "\10\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\u011c\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\u011d\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\14\2\1\u011e\11\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\6\2\1\u011f"+
    "\17\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\6\2\1\u0120\17\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\4\2\1\u0121\21\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\22\2\1\u0122\3\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\20\2\1\u0123"+
    "\5\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\22\2\1\u0124\3\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\14\2\1\u0125\11\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\1\u0126\25\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\12\2\1\u0127\13\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\23\2"+
    "\1\u0128\2\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\23\2\1\u0129\2\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\14\2\1\u012a\11\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\20\2\1\u012b\5\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\1\u012c"+
    "\25\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\4\2\1\u012d\21\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\21\2\1\u012e\4\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\1\u012f\25\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\1\u0130\25\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\22\2\1\u0131"+
    "\3\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\15\2\1\u0132\10\2\2\0\1\2\1\0\1\2\16\0"+
    "\2\2\3\0\20\2\1\u0133\5\2\2\0\1\2\1\0"+
    "\1\2\16\0\2\2\3\0\12\2\1\u0134\13\2\2\0"+
    "\1\2\1\0\1\2\16\0\2\2\3\0\12\2\1\u0135"+
    "\13\2\2\0\1\2\1\0\1\2\16\0\2\2\3\0"+
    "\1\u0136\25\2\2\0\1\2\1\0\1\2\16\0\2\2"+
    "\3\0\21\2\1\u0137\4\2\2\0\1\2\1\0\1\2"+
    "\16\0\2\2\3\0\10\2\1\u0138\15\2\2\0\1\2"+
    "\1\0\1\2\16\0\2\2\3\0\12\2\1\u0139\13\2"+
    "\2\0\1\2\1\0\1\2\16\0\2\2\3\0\15\2"+
    "\1\u013a\10\2\2\0\1\2\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\1\1\1\11\2\1\3\11\3\1"+
    "\2\11\17\1\2\11\1\1\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\40\1\1\11\2\0\1\11\45\1\1\0"+
    "\311\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public al(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(Simbolos.id,yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 70: break;
          case 3:
            { System.out.println("Illegal character <"+
                                                        yytext()+">");
            }
            // fall through
          case 71: break;
          case 4:
            { return new Symbol(Simbolos.abre_parentesis,yycolumn, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 5:
            { return new Symbol(Simbolos.cierra_parentesis,yycolumn, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 6:
            { return new Symbol(Simbolos.coma,yycolumn, yyline, yytext());
            }
            // fall through
          case 74: break;
          case 7:
            { return new Symbol(Simbolos.number,yycolumn, yyline, yytext());
            }
            // fall through
          case 75: break;
          case 8:
            { return new Symbol(Simbolos.punto_y_coma,yycolumn, yyline, yytext());
            }
            // fall through
          case 76: break;
          case 9:
            { return new Symbol(Simbolos.cierra_pregunta,yycolumn, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 10:
            { return new Symbol(Simbolos.abre_corchete,yycolumn, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 11:
            { return new Symbol(Simbolos.cierra_corchete,yycolumn, yyline, yytext());
            }
            // fall through
          case 79: break;
          case 12:
            { return new Symbol(Simbolos.guion,yycolumn, yyline, yytext());
            }
            // fall through
          case 80: break;
          case 13:
            { return new Symbol(Simbolos.abre_pregunta,yycolumn, yyline, yytext());
            }
            // fall through
          case 81: break;
          case 14:
            { return new Symbol(Simbolos.frase,yycolumn, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 15:
            { return new Symbol(Simbolos.flechita,yycolumn, yyline, yytext());
            }
            // fall through
          case 83: break;
          case 16:
            { return new Symbol(Simbolos.or,yycolumn, yyline, yytext());
            }
            // fall through
          case 84: break;
          case 17:
            { return new Symbol(Simbolos.si,yycolumn, yyline, yytext());
            }
            // fall through
          case 85: break;
          case 18:
            { return new Symbol(Simbolos.frasecita,yycolumn, yyline, yytext());
            }
            // fall through
          case 86: break;
          case 19:
            { return new Symbol(Simbolos.and,yycolumn, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 20:
            { return new Symbol(Simbolos.mas,yycolumn, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 21:
            { return new Symbol(Simbolos.mod,yycolumn, yyline, yytext());
            }
            // fall through
          case 89: break;
          case 22:
            { return new Symbol(Simbolos.not,yycolumn, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 23:
            { return new Symbol(Simbolos.por,yycolumn, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 24:
            { return new Symbol(Simbolos.variable,yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 25:
            { return new Symbol(Simbolos.como,yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 26:
            { return new Symbol(Simbolos.o_si,yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 27:
            { return new Symbol(Simbolos.para,yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 28:
            { return new Symbol(Simbolos.falso,yycolumn, yyline, yytext());
            }
            // fall through
          case 96: break;
          case 29:
            { return new Symbol(Simbolos.finall,yycolumn, yyline, yytext());
            }
            // fall through
          case 97: break;
          case 30:
            { return new Symbol(Simbolos.hacer,yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 31:
            { return new Symbol(Simbolos.hasta,yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 32:
            { return new Symbol(Simbolos.mayor,yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 33:
            { return new Symbol(Simbolos.menor,yycolumn, yyline, yytext());
            }
            // fall through
          case 101: break;
          case 34:
            { return new Symbol(Simbolos.menos,yycolumn, yyline, yytext());
            }
            // fall through
          case 102: break;
          case 35:
            { return new Symbol(Simbolos.segun,yycolumn, yyline, yytext());
            }
            // fall through
          case 103: break;
          case 36:
            { return new Symbol(Simbolos.cadena,yycolumn, yyline, yytext());
            }
            // fall through
          case 104: break;
          case 37:
            { return new Symbol(Simbolos.fin_si,yycolumn, yyline, yytext());
            }
            // fall through
          case 105: break;
          case 38:
            { return new Symbol(Simbolos.inicio,yycolumn, yyline, yytext());
            }
            // fall through
          case 106: break;
          case 39:
            { return new Symbol(Simbolos.metodo,yycolumn, yyline, yytext());
            }
            // fall through
          case 107: break;
          case 40:
            { return new Symbol(Simbolos.numero,yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 41:
            { return new Symbol(Simbolos.bulean,yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 42:
            { return new Symbol(Simbolos.funcion,yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 43:
            { return new Symbol(Simbolos.repetir,yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 44:
            { return new Symbol(Simbolos.caracter,yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 45:
            { return new Symbol(Simbolos.dividido,yycolumn, yyline, yytext());
            }
            // fall through
          case 113: break;
          case 46:
            { return new Symbol(Simbolos.ejecutar,yycolumn, yyline, yytext());
            }
            // fall through
          case 114: break;
          case 47:
            { return new Symbol(Simbolos.entonces,yycolumn, yyline, yytext());
            }
            // fall through
          case 115: break;
          case 48:
            { return new Symbol(Simbolos.es_igual,yycolumn, yyline, yytext());
            }
            // fall through
          case 116: break;
          case 49:
            { return new Symbol(Simbolos.fin_para,yycolumn, yyline, yytext());
            }
            // fall through
          case 117: break;
          case 50:
            { return new Symbol(Simbolos.imprimir,yycolumn, yyline, yytext());
            }
            // fall through
          case 118: break;
          case 51:
            { return new Symbol(Simbolos.ingresar,yycolumn, yyline, yytext());
            }
            // fall through
          case 119: break;
          case 52:
            { return new Symbol(Simbolos.mientras,yycolumn, yyline, yytext());
            }
            // fall through
          case 120: break;
          case 53:
            { return new Symbol(Simbolos.potencia,yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 54:
            { return new Symbol(Simbolos.retornar,yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 55:
            { return new Symbol(Simbolos.con_valor,yycolumn, yyline, yytext());
            }
            // fall through
          case 123: break;
          case 56:
            { return new Symbol(Simbolos.fin_segun,yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 57:
            { return new Symbol(Simbolos.hasta_que,yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 58:
            { return new Symbol(Simbolos.verdadero,yycolumn, yyline, yytext());
            }
            // fall through
          case 126: break;
          case 59:
            { return new Symbol(Simbolos.fin_metodo,yycolumn, yyline, yytext());
            }
            // fall through
          case 127: break;
          case 60:
            { return new Symbol(Simbolos.fin_funcion,yycolumn, yyline, yytext());
            }
            // fall through
          case 128: break;
          case 61:
            { return new Symbol(Simbolos.imprimir_nl,yycolumn, yyline, yytext());
            }
            // fall through
          case 129: break;
          case 62:
            { return new Symbol(Simbolos.es_diferente,yycolumn, yyline, yytext());
            }
            // fall through
          case 130: break;
          case 63:
            { return new Symbol(Simbolos.fin_mientras,yycolumn, yyline, yytext());
            }
            // fall through
          case 131: break;
          case 64:
            { return new Symbol(Simbolos.mayor_o_igual,yycolumn, yyline, yytext());
            }
            // fall through
          case 132: break;
          case 65:
            { return new Symbol(Simbolos.menor_o_igual,yycolumn, yyline, yytext());
            }
            // fall through
          case 133: break;
          case 66:
            { return new Symbol(Simbolos.con_parametros,yycolumn, yyline, yytext());
            }
            // fall through
          case 134: break;
          case 67:
            { return new Symbol(Simbolos.con_incremental,yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 68:
            { return new Symbol(Simbolos.de_lo_contrario,yycolumn, yyline, yytext());
            }
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
