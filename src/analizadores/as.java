
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.company.error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class as extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public as() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public as(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public as(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\003\000\002\050" +
    "\002\000\002\051\002\000\002\047\007\000\002\010\004" +
    "\000\002\010\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\052\002\000\002\015\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\027\013\000\002\027\015" +
    "\000\002\027\011\000\002\027\011\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\013\012\000\002" +
    "\014\004\000\002\014\003\000\002\011\007\000\002\026" +
    "\011\000\002\026\012\000\002\012\011\000\002\012\005" +
    "\000\002\012\010\000\002\012\004\000\002\023\011\000" +
    "\002\022\010\000\002\036\005\000\002\037\005\000\002" +
    "\037\003\000\002\040\004\000\002\041\005\000\002\042" +
    "\005\000\002\042\003\000\002\025\011\000\002\024\010" +
    "\000\002\030\007\000\002\030\006\000\002\031\006\000" +
    "\002\031\007\000\002\053\002\000\002\054\002\000\002" +
    "\055\002\000\002\017\012\000\002\056\002\000\002\057" +
    "\002\000\002\060\002\000\002\020\012\000\002\007\003" +
    "\000\002\007\003\000\002\021\006\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\061\002\000\002\062\002\000\002\063\002\000\002\064" +
    "\002\000\002\016\015\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\043\005\000\002\043\003\000" +
    "\002\046\003\000\002\065\002\000\002\066\002\000\002" +
    "\034\010\000\002\067\002\000\002\034\006\000\002\070" +
    "\002\000\002\034\006\000\002\034\003\000\002\071\002" +
    "\000\002\044\006\000\002\072\002\000\002\044\006\000" +
    "\002\073\002\000\002\044\006\000\002\074\002\000\002" +
    "\044\006\000\002\075\002\000\002\044\006\000\002\076" +
    "\002\000\002\044\006\000\002\077\002\000\002\032\006" +
    "\000\002\100\002\000\002\032\006\000\002\101\002\000" +
    "\002\032\005\000\002\032\003\000\002\102\002\000\002" +
    "\003\006\000\002\103\002\000\002\003\006\000\002\104" +
    "\002\000\002\003\006\000\002\105\002\000\002\106\002" +
    "\000\002\003\011\000\002\003\003\000\002\107\002\000" +
    "\002\004\006\000\002\004\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\004\006\001\002\000\004\002\u0108\001" +
    "\002\000\004\002\000\001\002\000\054\003\uffff\010\uffff" +
    "\013\uffff\015\uffff\017\uffff\020\uffff\022\uffff\024\uffff\033" +
    "\uffff\046\uffff\053\uffff\063\uffff\067\uffff\071\uffff\073\uffff" +
    "\074\uffff\077\uffff\101\uffff\102\uffff\103\uffff\105\uffff\001" +
    "\002\000\054\003\036\010\050\013\060\015\010\017\034" +
    "\020\045\022\055\024\031\033\011\046\051\053\025\063" +
    "\035\067\027\071\023\073\053\074\037\077\040\101\056" +
    "\102\012\103\044\105\046\001\002\000\076\006\uff7e\012" +
    "\uff7e\014\uff7e\016\uff7e\021\uff7e\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\047\uff7e\051\uff7e\052\uff7e\056\uff7e\064\uff7e\066" +
    "\uff7e\076\uff7e\104\uff7e\001\002\000\022\010\uff84\013\uff84" +
    "\015\uff84\017\uff84\020\uff84\022\uff84\024\uff84\033\uff84\001" +
    "\002\000\004\033\uffc3\001\002\000\102\003\ufff9\005\ufff9" +
    "\010\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\022\ufff9\024" +
    "\ufff9\033\ufff9\046\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\105\ufff9\001\002\000\102\003" +
    "\ufff5\005\ufff5\010\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\024\ufff5\033\ufff5\046\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\057\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\105\ufff5\001\002" +
    "\000\102\003\ufff6\005\ufff6\010\ufff6\013\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\022\ufff6\024\ufff6\033\ufff6\046\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\057\ufff6\061\ufff6\062\ufff6\063\ufff6\065" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\105" +
    "\ufff6\001\002\000\102\003\ufffb\005\ufffb\010\ufffb\013\ufffb" +
    "\015\ufffb\017\ufffb\020\ufffb\022\ufffb\024\ufffb\033\ufffb\046" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\105\ufffb\001\002\000\102\003\ufff1\005\ufff1\010" +
    "\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\022\ufff1\024\ufff1" +
    "\033\ufff1\046\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\105\ufff1\001\002\000\056\003\036" +
    "\005\ufffe\010\050\013\060\015\010\017\034\020\045\022" +
    "\055\024\031\033\011\046\051\053\025\063\035\067\027" +
    "\071\023\073\053\074\037\077\040\101\056\102\012\103" +
    "\044\105\046\001\002\000\076\006\uff82\012\uff82\014\uff82" +
    "\016\uff82\021\uff82\023\uff82\024\uff82\025\uff82\026\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\047" +
    "\uff82\051\uff82\052\uff82\056\uff82\064\uff82\066\uff82\076\uff82" +
    "\104\uff82\001\002\000\014\006\uffab\023\065\024\066\047" +
    "\uffab\052\uffab\001\002\000\054\003\036\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\046" +
    "\051\053\025\063\035\067\027\071\023\073\053\074\037" +
    "\077\040\101\056\102\012\103\044\105\046\001\002\000" +
    "\076\006\uff85\012\uff85\014\uff85\016\uff85\021\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\047\uff85\051\uff85\052\uff85\056" +
    "\uff85\064\uff85\066\uff85\076\uff85\104\uff85\001\002\000\004" +
    "\033\336\001\002\000\102\003\uffef\005\uffef\010\uffef\013" +
    "\uffef\015\uffef\017\uffef\020\uffef\022\uffef\024\uffef\033\uffef" +
    "\046\uffef\053\uffef\054\uffef\055\uffef\057\uffef\061\uffef\062" +
    "\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\105\uffef\001\002\000\004\033\330\001\002" +
    "\000\076\006\uff8f\012\uff8f\014\uff8f\016\uff8f\021\uff8f\023" +
    "\uff8f\024\uff8f\025\071\026\074\030\uff8f\031\073\032\072" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\047\uff8f\051\uff8f\052\uff8f" +
    "\056\uff8f\064\uff8f\066\uff8f\076\uff8f\104\uff8f\001\002\000" +
    "\020\010\uff91\013\uff91\015\uff91\017\uff91\020\uff91\022\uff91" +
    "\033\uff91\001\002\000\006\006\323\052\176\001\002\000" +
    "\102\003\ufff0\005\ufff0\010\ufff0\013\ufff0\015\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\024\ufff0\033\ufff0\046\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\057\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\105\ufff0" +
    "\001\002\000\076\006\uff80\012\uff80\014\uff80\016\uff80\021" +
    "\uff80\023\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80" +
    "\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\047\uff80\051\uff80" +
    "\052\uff80\056\uff80\064\uff80\066\uff80\076\uff80\104\uff80\001" +
    "\002\000\022\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\001\002\000\022\005\uffed\051" +
    "\uffed\061\uffed\062\uffed\065\uffed\070\uffed\075\uffed\100\uffed" +
    "\001\002\000\022\010\050\013\060\015\010\017\034\020" +
    "\045\022\055\024\031\033\011\001\002\000\022\010\050" +
    "\013\060\015\010\017\034\020\045\022\055\024\031\033" +
    "\011\001\002\000\102\003\ufff7\005\ufff7\010\ufff7\013\ufff7" +
    "\015\ufff7\017\ufff7\020\ufff7\022\ufff7\024\ufff7\033\ufff7\046" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\105\ufff7\001\002\000\102\003\uffee\005\uffee\010" +
    "\uffee\013\uffee\015\uffee\017\uffee\020\uffee\022\uffee\024\uffee" +
    "\033\uffee\046\uffee\053\uffee\054\uffee\055\uffee\057\uffee\061" +
    "\uffee\062\uffee\063\uffee\065\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee\100\uffee\101" +
    "\uffee\102\uffee\103\uffee\105\uffee\001\002\000\102\003\ufffa" +
    "\005\ufffa\010\ufffa\013\ufffa\015\ufffa\017\ufffa\020\ufffa\022" +
    "\ufffa\024\ufffa\033\ufffa\046\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\057\ufffa\061\ufffa\062\ufffa\063\ufffa\065\ufffa\067\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\077\ufffa" +
    "\100\ufffa\101\ufffa\102\ufffa\103\ufffa\105\ufffa\001\002\000" +
    "\004\033\uffbf\001\002\000\076\006\uff7f\012\uff7f\014\uff7f" +
    "\016\uff7f\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\047" +
    "\uff7f\051\uff7f\052\uff7f\056\uff7f\064\uff7f\066\uff7f\076\uff7f" +
    "\104\uff7f\001\002\000\022\010\050\013\060\015\010\017" +
    "\034\020\045\022\055\024\031\033\011\001\002\000\076" +
    "\006\uff7c\012\uff7c\014\uff7c\016\uff7c\021\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\047\uff7c\051\uff7c\052\uff7c\056\uff7c" +
    "\064\uff7c\066\uff7c\076\uff7c\104\uff7c\001\002\000\076\006" +
    "\uffaa\012\uffaa\014\uffaa\016\uffaa\021\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\047\uffaa\051\uffaa\052\uffaa\056\uffaa\064" +
    "\uffaa\066\uffaa\076\uffaa\104\uffaa\001\002\000\022\010\uffb4" +
    "\013\uffb4\015\uffb4\017\uffb4\020\uffb4\022\uffb4\024\uffb4\033" +
    "\uffb4\001\002\000\102\003\ufff2\005\ufff2\010\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\022\ufff2\024\ufff2\033\ufff2\046" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2" +
    "\103\ufff2\105\ufff2\001\002\000\004\033\122\001\002\000" +
    "\102\003\ufff8\005\ufff8\010\ufff8\013\ufff8\015\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\024\ufff8\033\ufff8\046\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\105\ufff8" +
    "\001\002\000\076\006\uff7d\012\uff7d\014\uff7d\016\uff7d\021" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\047\uff7d\051\uff7d" +
    "\052\uff7d\056\uff7d\064\uff7d\066\uff7d\076\uff7d\104\uff7d\001" +
    "\002\000\022\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\001\002\000\102\003\ufff3\005" +
    "\ufff3\010\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\024\ufff3\033\ufff3\046\ufff3\053\ufff3\054\ufff3\055\ufff3\057" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\100" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\105\ufff3\001\002\000\076" +
    "\006\uff81\012\uff81\014\uff81\016\uff81\021\uff81\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
    "\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\047\uff81\051\uff81\052\uff81\056\uff81" +
    "\064\uff81\066\uff81\076\uff81\104\uff81\001\002\000\102\003" +
    "\ufff4\005\ufff4\010\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\024\ufff4\033\ufff4\046\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\065\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\077" +
    "\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\105\ufff4\001\002" +
    "\000\010\023\065\024\066\033\064\001\002\000\004\051" +
    "\121\001\002\000\024\010\050\013\060\015\010\017\034" +
    "\020\045\022\055\024\031\033\011\034\112\001\002\000" +
    "\020\010\uff95\013\uff95\015\uff95\017\uff95\020\uff95\022\uff95" +
    "\033\uff95\001\002\000\020\010\uff93\013\uff93\015\uff93\017" +
    "\uff93\020\uff93\022\uff93\033\uff93\001\002\000\020\010\050" +
    "\013\060\015\010\017\034\020\045\022\055\033\011\001" +
    "\002\000\076\006\uff92\012\uff92\014\uff92\016\uff92\021\uff92" +
    "\023\uff92\024\uff92\025\071\026\074\030\uff92\031\073\032" +
    "\072\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\047\uff92\051\uff92\052" +
    "\uff92\056\uff92\064\uff92\066\uff92\076\uff92\104\uff92\001\002" +
    "\000\020\010\uff8e\013\uff8e\015\uff8e\017\uff8e\020\uff8e\022" +
    "\uff8e\033\uff8e\001\002\000\020\010\uff8a\013\uff8a\015\uff8a" +
    "\017\uff8a\020\uff8a\022\uff8a\033\uff8a\001\002\000\004\027" +
    "\uff88\001\002\000\020\010\uff8c\013\uff8c\015\uff8c\017\uff8c" +
    "\020\uff8c\022\uff8c\033\uff8c\001\002\000\020\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\033\011\001\002" +
    "\000\076\006\uff8b\012\uff8b\014\uff8b\016\uff8b\021\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\047\uff8b\051\uff8b\052\uff8b" +
    "\056\uff8b\064\uff8b\066\uff8b\076\uff8b\104\uff8b\001\002\000" +
    "\004\027\100\001\002\000\022\010\uff87\013\uff87\015\uff87" +
    "\017\uff87\020\uff87\022\uff87\024\uff87\033\uff87\001\002\000" +
    "\022\010\050\013\060\015\010\017\034\020\045\022\055" +
    "\024\031\033\011\001\002\000\010\023\065\024\066\030" +
    "\103\001\002\000\076\006\uff86\012\uff86\014\uff86\016\uff86" +
    "\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\047\uff86\051" +
    "\uff86\052\uff86\056\uff86\064\uff86\066\uff86\076\uff86\104\uff86" +
    "\001\002\000\020\010\050\013\060\015\010\017\034\020" +
    "\045\022\055\033\011\001\002\000\076\006\uff89\012\uff89" +
    "\014\uff89\016\uff89\021\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\047\uff89\051\uff89\052\uff89\056\uff89\064\uff89\066\uff89" +
    "\076\uff89\104\uff89\001\002\000\020\010\050\013\060\015" +
    "\010\017\034\020\045\022\055\033\011\001\002\000\076" +
    "\006\uff8d\012\uff8d\014\uff8d\016\uff8d\021\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\047\uff8d\051\uff8d\052\uff8d\056\uff8d" +
    "\064\uff8d\066\uff8d\076\uff8d\104\uff8d\001\002\000\020\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\033\011" +
    "\001\002\000\076\006\uff94\012\uff94\014\uff94\016\uff94\021" +
    "\uff94\023\uff94\024\uff94\025\071\026\074\030\uff94\031\073" +
    "\032\072\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\047\uff94\051\uff94" +
    "\052\uff94\056\uff94\064\uff94\066\uff94\076\uff94\104\uff94\001" +
    "\002\000\004\051\120\001\002\000\006\034\115\052\116" +
    "\001\002\000\012\023\065\024\066\034\uffca\052\uffca\001" +
    "\002\000\004\051\uffcc\001\002\000\022\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\001" +
    "\002\000\012\023\065\024\066\034\uffcb\052\uffcb\001\002" +
    "\000\106\003\uffc4\005\uffc4\010\uffc4\013\uffc4\015\uffc4\017" +
    "\uffc4\020\uffc4\022\uffc4\024\uffc4\033\uffc4\034\uffc4\046\uffc4" +
    "\051\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\077\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\105\uffc4\001\002\000\106\003\uffc5\005\uffc5" +
    "\010\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\024" +
    "\uffc5\033\uffc5\034\uffc5\046\uffc5\051\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\105\uffc5\001" +
    "\002\000\030\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\034\126\045\123\101\056\001" +
    "\002\000\004\033\uffa9\001\002\000\006\034\uffad\051\uffad" +
    "\001\002\000\012\034\uffa2\043\uffa2\044\uffa2\051\uffa2\001" +
    "\002\000\004\051\165\001\002\000\026\023\065\024\066" +
    "\034\uffae\035\144\036\143\037\145\040\141\041\146\042" +
    "\142\051\uffae\001\002\000\012\034\uffaf\043\135\044\134" +
    "\051\uffaf\001\002\000\004\034\132\001\002\000\004\051" +
    "\133\001\002\000\102\003\uffc7\005\uffc7\010\uffc7\013\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\022\uffc7\024\uffc7\033\uffc7\046" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\105\uffc7\001\002\000\022\010\uffa6\013\uffa6\015" +
    "\uffa6\017\uffa6\020\uffa6\022\uffa6\024\uffa6\033\uffa6\001\002" +
    "\000\022\010\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\022" +
    "\uffa4\024\uffa4\033\uffa4\001\002\000\022\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\001" +
    "\002\000\012\034\uffa3\043\uffa3\044\uffa3\051\uffa3\001\002" +
    "\000\022\023\065\024\066\035\144\036\143\037\145\040" +
    "\141\041\146\042\142\001\002\000\022\010\uff9d\013\uff9d" +
    "\015\uff9d\017\uff9d\020\uff9d\022\uff9d\024\uff9d\033\uff9d\001" +
    "\002\000\022\010\uff99\013\uff99\015\uff99\017\uff99\020\uff99" +
    "\022\uff99\024\uff99\033\uff99\001\002\000\022\010\uffa1\013" +
    "\uffa1\015\uffa1\017\uffa1\020\uffa1\022\uffa1\024\uffa1\033\uffa1" +
    "\001\002\000\022\010\uff9b\013\uff9b\015\uff9b\017\uff9b\020" +
    "\uff9b\022\uff9b\024\uff9b\033\uff9b\001\002\000\022\010\uff9f" +
    "\013\uff9f\015\uff9f\017\uff9f\020\uff9f\022\uff9f\024\uff9f\033" +
    "\uff9f\001\002\000\022\010\uff97\013\uff97\015\uff97\017\uff97" +
    "\020\uff97\022\uff97\024\uff97\033\uff97\001\002\000\022\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\024\031" +
    "\033\011\001\002\000\016\023\065\024\066\034\uff96\043" +
    "\uff96\044\uff96\051\uff96\001\002\000\022\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\001" +
    "\002\000\016\023\065\024\066\034\uff9e\043\uff9e\044\uff9e" +
    "\051\uff9e\001\002\000\022\010\050\013\060\015\010\017" +
    "\034\020\045\022\055\024\031\033\011\001\002\000\016" +
    "\023\065\024\066\034\uff9a\043\uff9a\044\uff9a\051\uff9a\001" +
    "\002\000\022\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\001\002\000\016\023\065\024" +
    "\066\034\uffa0\043\uffa0\044\uffa0\051\uffa0\001\002\000\022" +
    "\010\050\013\060\015\010\017\034\020\045\022\055\024" +
    "\031\033\011\001\002\000\016\023\065\024\066\034\uff98" +
    "\043\uff98\044\uff98\051\uff98\001\002\000\022\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\001\002\000\016\023\065\024\066\034\uff9c\043\uff9c\044" +
    "\uff9c\051\uff9c\001\002\000\022\010\050\013\060\015\010" +
    "\017\034\020\045\022\055\024\031\033\011\001\002\000" +
    "\012\034\uffa5\043\uffa5\044\uffa5\051\uffa5\001\002\000\102" +
    "\003\uffc6\005\uffc6\010\uffc6\013\uffc6\015\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\024\uffc6\033\uffc6\046\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\105\uffc6\001" +
    "\002\000\004\033\167\001\002\000\024\010\uffa8\013\uffa8" +
    "\015\uffa8\017\uffa8\020\uffa8\022\uffa8\024\uffa8\033\uffa8\045" +
    "\uffa8\001\002\000\024\010\050\013\060\015\010\017\034" +
    "\020\045\022\055\024\031\033\011\045\123\001\002\000" +
    "\010\034\172\043\135\044\134\001\002\000\012\034\uffa7" +
    "\043\uffa7\044\uffa7\051\uffa7\001\002\000\022\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\001\002\000\006\047\175\052\176\001\002\000\012\012" +
    "\uffb3\014\uffb3\016\uffb3\021\uffb3\001\002\000\022\010\050" +
    "\013\060\015\010\017\034\020\045\022\055\024\031\033" +
    "\011\001\002\000\014\006\uffac\023\065\024\066\047\uffac" +
    "\052\uffac\001\002\000\012\012\201\014\202\016\204\021" +
    "\205\001\002\000\026\010\uffb8\013\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\022\uffb8\024\uffb8\033\uffb8\050\uffb8\076\uffb8\001" +
    "\002\000\026\010\uffb6\013\uffb6\015\uffb6\017\uffb6\020\uffb6" +
    "\022\uffb6\024\uffb6\033\uffb6\050\uffb6\076\uffb6\001\002\000" +
    "\004\050\206\001\002\000\026\010\uffb7\013\uffb7\015\uffb7" +
    "\017\uffb7\020\uffb7\022\uffb7\024\uffb7\033\uffb7\050\uffb7\076" +
    "\uffb7\001\002\000\026\010\uffb5\013\uffb5\015\uffb5\017\uffb5" +
    "\020\uffb5\022\uffb5\024\uffb5\033\uffb5\050\uffb5\076\uffb5\001" +
    "\002\000\026\010\uffb2\013\uffb2\015\uffb2\017\uffb2\020\uffb2" +
    "\022\uffb2\024\uffb2\033\uffb2\045\uffb2\101\uffb2\001\002\000" +
    "\026\010\050\013\060\015\010\017\034\020\045\022\055" +
    "\024\031\033\011\045\123\101\056\001\002\000\004\051" +
    "\uffb1\001\002\000\004\051\212\001\002\000\102\003\uffb0" +
    "\005\uffb0\010\uffb0\013\uffb0\015\uffb0\017\uffb0\020\uffb0\022" +
    "\uffb0\024\uffb0\033\uffb0\046\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\057\uffb0\061\uffb0\062\uffb0\063\uffb0\065\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\077\uffb0" +
    "\100\uffb0\101\uffb0\102\uffb0\103\uffb0\105\uffb0\001\002\000" +
    "\010\023\065\024\066\066\214\001\002\000\004\055\216" +
    "\001\002\000\006\055\uffda\057\uffda\001\002\000\022\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\024\031" +
    "\033\011\001\002\000\006\055\216\057\221\001\002\000" +
    "\006\055\uffdb\057\uffdb\001\002\000\004\060\222\001\002" +
    "\000\054\003\036\010\050\013\060\015\010\017\034\020" +
    "\045\022\055\024\031\033\011\046\051\053\025\063\035" +
    "\067\027\071\023\073\053\074\037\077\040\101\056\102" +
    "\012\103\044\105\046\001\002\000\056\003\036\010\050" +
    "\013\060\015\010\017\034\020\045\022\055\024\031\033" +
    "\011\046\051\053\025\061\225\063\035\067\027\071\023" +
    "\073\053\074\037\077\040\101\056\102\012\103\044\105" +
    "\046\001\002\000\102\003\ufffc\005\ufffc\010\ufffc\013\ufffc" +
    "\015\ufffc\017\ufffc\020\ufffc\022\ufffc\024\ufffc\033\ufffc\046" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\057\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc" +
    "\103\ufffc\105\ufffc\001\002\000\102\003\uffdc\005\uffdc\010" +
    "\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc\022\uffdc\024\uffdc" +
    "\033\uffdc\046\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\065\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\103\uffdc\105\uffdc\001\002\000\010\023\065" +
    "\024\066\056\227\001\002\000\004\060\230\001\002\000" +
    "\054\003\036\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\046\051\053\025\063\035\067" +
    "\027\071\023\073\053\074\037\077\040\101\056\102\012" +
    "\103\044\105\046\001\002\000\060\003\036\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\046\051\053\025\055\uffd9\057\uffd9\063\035\067\027\071" +
    "\023\073\053\074\037\077\040\101\056\102\012\103\044" +
    "\105\046\001\002\000\004\033\233\001\002\000\026\010" +
    "\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\022\uffbe\024\uffbe" +
    "\033\uffbe\045\uffbe\101\uffbe\001\002\000\026\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\045\123\101\056\001\002\000\004\034\236\001\002\000" +
    "\004\051\uffbd\001\002\000\004\051\240\001\002\000\102" +
    "\003\uffbc\005\uffbc\010\uffbc\013\uffbc\015\uffbc\017\uffbc\020" +
    "\uffbc\022\uffbc\024\uffbc\033\uffbc\046\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc\065\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\105\uffbc\001" +
    "\002\000\016\012\201\014\202\016\204\021\205\023\065" +
    "\024\066\001\002\000\006\033\243\076\244\001\002\000" +
    "\004\034\260\001\002\000\004\033\245\001\002\000\012" +
    "\012\201\014\202\016\204\021\205\001\002\000\054\003" +
    "\036\010\050\013\060\015\010\017\034\020\045\022\055" +
    "\024\031\033\011\046\051\053\025\063\035\067\027\071" +
    "\023\073\053\074\037\077\040\101\056\102\012\103\044" +
    "\105\046\001\002\000\056\003\036\010\050\013\060\015" +
    "\010\017\034\020\045\022\055\024\031\033\011\046\051" +
    "\053\025\063\035\067\027\071\023\073\053\074\037\077" +
    "\040\100\250\101\056\102\012\103\044\105\046\001\002" +
    "\000\102\003\uffd2\005\uffd2\010\uffd2\013\uffd2\015\uffd2\017" +
    "\uffd2\020\uffd2\022\uffd2\024\uffd2\033\uffd2\046\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\057\uffd2\061\uffd2\062\uffd2\063\uffd2\065" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\105" +
    "\uffd2\001\002\000\006\034\uffce\052\uffce\001\002\000\022" +
    "\010\050\013\060\015\010\017\034\020\045\022\055\024" +
    "\031\033\011\001\002\000\006\034\254\052\255\001\002" +
    "\000\054\003\uffd0\010\uffd0\013\uffd0\015\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\024\uffd0\033\uffd0\046\uffd0\053\uffd0\063\uffd0" +
    "\067\uffd0\071\uffd0\073\uffd0\074\uffd0\077\uffd0\101\uffd0\102" +
    "\uffd0\103\uffd0\105\uffd0\001\002\000\012\012\201\014\202" +
    "\016\204\021\205\001\002\000\006\034\uffcf\052\uffcf\001" +
    "\002\000\012\023\065\024\066\034\uffcd\052\uffcd\001\002" +
    "\000\054\003\036\010\050\013\060\015\010\017\034\020" +
    "\045\022\055\024\031\033\011\046\051\053\025\063\035" +
    "\067\027\071\023\073\053\074\037\077\040\101\056\102" +
    "\012\103\044\105\046\001\002\000\056\003\036\010\050" +
    "\013\060\015\010\017\034\020\045\022\055\024\031\033" +
    "\011\046\051\053\025\063\035\067\027\071\023\073\053" +
    "\074\037\077\040\100\262\101\056\102\012\103\044\105" +
    "\046\001\002\000\102\003\uffc9\005\uffc9\010\uffc9\013\uffc9" +
    "\015\uffc9\017\uffc9\020\uffc9\022\uffc9\024\uffc9\033\uffc9\046" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\075\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\105\uffc9\001\002\000\012\023\065\024\066\033" +
    "\264\076\265\001\002\000\004\034\271\001\002\000\004" +
    "\033\245\001\002\000\054\003\036\010\050\013\060\015" +
    "\010\017\034\020\045\022\055\024\031\033\011\046\051" +
    "\053\025\063\035\067\027\071\023\073\053\074\037\077" +
    "\040\101\056\102\012\103\044\105\046\001\002\000\056" +
    "\003\036\010\050\013\060\015\010\017\034\020\045\022" +
    "\055\024\031\033\011\046\051\053\025\063\035\067\027" +
    "\071\023\073\053\074\037\075\270\077\040\101\056\102" +
    "\012\103\044\105\046\001\002\000\102\003\uffd1\005\uffd1" +
    "\010\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\022\uffd1\024" +
    "\uffd1\033\uffd1\046\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\065\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\102\uffd1\103\uffd1\105\uffd1\001\002\000\054\003" +
    "\036\010\050\013\060\015\010\017\034\020\045\022\055" +
    "\024\031\033\011\046\051\053\025\063\035\067\027\071" +
    "\023\073\053\074\037\077\040\101\056\102\012\103\044" +
    "\105\046\001\002\000\056\003\036\010\050\013\060\015" +
    "\010\017\034\020\045\022\055\024\031\033\011\046\051" +
    "\053\025\063\035\067\027\071\023\073\053\074\037\075" +
    "\273\077\040\101\056\102\012\103\044\105\046\001\002" +
    "\000\102\003\uffc8\005\uffc8\010\uffc8\013\uffc8\015\uffc8\017" +
    "\uffc8\020\uffc8\022\uffc8\024\uffc8\033\uffc8\046\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8\065" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\105" +
    "\uffc8\001\002\000\022\005\277\051\302\061\304\062\301" +
    "\065\275\070\303\075\276\100\300\001\002\000\102\003" +
    "\uffe6\005\uffe6\010\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\024\uffe6\033\uffe6\046\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\105\uffe6\001\002" +
    "\000\102\003\uffe8\005\uffe8\010\uffe8\013\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\033\uffe8\046\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\065" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\105" +
    "\uffe8\001\002\000\102\003\uffe4\005\uffe4\010\uffe4\013\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\022\uffe4\024\uffe4\033\uffe4\046" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\065\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073" +
    "\uffe4\074\uffe4\075\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4" +
    "\103\uffe4\105\uffe4\001\002\000\102\003\uffe9\005\uffe9\010" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\022\uffe9\024\uffe9" +
    "\033\uffe9\046\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\065\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\077\uffe9\100\uffe9\101" +
    "\uffe9\102\uffe9\103\uffe9\105\uffe9\001\002\000\102\003\uffe5" +
    "\005\uffe5\010\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\022" +
    "\uffe5\024\uffe5\033\uffe5\046\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\057\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\105\uffe5\001\002\000" +
    "\102\003\uffeb\005\uffeb\010\uffeb\013\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\024\uffeb\033\uffeb\046\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\105\uffeb" +
    "\001\002\000\102\003\uffe7\005\uffe7\010\uffe7\013\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\022\uffe7\024\uffe7\033\uffe7\046\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\057\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103" +
    "\uffe7\105\uffe7\001\002\000\102\003\uffea\005\uffea\010\uffea" +
    "\013\uffea\015\uffea\017\uffea\020\uffea\022\uffea\024\uffea\033" +
    "\uffea\046\uffea\053\uffea\054\uffea\055\uffea\057\uffea\061\uffea" +
    "\062\uffea\063\uffea\065\uffea\067\uffea\070\uffea\071\uffea\072" +
    "\uffea\073\uffea\074\uffea\075\uffea\077\uffea\100\uffea\101\uffea" +
    "\102\uffea\103\uffea\105\uffea\001\002\000\102\003\uffec\005" +
    "\uffec\010\uffec\013\uffec\015\uffec\017\uffec\020\uffec\022\uffec" +
    "\024\uffec\033\uffec\046\uffec\053\uffec\054\uffec\055\uffec\057" +
    "\uffec\061\uffec\062\uffec\063\uffec\065\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\077\uffec\100" +
    "\uffec\101\uffec\102\uffec\103\uffec\105\uffec\001\002\000\010" +
    "\006\307\023\065\024\066\001\002\000\022\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\001\002\000\010\023\065\024\066\064\311\001\002\000" +
    "\022\010\050\013\060\015\010\017\034\020\045\022\055" +
    "\024\031\033\011\001\002\000\012\023\065\024\066\066" +
    "\313\104\314\001\002\000\054\003\036\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\046" +
    "\051\053\025\063\035\067\027\071\023\073\053\074\037" +
    "\077\040\101\056\102\012\103\044\105\046\001\002\000" +
    "\004\013\315\001\002\000\004\066\316\001\002\000\054" +
    "\003\036\010\050\013\060\015\010\017\034\020\045\022" +
    "\055\024\031\033\011\046\051\053\025\063\035\067\027" +
    "\071\023\073\053\074\037\077\040\101\056\102\012\103" +
    "\044\105\046\001\002\000\056\003\036\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\046" +
    "\051\053\025\063\035\065\320\067\027\071\023\073\053" +
    "\074\037\077\040\101\056\102\012\103\044\105\046\001" +
    "\002\000\102\003\uffe2\005\uffe2\010\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\022\uffe2\024\uffe2\033\uffe2\046\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\065\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2" +
    "\105\uffe2\001\002\000\056\003\036\010\050\013\060\015" +
    "\010\017\034\020\045\022\055\024\031\033\011\046\051" +
    "\053\025\063\035\065\322\067\027\071\023\073\053\074" +
    "\037\077\040\101\056\102\012\103\044\105\046\001\002" +
    "\000\102\003\uffe3\005\uffe3\010\uffe3\013\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\024\uffe3\033\uffe3\046\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\065" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\105" +
    "\uffe3\001\002\000\026\010\050\013\060\015\010\017\034" +
    "\020\045\022\055\024\031\033\011\045\123\101\056\001" +
    "\002\000\004\051\325\001\002\000\102\003\uffb9\005\uffb9" +
    "\010\uffb9\013\uffb9\015\uffb9\017\uffb9\020\uffb9\022\uffb9\024" +
    "\uffb9\033\uffb9\046\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\065\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\105\uffb9\001\002\000\020\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\033\011" +
    "\001\002\000\076\006\uff90\012\uff90\014\uff90\016\uff90\021" +
    "\uff90\023\uff90\024\uff90\025\071\026\074\030\uff90\031\073" +
    "\032\072\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\047\uff90\051\uff90" +
    "\052\uff90\056\uff90\064\uff90\066\uff90\076\uff90\104\uff90\001" +
    "\002\000\026\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\045\123\101\056\001\002\000" +
    "\004\034\332\001\002\000\004\066\333\001\002\000\054" +
    "\003\036\010\050\013\060\015\010\017\034\020\045\022" +
    "\055\024\031\033\011\046\051\053\025\063\035\067\027" +
    "\071\023\073\053\074\037\077\040\101\056\102\012\103" +
    "\044\105\046\001\002\000\056\003\036\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\046" +
    "\051\053\025\063\035\067\027\070\335\071\023\073\053" +
    "\074\037\077\040\101\056\102\012\103\044\105\046\001" +
    "\002\000\102\003\uffe1\005\uffe1\010\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\024\uffe1\033\uffe1\046\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\065\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1" +
    "\105\uffe1\001\002\000\026\010\050\013\060\015\010\017" +
    "\034\020\045\022\055\024\031\033\011\045\123\101\056" +
    "\001\002\000\004\034\340\001\002\000\004\060\341\001" +
    "\002\000\054\003\036\010\050\013\060\015\010\017\034" +
    "\020\045\022\055\024\031\033\011\046\051\053\025\063" +
    "\035\067\027\071\023\073\053\074\037\077\040\101\056" +
    "\102\012\103\044\105\046\001\002\000\062\003\036\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\024\031" +
    "\033\011\046\051\053\025\054\346\057\345\062\343\063" +
    "\035\067\027\071\023\073\053\074\037\077\040\101\056" +
    "\102\012\103\044\105\046\001\002\000\102\003\uffd8\005" +
    "\uffd8\010\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\024\uffd8\033\uffd8\046\uffd8\053\uffd8\054\uffd8\055\uffd8\057" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\077\uffd8\100" +
    "\uffd8\101\uffd8\102\uffd8\103\uffd8\105\uffd8\001\002\000\010" +
    "\054\356\057\355\062\357\001\002\000\054\003\036\010" +
    "\050\013\060\015\010\017\034\020\045\022\055\024\031" +
    "\033\011\046\051\053\025\063\035\067\027\071\023\073" +
    "\053\074\037\077\040\101\056\102\012\103\044\105\046" +
    "\001\002\000\004\033\347\001\002\000\026\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\045\123\101\056\001\002\000\004\034\351\001\002\000" +
    "\004\060\352\001\002\000\054\003\036\010\050\013\060" +
    "\015\010\017\034\020\045\022\055\024\031\033\011\046" +
    "\051\053\025\063\035\067\027\071\023\073\053\074\037" +
    "\077\040\101\056\102\012\103\044\105\046\001\002\000" +
    "\062\003\036\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\046\051\053\025\054\uffd4\057" +
    "\uffd4\062\uffd4\063\035\067\027\071\023\073\053\074\037" +
    "\077\040\101\056\102\012\103\044\105\046\001\002\000" +
    "\062\003\036\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\046\051\053\025\054\uffd3\057" +
    "\uffd3\062\uffd3\063\035\067\027\071\023\073\053\074\037" +
    "\077\040\101\056\102\012\103\044\105\046\001\002\000" +
    "\054\003\036\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\046\051\053\025\063\035\067" +
    "\027\071\023\073\053\074\037\077\040\101\056\102\012" +
    "\103\044\105\046\001\002\000\004\033\360\001\002\000" +
    "\102\003\uffd7\005\uffd7\010\uffd7\013\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\022\uffd7\024\uffd7\033\uffd7\046\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\105\uffd7" +
    "\001\002\000\026\010\050\013\060\015\010\017\034\020" +
    "\045\022\055\024\031\033\011\045\123\101\056\001\002" +
    "\000\004\034\362\001\002\000\004\060\363\001\002\000" +
    "\054\003\036\010\050\013\060\015\010\017\034\020\045" +
    "\022\055\024\031\033\011\046\051\053\025\063\035\067" +
    "\027\071\023\073\053\074\037\077\040\101\056\102\012" +
    "\103\044\105\046\001\002\000\062\003\036\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\046\051\053\025\054\uffd6\057\uffd6\062\uffd6\063\035\067" +
    "\027\071\023\073\053\074\037\077\040\101\056\102\012" +
    "\103\044\105\046\001\002\000\062\003\036\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\046\051\053\025\054\uffd5\057\uffd5\062\uffd5\063\035\067" +
    "\027\071\023\073\053\074\037\077\040\101\056\102\012" +
    "\103\044\105\046\001\002\000\056\003\036\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\046\051\053\025\063\035\067\027\071\023\072\367\073" +
    "\053\074\037\077\040\101\056\102\012\103\044\105\046" +
    "\001\002\000\004\033\370\001\002\000\026\010\050\013" +
    "\060\015\010\017\034\020\045\022\055\024\031\033\011" +
    "\045\123\101\056\001\002\000\004\034\372\001\002\000" +
    "\004\051\373\001\002\000\102\003\uffe0\005\uffe0\010\uffe0" +
    "\013\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\033" +
    "\uffe0\046\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\065\uffe0\067\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\105\uffe0\001\002\000\004\005\375\001" +
    "\002\000\004\002\ufffd\001\002\000\004\033\377\001\002" +
    "\000\026\010\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2\022" +
    "\uffc2\024\uffc2\033\uffc2\045\uffc2\101\uffc2\001\002\000\026" +
    "\010\050\013\060\015\010\017\034\020\045\022\055\024" +
    "\031\033\011\045\123\101\056\001\002\000\004\034\u0102" +
    "\001\002\000\004\051\uffc1\001\002\000\004\051\u0104\001" +
    "\002\000\102\003\uffc0\005\uffc0\010\uffc0\013\uffc0\015\uffc0" +
    "\017\uffc0\020\uffc0\022\uffc0\024\uffc0\033\uffc0\046\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\065\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0" +
    "\105\uffc0\001\002\000\022\010\050\013\060\015\010\017" +
    "\034\020\045\022\055\024\031\033\011\001\002\000\010" +
    "\023\065\024\066\034\u0107\001\002\000\076\006\uff83\012" +
    "\uff83\014\uff83\016\uff83\021\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\047\uff83\051\uff83\052\uff83\056\uff83\064\uff83\066" +
    "\uff83\076\uff83\104\uff83\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\006\002\003\047\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\006\001\001\000\054" +
    "\003\027\004\023\010\017\013\041\015\015\016\042\017" +
    "\012\020\053\021\040\022\014\023\013\024\060\025\056" +
    "\026\051\027\016\030\032\031\025\032\021\043\031\045" +
    "\020\046\046\001\001\000\002\001\001\000\004\107\u0104" +
    "\001\001\000\004\053\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\027\004\023\013\041\015\223\016" +
    "\042\017\012\020\053\021\040\022\014\023\013\024\060" +
    "\025\056\026\051\027\016\030\032\031\025\032\021\043" +
    "\031\045\020\046\046\051\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\027\004\023\010\365\013" +
    "\041\015\015\016\042\017\012\020\053\021\040\022\014" +
    "\023\013\024\060\025\056\026\051\027\016\030\032\031" +
    "\025\032\021\043\031\045\020\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\027\004\023\032\305\045\020\046\046\001\001\000\004" +
    "\052\273\001\001\000\014\003\027\004\023\032\262\045" +
    "\020\046\046\001\001\000\014\003\027\004\023\032\240" +
    "\045\020\046\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\231\001\001\000\002" +
    "\001\001\000\014\003\027\004\023\032\212\045\020\046" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\027\004\023" +
    "\032\061\045\020\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\062\001\001" +
    "\000\002\001\001\000\016\003\027\004\023\032\113\042" +
    "\112\045\020\046\046\001\001\000\004\077\107\001\001" +
    "\000\004\100\066\001\001\000\012\003\067\004\023\045" +
    "\020\046\046\001\001\000\002\001\001\000\004\102\105" +
    "\001\001\000\004\104\103\001\001\000\004\105\076\001" +
    "\001\000\004\103\074\001\001\000\010\004\075\045\020" +
    "\046\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\100\001\001\000\014\003\027\004\023\032\101" +
    "\045\020\046\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\104\045\020\046\046\001\001\000\002" +
    "\001\001\000\010\004\106\045\020\046\046\001\001\000" +
    "\002\001\001\000\012\003\110\004\023\045\020\046\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\027" +
    "\004\023\032\116\045\020\046\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\027" +
    "\004\023\006\130\031\123\032\126\034\127\044\124\045" +
    "\020\046\046\001\001\000\004\065\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\162\001\001\000\004\070" +
    "\135\001\001\000\016\003\027\004\023\032\137\044\136" +
    "\045\020\046\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\160\001\001\000\004\075\156\001\001" +
    "\000\004\071\154\001\001\000\004\074\152\001\001\000" +
    "\004\072\150\001\001\000\004\076\146\001\001\000\014" +
    "\003\027\004\023\032\147\045\020\046\046\001\001\000" +
    "\002\001\001\000\014\003\027\004\023\032\151\045\020" +
    "\046\046\001\001\000\002\001\001\000\014\003\027\004" +
    "\023\032\153\045\020\046\046\001\001\000\002\001\001" +
    "\000\014\003\027\004\023\032\155\045\020\046\046\001" +
    "\001\000\002\001\001\000\014\003\027\004\023\032\157" +
    "\045\020\046\046\001\001\000\002\001\001\000\014\003" +
    "\027\004\023\032\161\045\020\046\046\001\001\000\002" +
    "\001\001\000\016\003\027\004\023\032\137\044\163\045" +
    "\020\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\167\001\001\000\020\003" +
    "\027\004\023\032\137\034\170\044\124\045\020\046\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\027\004\023\032\021\043\173\045\020\046\046\001\001" +
    "\000\002\001\001\000\004\062\177\001\001\000\014\003" +
    "\027\004\023\032\176\045\020\046\046\001\001\000\002" +
    "\001\001\000\004\035\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\206\001\001\000\024\003\027\004" +
    "\023\006\207\031\123\032\126\034\127\044\124\045\020" +
    "\046\046\001\001\000\004\064\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\214" +
    "\014\216\001\001\000\002\001\001\000\014\003\027\004" +
    "\023\032\225\045\020\046\046\001\001\000\004\011\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\027\004\023\010\222\013\041\015\015\016\042\017\012" +
    "\020\053\021\040\022\014\023\013\024\060\025\056\026" +
    "\051\027\016\030\032\031\025\032\021\043\031\045\020" +
    "\046\046\001\001\000\052\003\027\004\023\013\041\015" +
    "\223\016\042\017\012\020\053\021\040\022\014\023\013" +
    "\024\060\025\056\026\051\027\016\030\032\031\025\032" +
    "\021\043\031\045\020\046\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\027\004\023\010\230\013\041\015\015\016\042" +
    "\017\012\020\053\021\040\022\014\023\013\024\060\025" +
    "\056\026\051\027\016\030\032\031\025\032\021\043\031" +
    "\045\020\046\046\001\001\000\052\003\027\004\023\013" +
    "\041\015\223\016\042\017\012\020\053\021\040\022\014" +
    "\023\013\024\060\025\056\026\051\027\016\030\032\031" +
    "\025\032\021\043\031\045\020\046\046\001\001\000\002" +
    "\001\001\000\004\057\233\001\001\000\024\003\027\004" +
    "\023\006\234\031\123\032\126\034\127\044\124\045\020" +
    "\046\046\001\001\000\002\001\001\000\004\060\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\245\001\001\000\010\035\251\037\252\040\250\001\001" +
    "\000\054\003\027\004\023\010\246\013\041\015\015\016" +
    "\042\017\012\020\053\021\040\022\014\023\013\024\060" +
    "\025\056\026\051\027\016\030\032\031\025\032\021\043" +
    "\031\045\020\046\046\001\001\000\052\003\027\004\023" +
    "\013\041\015\223\016\042\017\012\020\053\021\040\022" +
    "\014\023\013\024\060\025\056\026\051\027\016\030\032" +
    "\031\025\032\021\043\031\045\020\046\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\027\004\023" +
    "\032\256\045\020\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\251\040\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\027\004\023\010" +
    "\260\013\041\015\015\016\042\017\012\020\053\021\040" +
    "\022\014\023\013\024\060\025\056\026\051\027\016\030" +
    "\032\031\025\032\021\043\031\045\020\046\046\001\001" +
    "\000\052\003\027\004\023\013\041\015\223\016\042\017" +
    "\012\020\053\021\040\022\014\023\013\024\060\025\056" +
    "\026\051\027\016\030\032\031\025\032\021\043\031\045" +
    "\020\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\265\001\001\000\054\003" +
    "\027\004\023\010\266\013\041\015\015\016\042\017\012" +
    "\020\053\021\040\022\014\023\013\024\060\025\056\026" +
    "\051\027\016\030\032\031\025\032\021\043\031\045\020" +
    "\046\046\001\001\000\052\003\027\004\023\013\041\015" +
    "\223\016\042\017\012\020\053\021\040\022\014\023\013" +
    "\024\060\025\056\026\051\027\016\030\032\031\025\032" +
    "\021\043\031\045\020\046\046\001\001\000\002\001\001" +
    "\000\054\003\027\004\023\010\271\013\041\015\015\016" +
    "\042\017\012\020\053\021\040\022\014\023\013\024\060" +
    "\025\056\026\051\027\016\030\032\031\025\032\021\043" +
    "\031\045\020\046\046\001\001\000\052\003\027\004\023" +
    "\013\041\015\223\016\042\017\012\020\053\021\040\022" +
    "\014\023\013\024\060\025\056\026\051\027\016\030\032" +
    "\031\025\032\021\043\031\045\020\046\046\001\001\000" +
    "\002\001\001\000\004\005\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\027\004\023\032\307\045\020\046\046\001\001\000\002" +
    "\001\001\000\014\003\027\004\023\032\311\045\020\046" +
    "\046\001\001\000\002\001\001\000\054\003\027\004\023" +
    "\010\320\013\041\015\015\016\042\017\012\020\053\021" +
    "\040\022\014\023\013\024\060\025\056\026\051\027\016" +
    "\030\032\031\025\032\021\043\031\045\020\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\027" +
    "\004\023\010\316\013\041\015\015\016\042\017\012\020" +
    "\053\021\040\022\014\023\013\024\060\025\056\026\051" +
    "\027\016\030\032\031\025\032\021\043\031\045\020\046" +
    "\046\001\001\000\052\003\027\004\023\013\041\015\223" +
    "\016\042\017\012\020\053\021\040\022\014\023\013\024" +
    "\060\025\056\026\051\027\016\030\032\031\025\032\021" +
    "\043\031\045\020\046\046\001\001\000\002\001\001\000" +
    "\052\003\027\004\023\013\041\015\223\016\042\017\012" +
    "\020\053\021\040\022\014\023\013\024\060\025\056\026" +
    "\051\027\016\030\032\031\025\032\021\043\031\045\020" +
    "\046\046\001\001\000\002\001\001\000\024\003\027\004" +
    "\023\006\323\031\123\032\126\034\127\044\124\045\020" +
    "\046\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\326\004\023\045\020\046\046\001\001\000\002" +
    "\001\001\000\024\003\027\004\023\006\330\031\123\032" +
    "\126\034\127\044\124\045\020\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\027\004\023\010" +
    "\333\013\041\015\015\016\042\017\012\020\053\021\040" +
    "\022\014\023\013\024\060\025\056\026\051\027\016\030" +
    "\032\031\025\032\021\043\031\045\020\046\046\001\001" +
    "\000\052\003\027\004\023\013\041\015\223\016\042\017" +
    "\012\020\053\021\040\022\014\023\013\024\060\025\056" +
    "\026\051\027\016\030\032\031\025\032\021\043\031\045" +
    "\020\046\046\001\001\000\002\001\001\000\024\003\027" +
    "\004\023\006\336\031\123\032\126\034\127\044\124\045" +
    "\020\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\027\004\023\010\341\013\041\015\015\016" +
    "\042\017\012\020\053\021\040\022\014\023\013\024\060" +
    "\025\056\026\051\027\016\030\032\031\025\032\021\043" +
    "\031\045\020\046\046\001\001\000\054\003\027\004\023" +
    "\012\343\013\041\015\223\016\042\017\012\020\053\021" +
    "\040\022\014\023\013\024\060\025\056\026\051\027\016" +
    "\030\032\031\025\032\021\043\031\045\020\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\027" +
    "\004\023\010\353\013\041\015\015\016\042\017\012\020" +
    "\053\021\040\022\014\023\013\024\060\025\056\026\051" +
    "\027\016\030\032\031\025\032\021\043\031\045\020\046" +
    "\046\001\001\000\002\001\001\000\024\003\027\004\023" +
    "\006\347\031\123\032\126\034\127\044\124\045\020\046" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\027\004\023\010\352\013\041\015\015\016\042\017" +
    "\012\020\053\021\040\022\014\023\013\024\060\025\056" +
    "\026\051\027\016\030\032\031\025\032\021\043\031\045" +
    "\020\046\046\001\001\000\052\003\027\004\023\013\041" +
    "\015\223\016\042\017\012\020\053\021\040\022\014\023" +
    "\013\024\060\025\056\026\051\027\016\030\032\031\025" +
    "\032\021\043\031\045\020\046\046\001\001\000\052\003" +
    "\027\004\023\013\041\015\223\016\042\017\012\020\053" +
    "\021\040\022\014\023\013\024\060\025\056\026\051\027" +
    "\016\030\032\031\025\032\021\043\031\045\020\046\046" +
    "\001\001\000\054\003\027\004\023\010\364\013\041\015" +
    "\015\016\042\017\012\020\053\021\040\022\014\023\013" +
    "\024\060\025\056\026\051\027\016\030\032\031\025\032" +
    "\021\043\031\045\020\046\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\027\004\023\006\360\031" +
    "\123\032\126\034\127\044\124\045\020\046\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\027\004" +
    "\023\010\363\013\041\015\015\016\042\017\012\020\053" +
    "\021\040\022\014\023\013\024\060\025\056\026\051\027" +
    "\016\030\032\031\025\032\021\043\031\045\020\046\046" +
    "\001\001\000\052\003\027\004\023\013\041\015\223\016" +
    "\042\017\012\020\053\021\040\022\014\023\013\024\060" +
    "\025\056\026\051\027\016\030\032\031\025\032\021\043" +
    "\031\045\020\046\046\001\001\000\052\003\027\004\023" +
    "\013\041\015\223\016\042\017\012\020\053\021\040\022" +
    "\014\023\013\024\060\025\056\026\051\027\016\030\032" +
    "\031\025\032\021\043\031\045\020\046\046\001\001\000" +
    "\052\003\027\004\023\013\041\015\223\016\042\017\012" +
    "\020\053\021\040\022\014\023\013\024\060\025\056\026" +
    "\051\027\016\030\032\031\025\032\021\043\031\045\020" +
    "\046\046\001\001\000\002\001\001\000\024\003\027\004" +
    "\023\006\370\031\123\032\126\034\127\044\124\045\020" +
    "\046\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\377\001\001\000\024\003\027\004" +
    "\023\006\u0100\031\123\032\126\034\127\044\124\045\020" +
    "\046\046\001\001\000\002\001\001\000\004\055\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\027" +
    "\004\023\032\u0105\045\020\046\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$as$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$as$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$as$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$as$actions {
  private final as parser;

  /** Constructor */
  CUP$as$actions(as parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$as$do_action_part00000000(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$as$result;

      /* select the action based on the action number */
      switch (CUP$as$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		RESULT = start_val;
              CUP$as$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$as$parser.done_parsing();
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("FIN");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _INSTRUCCIONESleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCIONESright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCIONES = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
error.arbol_sintactico.add("BLOQUE_INSTRUCCIONES");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_PRINCIPAL ::= inicio NT$0 INSTRUCCIONES NT$1 finall 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _INSTRUCCIONESleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INSTRUCCIONESright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INSTRUCCIONES = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		System.out.println(_INSTRUCCIONES.toString()); error imprime = new error("lexema","tipo","descripcion",3,3);imprime.imprime(ArrayList.class.cast(_INSTRUCCIONES),0);error.arbol_sintactico.add("INICIO");error.arbol_sintactico.add("GLOBALA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",37, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int _Arayleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Arayright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _Aray = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _INSTRUCCION2left = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCION2right = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION2 = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> instrucciones = ArrayList.class.cast(_Aray);if (_INSTRUCCION2.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION2)); else  instrucciones.add(_INSTRUCCION2);RESULT = instrucciones;error.arbol_sintactico.add("BLOQUE_INSTRUCCION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int _INSTRUCCIONleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCIONright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> instrucciones = new ArrayList<>();if (_INSTRUCCION.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION)); else instrucciones.add(_INSTRUCCION);RESULT = instrucciones;error.arbol_sintactico.add("BLOQUE_INSTRUCCION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("ENCONTRO DECLARACION"); RESULT= Fimpr;error.arbol_sintactico.add("INSTRUCCION_DECLARACION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int _IMPRIMIRleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIR = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIR.toString(); System.out.println("encontro impresion linea simple"); RESULT= Fimpr;error.arbol_sintactico.add("INSTRUCCION_IMPRIMIR"); 
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= IMPRIMIRLN 
            {
              Object RESULT =null;
		int _IMPRIMIRLNleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRLNright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIRLN = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIRLN.toString();System.out.println("encontro impresion multipe linea");RESULT= Fimpr;error.arbol_sintactico.add("INSTRUCCION_IMPRIMIR_NL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("encontro ASIGNACION");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCION");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= METODOsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODOSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FUNCIONsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCIONSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CONDICIONIF 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CONDICION IF");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CICLO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= RETURN 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro RETURN");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CALL 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro LLAMADA");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro SWITCH");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
int columna = eright+1;
             int fila = eleft +1;
             String er = "\nLinea: "+fila+"\nColumna: "+columna;

             /*for (Integer id : expected_token_ids() ) {
                 System.out.println(id);
             }*/


             System.out.println("______ENCONTRO ERROR_________: "+er); System.out.println(e); 
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= error NT$2 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String c = "";RESULT = c;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fin ::= punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fin ::= fin_segun 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fin ::= fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fin ::= fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fin ::= fin_mientras 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fin ::= fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fin ::= fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fin ::= finall 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CICLO ::= para E flechita E hasta E hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CICLO ::= para E flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-9)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+","+_D+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLO ::= mientras abre_parentesis ETS cierra_parentesis hacer INSTRUCCIONES fin_mientras 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while( "+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLO ::= repetir INSTRUCCIONES hasta_que abre_parentesis ETS cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while(True):";cond.add(ifins);cond.add(ins);String fifi = "     if ("+_C.toString()+"):";String brek= "          break";cond.add(fifi);cond.add(brek); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COND_WHILE ::= verdadero 
            {
              Object RESULT =null;
		String Fe = " True "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COND_WHILE ::= falso 
            {
              Object RESULT =null;
		String Fe = " False "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND_WHILE ::= COMPARACIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SWITCH ::= segun E hacer OPCIONES de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _OPSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _OPSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _OPS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String primer = "k2 = "+_E.toString();condan.add(primer); condan.addAll(ArrayList.class.cast(_OPS));String elsa = "else:";condan.add(elsa); condan.add(ins);;RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCIONES ::= OPCIONES OPCION 
            {
              Object RESULT =null;
		int _OPSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _OPSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _OPS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _OPleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _OPright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _OP = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= ArrayList.class.cast(_OPS); ArrayList<Object> ins = ArrayList.class.cast(_OP);String ifins = "elif( k2 =="+ins.get(0).toString()+"):";condan.add(ifins);condan.add(ArrayList.class.cast(ins.get(1))); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCIONES ::= OPCION 
            {
              Object RESULT =null;
		int _OPleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _OPright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _OP = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>();ArrayList<Object> ins = ArrayList.class.cast(_OP);String ifins = "if( k2 =="+ins.get(0).toString()+"):";contr.add(ifins);contr.add( ArrayList.class.cast(ins.get(1))); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",10, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPCION ::= abre_pregunta E cierra_pregunta entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>();ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = _E.toString();contr.add(ifins);contr.add(ins); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCION",7, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICIONIF ::= si abre_parentesis ETS cierra_parentesis entonces INSTRUCCIONES fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",20, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONIF ::= si abre_parentesis ETS cierra_parentesis entonces INSTRUCCIONES IFANIDADOS fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";condan.add(ifins);condan.add(ins); condan.addAll(ArrayList.class.cast(_INFANIDADOS));RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",20, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFANIDADOS ::= IFANIDADOS o_si abre_parentesis ETS cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "elif("+_C.toString()+"):";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IFANIDADOS ::= IFANIDADOS de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "else:";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IFANIDADOS ::= o_si abre_parentesis ETS cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> conelse= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "elif("+_C.toString()+"):";conelse.add(ifins);conelse.add(ins); RESULT = conelse;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFANIDADOS ::= de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "else:";contr.add(ifins);contr.add(ins); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion E TIPODATO_DECLARACION con_parametros PARAMETROS INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO ::= metodo E con_parametros PARAMETROS INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= abre_parentesis PARS cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                        String instruccion="";
                                                        ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                        for (Object c: ides )
                                                        {
                                                            if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                instruccion+= c.toString()+",";
                                                            else  instruccion+= c.toString();

                                                        }

                                                        String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARS ::= PARS coma PAR 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARS ::= PAR 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",29, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PAR ::= TIPODATO_DECLARACION E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PAR",30, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                              String instruccion="";
                                                              ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                              for (Object c: ides )
                                                              {
                                                                  if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                  instruccion+= c.toString()+",";
                                                                  else  instruccion+= c.toString();

                                                              }

                                                              String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROSLL",31, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARSLL ::= PARSLL coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARSLL ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",32, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCIONsp ::= funcion E TIPODATO_DECLARACION abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCIONsp",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODOsp ::= metodo E abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODOsp",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN ::= retornar abre_parentesis ETS cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "return("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETURN ::= retornar abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		String FIM = "return()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CALL ::= ejecutar E PARAMETROSLL punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FIM = _E.toString()+"("+_C.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",23, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CALL ::= ejecutar E abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		String FIM = _E.toString()+"()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",23, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$3 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("IMPRIMIR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("ABRE_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("CIERRA_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IMPRIMIR ::= imprimir NT$3 abre_parentesis NT$4 ETS cierra_parentesis NT$5 punto_y_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		String FIM = "print("+_E.toString()+")"; RESULT = FIM;error.arbol_sintactico.add("PUNTO_Y_COMA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$6 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("IMPRIMIR_NL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("ABRE_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("CIERRA_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$8",46, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IMPRIMIRLN ::= imprimir_nl NT$6 abre_parentesis NT$7 ETS cierra_parentesis NT$8 punto_y_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		String FIML = "print("+_E.toString()+")"; RESULT = FIML;error.arbol_sintactico.add("PUNTO_Y_COMA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",14, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRETS ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		RESULT = _E;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PRETS",5, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRETS ::= CALL 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		RESULT = _E; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("PRETS",5, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= IDS flechita ETS punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
    String instruccion="";
    ArrayList<Object> ides = ArrayList.class.cast(_IDS);
    for (Object c: ides )
    {
        instruccion+= c.toString()+"=";
        System.out.println(instruccion);
    }

    String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPODATO_DECLARACION ::= numero 
            {
              Object RESULT =null;
		error.arbol_sintactico.add("INT");
              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPODATO_DECLARACION ::= bulean 
            {
              Object RESULT =null;
		error.arbol_sintactico.add("BOOL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPODATO_DECLARACION ::= cadena 
            {
              Object RESULT =null;
		error.arbol_sintactico.add("STRING");
              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPODATO_DECLARACION ::= caracter 
            {
              Object RESULT =null;
		error.arbol_sintactico.add("CHAR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$9 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("INGRESAR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$9",47, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("COMO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$10",48, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
error.arbol_sintactico.add("CON VALOR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$11",49, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
error.arbol_sintactico.add("ETS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$12",50, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= ingresar NT$9 IDS como NT$10 TIPODATO_DECLARACION con_valor NT$11 ETS NT$12 punto_y_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-8)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		
String instruccion="";
ArrayList<Object> ides = ArrayList.class.cast(_IDS);
for (Object c: ides )
{
    instruccion+= c.toString()+"=";
    System.out.println(instruccion);
    }

String FIM = instruccion+_E.toString(); RESULT = FIM;error.arbol_sintactico.add("PUNTO_Y_COMA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ETS ::= COMPARACIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		RESULT = _E; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("ETS",4, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ETS ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		RESULT = _E; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("ETS",4, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ETS ::= CALL 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		RESULT = _E; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("ETS",4, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IDS ::= IDS coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",33, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IDS ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLE ::= variable 
            {
              Object RESULT =null;
		int _variableleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _variableright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _variable = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String r = _variable.toString(); RESULT = r;error.arbol_sintactico.add("_VARIABLE_");
              CUP$as$result = parser.getSymbolFactory().newSymbol("VARIABLE",36, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$13 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("NOT");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$13",51, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("ABRE_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$14",52, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COMPARACIONES ::= not NT$13 abre_parentesis NT$14 COMPARACIONES cierra_parentesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE ="not("+ _E.toString()+ ")"; RESULT = FE;error.arbol_sintactico.add("CIERRA_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$15 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("AND");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$15",53, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COMPARACIONES ::= COMPARACIONES and NT$15 COMP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "and"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$16 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("OR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$16",54, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COMPARACIONES ::= COMPARACIONES or NT$16 COMP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "or"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",26, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$17 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MENOR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$17",55, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COMP ::= E menor NT$17 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$18 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MAYOR_O_IGUAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$18",56, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COMP ::= E mayor_o_igual NT$18 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$19 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MENOR_O_IGUAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$19",57, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMP ::= E menor_o_igual NT$19 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$20 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MAYOR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$20",58, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMP ::= E mayor NT$20 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$21 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("ES_DIFERENTE");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$21",59, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMP ::= E es_diferente NT$21 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "!="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$22 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("ES_IGUAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$22",60, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMP ::= E es_igual NT$22 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "=="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",34, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$23 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MAS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$23",61, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E mas NT$23 Term 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "+"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$24 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MENOS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$24",62, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menos NT$24 Term 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "-"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$25 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("MENOS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$25",63, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= menos NT$25 Term 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = "-"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= Term 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$26 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("POR");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$26",64, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Term ::= Term por NT$26 Factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "*"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$27 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("DIVIDIDO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$27",65, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Term ::= Term dividido NT$27 Factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "/"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$28 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("MOD");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$28",66, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Term ::= Term mod NT$28 Factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "%"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$29 ::= 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
error.arbol_sintactico.add("POTENCIA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$29",67, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
error.arbol_sintactico.add("ABRE_CORCHETE");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$30",68, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Term potencia NT$29 abre_corchete NT$30 E cierra_corchete 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE = _E.toString()+ "**("+_F.toString()+")"; RESULT = FE;error.arbol_sintactico.add("CIERRA_CORCHETE");
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Term ::= Factor 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$31 ::= 
            {
              Object RESULT =null;
error.arbol_sintactico.add("ABRE_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$31",69, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= abre_parentesis NT$31 E cierra_parentesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE ="(" +_E.toString()+")"; RESULT = FE;error.arbol_sintactico.add("CIERRA_PARENTESIS");
              CUP$as$result = parser.getSymbolFactory().newSymbol("Factor",2, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= F 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Factor",2, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // F ::= number 
            {
              Object RESULT =null;
		int _numberleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _numberright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _number = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = _number.toString(); RESULT = FVR;error.arbol_sintactico.add("NUMERO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // F ::= verdadero 
            {
              Object RESULT =null;
		int _verdaderoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _verdaderoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _verdadero = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = "True"; RESULT = FVR;error.arbol_sintactico.add("VERDADERO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // F ::= falso 
            {
              Object RESULT =null;
		int _falsoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _falsoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _falso = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFS = "False"; RESULT = FFS;error.arbol_sintactico.add("FALSO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // F ::= frase 
            {
              Object RESULT =null;
		int _fraseleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _fraseright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frase = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFR = _frase.toString(); RESULT = FFR;error.arbol_sintactico.add("FRASE");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // F ::= frasecita 
            {
              Object RESULT =null;
		int _frasecitaleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _frasecitaright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frasecita = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FF = _frasecita.toString(); RESULT = FF;error.arbol_sintactico.add("FRASECITA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // F ::= VARIABLE 
            {
              Object RESULT =null;
		int _VARIABLEleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _VARIABLEright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _VARIABLE = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FV = _VARIABLE.toString(); RESULT = FV;error.arbol_sintactico.add("VARIABLE");
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$as$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$as$do_action(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
              return CUP$as$do_action_part00000000(
                               CUP$as$act_num,
                               CUP$as$parser,
                               CUP$as$stack,
                               CUP$as$top);
    }
}

}
