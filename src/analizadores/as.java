
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.company.error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class as extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public as() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public as(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public as(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\045" +
    "\005\000\002\006\004\000\002\006\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\046\002" +
    "\000\002\013\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\025" +
    "\013\000\002\025\015\000\002\025\011\000\002\025\011" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\011\012\000\002\012\004\000\002\012\003\000\002" +
    "\007\007\000\002\024\011\000\002\024\012\000\002\010" +
    "\011\000\002\010\005\000\002\010\010\000\002\010\004" +
    "\000\002\021\011\000\002\020\010\000\002\034\005\000" +
    "\002\035\005\000\002\035\003\000\002\036\004\000\002" +
    "\037\005\000\002\040\005\000\002\040\003\000\002\023" +
    "\011\000\002\022\010\000\002\026\007\000\002\026\006" +
    "\000\002\026\007\000\002\027\006\000\002\027\007\000" +
    "\002\015\007\000\002\015\007\000\002\016\007\000\002" +
    "\016\007\000\002\017\006\000\002\017\006\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\014\011\000\002\014\011\000\002\041\005\000" +
    "\002\041\003\000\002\044\003\000\002\032\006\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\004\000\002\030\003\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\007\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\004\006\001\002\000\004\002\366\001" +
    "\002\000\004\002\000\001\002\000\054\003\035\010\047" +
    "\013\057\015\010\017\033\020\044\022\054\024\030\033" +
    "\007\046\050\053\024\063\034\067\025\071\022\073\052" +
    "\074\036\077\037\101\055\102\011\103\043\105\045\001" +
    "\002\000\022\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\001\002\000\076\006\uff9d\012" +
    "\uff9d\014\uff9d\016\uff9d\021\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\047\uff9d\051\uff9d\052\uff9d\056\uff9d\064\uff9d\066" +
    "\uff9d\076\uff9d\104\uff9d\001\002\000\004\033\355\001\002" +
    "\000\102\003\ufffb\005\ufffb\010\ufffb\013\ufffb\015\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\024\ufffb\033\ufffb\046\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\065" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\105" +
    "\ufffb\001\002\000\102\003\ufff7\005\ufff7\010\ufff7\013\ufff7" +
    "\015\ufff7\017\ufff7\020\ufff7\022\ufff7\024\ufff7\033\ufff7\046" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\105\ufff7\001\002\000\102\003\ufff8\005\ufff8\010" +
    "\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8\024\ufff8" +
    "\033\ufff8\046\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\105\ufff8\001\002\000\102\003\ufffd" +
    "\005\ufffd\010\ufffd\013\ufffd\015\ufffd\017\ufffd\020\ufffd\022" +
    "\ufffd\024\ufffd\033\ufffd\046\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\057\ufffd\061\ufffd\062\ufffd\063\ufffd\065\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\077\ufffd" +
    "\100\ufffd\101\ufffd\102\ufffd\103\ufffd\105\ufffd\001\002\000" +
    "\102\003\ufff3\005\ufff3\010\ufff3\013\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\022\ufff3\024\ufff3\033\ufff3\046\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\105\ufff3" +
    "\001\002\000\056\003\035\005\354\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\046\050" +
    "\053\024\063\034\067\025\071\022\073\052\074\036\077" +
    "\037\101\055\102\011\103\043\105\045\001\002\000\076" +
    "\006\uffa1\012\uffa1\014\uffa1\016\uffa1\021\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\047\uffa1\051\uffa1\052\uffa1\056\uffa1" +
    "\064\uffa1\066\uffa1\076\uffa1\104\uffa1\001\002\000\014\006" +
    "\uffb7\023\064\024\065\047\uffb7\052\uffb7\001\002\000\054" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\101\055\102\011\103" +
    "\043\105\045\001\002\000\076\006\uffa3\012\uffa3\014\uffa3" +
    "\016\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\047" +
    "\uffa3\051\uffa3\052\uffa3\056\uffa3\064\uffa3\066\uffa3\076\uffa3" +
    "\104\uffa3\001\002\000\004\033\316\001\002\000\004\033" +
    "\305\001\002\000\102\003\ufff1\005\ufff1\010\ufff1\013\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\022\ufff1\024\ufff1\033\ufff1\046" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\105\ufff1\001\002\000\076\006\uffa8\012\uffa8\014" +
    "\uffa8\016\uffa8\021\uffa8\023\uffa8\024\uffa8\025\067\026\072" +
    "\030\uffa8\031\071\032\070\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\047\uffa8\051\uffa8\052\uffa8\056\uffa8\064\uffa8\066\uffa8\076" +
    "\uffa8\104\uffa8\001\002\000\020\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\033\007\001\002\000\006\006" +
    "\277\052\125\001\002\000\102\003\ufff2\005\ufff2\010\ufff2" +
    "\013\ufff2\015\ufff2\017\ufff2\020\ufff2\022\ufff2\024\ufff2\033" +
    "\ufff2\046\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\102\ufff2\103\ufff2\105\ufff2\001\002\000\076\006\uff9f\012" +
    "\uff9f\014\uff9f\016\uff9f\021\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\047\uff9f\051\uff9f\052\uff9f\056\uff9f\064\uff9f\066" +
    "\uff9f\076\uff9f\104\uff9f\001\002\000\022\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\001" +
    "\002\000\022\005\uffef\051\uffef\061\uffef\062\uffef\065\uffef" +
    "\070\uffef\075\uffef\100\uffef\001\002\000\022\010\047\013" +
    "\057\015\010\017\033\020\044\022\054\024\030\033\007" +
    "\001\002\000\022\010\047\013\057\015\010\017\033\020" +
    "\044\022\054\024\030\033\007\001\002\000\102\003\ufff9" +
    "\005\ufff9\010\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\022" +
    "\ufff9\024\ufff9\033\ufff9\046\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\057\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9" +
    "\100\ufff9\101\ufff9\102\ufff9\103\ufff9\105\ufff9\001\002\000" +
    "\102\003\ufff0\005\ufff0\010\ufff0\013\ufff0\015\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\024\ufff0\033\ufff0\046\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\057\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\105\ufff0" +
    "\001\002\000\102\003\ufffc\005\ufffc\010\ufffc\013\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\022\ufffc\024\ufffc\033\ufffc\046\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\057\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc" +
    "\074\ufffc\075\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103" +
    "\ufffc\105\ufffc\001\002\000\004\033\206\001\002\000\076" +
    "\006\uff9e\012\uff9e\014\uff9e\016\uff9e\021\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\047\uff9e\051\uff9e\052\uff9e\056\uff9e" +
    "\064\uff9e\066\uff9e\076\uff9e\104\uff9e\001\002\000\022\010" +
    "\047\013\057\015\010\017\033\020\044\022\054\024\030" +
    "\033\007\001\002\000\076\006\uff9b\012\uff9b\014\uff9b\016" +
    "\uff9b\021\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\047\uff9b" +
    "\051\uff9b\052\uff9b\056\uff9b\064\uff9b\066\uff9b\076\uff9b\104" +
    "\uff9b\001\002\000\076\006\uffb6\012\uffb6\014\uffb6\016\uffb6" +
    "\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6\051" +
    "\uffb6\052\uffb6\056\uffb6\064\uffb6\066\uffb6\076\uffb6\104\uffb6" +
    "\001\002\000\022\010\047\013\057\015\010\017\033\020" +
    "\044\022\054\024\030\033\007\001\002\000\102\003\ufff4" +
    "\005\ufff4\010\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\024\ufff4\033\ufff4\046\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\057\ufff4\061\ufff4\062\ufff4\063\ufff4\065\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4" +
    "\100\ufff4\101\ufff4\102\ufff4\103\ufff4\105\ufff4\001\002\000" +
    "\004\033\112\001\002\000\102\003\ufffa\005\ufffa\010\ufffa" +
    "\013\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\024\ufffa\033" +
    "\ufffa\046\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\077\ufffa\100\ufffa\101\ufffa" +
    "\102\ufffa\103\ufffa\105\ufffa\001\002\000\076\006\uff9c\012" +
    "\uff9c\014\uff9c\016\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\047\uff9c\051\uff9c\052\uff9c\056\uff9c\064\uff9c\066" +
    "\uff9c\076\uff9c\104\uff9c\001\002\000\022\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\001" +
    "\002\000\102\003\ufff5\005\ufff5\010\ufff5\013\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\024\ufff5\033\ufff5\046\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\057\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5" +
    "\105\ufff5\001\002\000\076\006\uffa0\012\uffa0\014\uffa0\016" +
    "\uffa0\021\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\056\uffa0\064\uffa0\066\uffa0\076\uffa0\104" +
    "\uffa0\001\002\000\102\003\ufff6\005\ufff6\010\ufff6\013\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\022\ufff6\024\ufff6\033\ufff6\046" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\057\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6" +
    "\103\ufff6\105\ufff6\001\002\000\010\023\064\024\065\033" +
    "\063\001\002\000\004\051\111\001\002\000\024\010\047" +
    "\013\057\015\010\017\033\020\044\022\054\024\030\033" +
    "\007\034\102\001\002\000\020\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\033\007\001\002\000\020\010" +
    "\047\013\057\015\010\017\033\020\044\022\054\033\007" +
    "\001\002\000\076\006\uffaa\012\uffaa\014\uffaa\016\uffaa\021" +
    "\uffaa\023\uffaa\024\uffaa\025\067\026\072\030\uffaa\031\071" +
    "\032\070\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\047\uffaa\051\uffaa" +
    "\052\uffaa\056\uffaa\064\uffaa\066\uffaa\076\uffaa\104\uffaa\001" +
    "\002\000\020\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\033\007\001\002\000\020\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\033\007\001\002\000\004" +
    "\027\074\001\002\000\020\010\047\013\057\015\010\017" +
    "\033\020\044\022\054\033\007\001\002\000\076\006\uffa6" +
    "\012\uffa6\014\uffa6\016\uffa6\021\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\047\uffa6\051\uffa6\052\uffa6\056\uffa6\064\uffa6" +
    "\066\uffa6\076\uffa6\104\uffa6\001\002\000\022\010\047\013" +
    "\057\015\010\017\033\020\044\022\054\024\030\033\007" +
    "\001\002\000\010\023\064\024\065\030\076\001\002\000" +
    "\076\006\uffa4\012\uffa4\014\uffa4\016\uffa4\021\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\047\uffa4\051\uffa4\052\uffa4\056" +
    "\uffa4\064\uffa4\066\uffa4\076\uffa4\104\uffa4\001\002\000\076" +
    "\006\uffa5\012\uffa5\014\uffa5\016\uffa5\021\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\047\uffa5\051\uffa5\052\uffa5\056\uffa5" +
    "\064\uffa5\066\uffa5\076\uffa5\104\uffa5\001\002\000\076\006" +
    "\uffa7\012\uffa7\014\uffa7\016\uffa7\021\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\047\uffa7\051\uffa7\052\uffa7\056\uffa7\064" +
    "\uffa7\066\uffa7\076\uffa7\104\uffa7\001\002\000\076\006\uffab" +
    "\012\uffab\014\uffab\016\uffab\021\uffab\023\uffab\024\uffab\025" +
    "\067\026\072\030\uffab\031\071\032\070\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\047\uffab\051\uffab\052\uffab\056\uffab\064\uffab" +
    "\066\uffab\076\uffab\104\uffab\001\002\000\004\051\110\001" +
    "\002\000\006\034\105\052\106\001\002\000\012\023\064" +
    "\024\065\034\uffcc\052\uffcc\001\002\000\004\051\uffce\001" +
    "\002\000\022\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\001\002\000\012\023\064\024" +
    "\065\034\uffcd\052\uffcd\001\002\000\104\003\uffc5\005\uffc5" +
    "\010\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\024" +
    "\uffc5\033\uffc5\034\uffc5\046\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\105\uffc5\001\002\000" +
    "\104\003\uffc6\005\uffc6\010\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\020\uffc6\022\uffc6\024\uffc6\033\uffc6\034\uffc6\046\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\105\uffc6\001\002\000\026\010\047\013\057\015\010\017" +
    "\033\020\044\022\054\024\030\033\007\034\113\101\055" +
    "\001\002\000\004\051\122\001\002\000\004\034\120\001" +
    "\002\000\010\023\064\024\065\034\116\001\002\000\004" +
    "\051\117\001\002\000\102\003\uffc9\005\uffc9\010\uffc9\013" +
    "\uffc9\015\uffc9\017\uffc9\020\uffc9\022\uffc9\024\uffc9\033\uffc9" +
    "\046\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\105\uffc9\001\002\000\004\051\121\001\002" +
    "\000\102\003\uffc7\005\uffc7\010\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\022\uffc7\024\uffc7\033\uffc7\046\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\065" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\105" +
    "\uffc7\001\002\000\102\003\uffc8\005\uffc8\010\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\022\uffc8\024\uffc8\033\uffc8\046" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\065\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\105\uffc8\001\002\000\006\047\124\052\125\001" +
    "\002\000\012\012\127\014\130\016\132\021\133\001\002" +
    "\000\022\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\001\002\000\014\006\uffb8\023\064" +
    "\024\065\047\uffb8\052\uffb8\001\002\000\026\010\uffbe\013" +
    "\uffbe\015\uffbe\017\uffbe\020\uffbe\022\uffbe\024\uffbe\033\uffbe" +
    "\050\uffbe\076\uffbe\001\002\000\026\010\uffbc\013\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\024\uffbc\033\uffbc\050\uffbc" +
    "\076\uffbc\001\002\000\004\050\134\001\002\000\026\010" +
    "\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd\022\uffbd\024\uffbd" +
    "\033\uffbd\050\uffbd\076\uffbd\001\002\000\026\010\uffbb\013" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\022\uffbb\024\uffbb\033\uffbb" +
    "\050\uffbb\076\uffbb\001\002\000\024\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\045\135" +
    "\001\002\000\004\033\164\001\002\000\012\034\uffb2\043" +
    "\uffb2\044\uffb2\051\uffb2\001\002\000\010\043\160\044\156" +
    "\051\157\001\002\000\024\023\064\024\065\035\147\036" +
    "\143\037\144\040\141\041\142\042\146\051\145\001\002" +
    "\000\022\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\001\002\000\022\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\001" +
    "\002\000\022\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\001\002\000\022\010\047\013" +
    "\057\015\010\017\033\020\044\022\054\024\030\033\007" +
    "\001\002\000\102\003\uffba\005\uffba\010\uffba\013\uffba\015" +
    "\uffba\017\uffba\020\uffba\022\uffba\024\uffba\033\uffba\046\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\061\uffba\062\uffba\063" +
    "\uffba\065\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\074\uffba\075\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103" +
    "\uffba\105\uffba\001\002\000\022\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\024\030\033\007\001\002\000" +
    "\022\010\047\013\057\015\010\017\033\020\044\022\054" +
    "\024\030\033\007\001\002\000\016\023\064\024\065\034" +
    "\uffae\043\uffae\044\uffae\051\uffae\001\002\000\016\023\064" +
    "\024\065\034\uffad\043\uffad\044\uffad\051\uffad\001\002\000" +
    "\016\023\064\024\065\034\uffb0\043\uffb0\044\uffb0\051\uffb0" +
    "\001\002\000\016\023\064\024\065\034\uffb1\043\uffb1\044" +
    "\uffb1\051\uffb1\001\002\000\016\023\064\024\065\034\uffac" +
    "\043\uffac\044\uffac\051\uffac\001\002\000\016\023\064\024" +
    "\065\034\uffaf\043\uffaf\044\uffaf\051\uffaf\001\002\000\022" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\001\002\000\102\003\uffb9\005\uffb9\010\uffb9" +
    "\013\uffb9\015\uffb9\017\uffb9\020\uffb9\022\uffb9\024\uffb9\033" +
    "\uffb9\046\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\065\uffb9\067\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\077\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\103\uffb9\105\uffb9\001\002\000\022\010\047\013" +
    "\057\015\010\017\033\020\044\022\054\024\030\033\007" +
    "\001\002\000\012\034\uffb3\043\uffb3\044\uffb3\051\uffb3\001" +
    "\002\000\022\023\064\024\065\035\147\036\143\037\144" +
    "\040\141\041\142\042\146\001\002\000\012\034\uffb4\043" +
    "\uffb4\044\uffb4\051\uffb4\001\002\000\024\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\045" +
    "\135\001\002\000\010\034\166\043\160\044\156\001\002" +
    "\000\012\034\uffb5\043\uffb5\044\uffb5\051\uffb5\001\002\000" +
    "\010\023\064\024\065\066\170\001\002\000\004\055\172" +
    "\001\002\000\006\055\uffdc\057\uffdc\001\002\000\022\010" +
    "\047\013\057\015\010\017\033\020\044\022\054\024\030" +
    "\033\007\001\002\000\006\055\172\057\175\001\002\000" +
    "\006\055\uffdd\057\uffdd\001\002\000\004\060\176\001\002" +
    "\000\054\003\035\010\047\013\057\015\010\017\033\020" +
    "\044\022\054\024\030\033\007\046\050\053\024\063\034" +
    "\067\025\071\022\073\052\074\036\077\037\101\055\102" +
    "\011\103\043\105\045\001\002\000\056\003\035\010\047" +
    "\013\057\015\010\017\033\020\044\022\054\024\030\033" +
    "\007\046\050\053\024\061\201\063\034\067\025\071\022" +
    "\073\052\074\036\077\037\101\055\102\011\103\043\105" +
    "\045\001\002\000\102\003\ufffe\005\ufffe\010\ufffe\013\ufffe" +
    "\015\ufffe\017\ufffe\020\ufffe\022\ufffe\024\ufffe\033\ufffe\046" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe" +
    "\103\ufffe\105\ufffe\001\002\000\102\003\uffde\005\uffde\010" +
    "\uffde\013\uffde\015\uffde\017\uffde\020\uffde\022\uffde\024\uffde" +
    "\033\uffde\046\uffde\053\uffde\054\uffde\055\uffde\057\uffde\061" +
    "\uffde\062\uffde\063\uffde\065\uffde\067\uffde\070\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\075\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\103\uffde\105\uffde\001\002\000\010\023\064" +
    "\024\065\056\203\001\002\000\004\060\204\001\002\000" +
    "\054\003\035\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\046\050\053\024\063\034\067" +
    "\025\071\022\073\052\074\036\077\037\101\055\102\011" +
    "\103\043\105\045\001\002\000\060\003\035\010\047\013" +
    "\057\015\010\017\033\020\044\022\054\024\030\033\007" +
    "\046\050\053\024\055\uffdb\057\uffdb\063\034\067\025\071" +
    "\022\073\052\074\036\077\037\101\055\102\011\103\043" +
    "\105\045\001\002\000\024\010\047\013\057\015\010\017" +
    "\033\020\044\022\054\024\030\033\007\101\055\001\002" +
    "\000\004\034\213\001\002\000\010\023\064\024\065\034" +
    "\211\001\002\000\004\051\212\001\002\000\102\003\uffc2" +
    "\005\uffc2\010\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2\022" +
    "\uffc2\024\uffc2\033\uffc2\046\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\057\uffc2\061\uffc2\062\uffc2\063\uffc2\065\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\105\uffc2\001\002\000" +
    "\004\051\214\001\002\000\102\003\uffc1\005\uffc1\010\uffc1" +
    "\013\uffc1\015\uffc1\017\uffc1\020\uffc1\022\uffc1\024\uffc1\033" +
    "\uffc1\046\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\065\uffc1\067\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\105\uffc1\001\002\000\016\012\127\014" +
    "\130\016\132\021\133\023\064\024\065\001\002\000\006" +
    "\033\217\076\220\001\002\000\004\034\234\001\002\000" +
    "\004\033\221\001\002\000\012\012\127\014\130\016\132" +
    "\021\133\001\002\000\054\003\035\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\046\050" +
    "\053\024\063\034\067\025\071\022\073\052\074\036\077" +
    "\037\101\055\102\011\103\043\105\045\001\002\000\056" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\100\224\101\055\102" +
    "\011\103\043\105\045\001\002\000\102\003\uffd4\005\uffd4" +
    "\010\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4\022\uffd4\024" +
    "\uffd4\033\uffd4\046\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\105\uffd4\001\002\000\006\034" +
    "\uffd0\052\uffd0\001\002\000\022\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\024\030\033\007\001\002\000" +
    "\006\034\230\052\231\001\002\000\054\003\uffd2\010\uffd2" +
    "\013\uffd2\015\uffd2\017\uffd2\020\uffd2\022\uffd2\024\uffd2\033" +
    "\uffd2\046\uffd2\053\uffd2\063\uffd2\067\uffd2\071\uffd2\073\uffd2" +
    "\074\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2\105\uffd2\001" +
    "\002\000\012\012\127\014\130\016\132\021\133\001\002" +
    "\000\006\034\uffd1\052\uffd1\001\002\000\012\023\064\024" +
    "\065\034\uffcf\052\uffcf\001\002\000\054\003\035\010\047" +
    "\013\057\015\010\017\033\020\044\022\054\024\030\033" +
    "\007\046\050\053\024\063\034\067\025\071\022\073\052" +
    "\074\036\077\037\101\055\102\011\103\043\105\045\001" +
    "\002\000\056\003\035\010\047\013\057\015\010\017\033" +
    "\020\044\022\054\024\030\033\007\046\050\053\024\063" +
    "\034\067\025\071\022\073\052\074\036\077\037\100\236" +
    "\101\055\102\011\103\043\105\045\001\002\000\102\003" +
    "\uffcb\005\uffcb\010\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb" +
    "\022\uffcb\024\uffcb\033\uffcb\046\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\105\uffcb\001\002" +
    "\000\012\023\064\024\065\033\240\076\241\001\002\000" +
    "\004\034\245\001\002\000\004\033\221\001\002\000\054" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\101\055\102\011\103" +
    "\043\105\045\001\002\000\056\003\035\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\046" +
    "\050\053\024\063\034\067\025\071\022\073\052\074\036" +
    "\075\244\077\037\101\055\102\011\103\043\105\045\001" +
    "\002\000\102\003\uffd3\005\uffd3\010\uffd3\013\uffd3\015\uffd3" +
    "\017\uffd3\020\uffd3\022\uffd3\024\uffd3\033\uffd3\046\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\057\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\065\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\105\uffd3\001\002\000\054\003\035\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\046\050" +
    "\053\024\063\034\067\025\071\022\073\052\074\036\077" +
    "\037\101\055\102\011\103\043\105\045\001\002\000\056" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\071\022\073\052\074\036\075\247\077\037\101\055\102" +
    "\011\103\043\105\045\001\002\000\102\003\uffca\005\uffca" +
    "\010\uffca\013\uffca\015\uffca\017\uffca\020\uffca\022\uffca\024" +
    "\uffca\033\uffca\046\uffca\053\uffca\054\uffca\055\uffca\057\uffca" +
    "\061\uffca\062\uffca\063\uffca\065\uffca\067\uffca\070\uffca\071" +
    "\uffca\072\uffca\073\uffca\074\uffca\075\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\103\uffca\105\uffca\001\002\000\022\005" +
    "\253\051\256\061\260\062\255\065\252\070\257\075\251" +
    "\100\254\001\002\000\102\003\uffea\005\uffea\010\uffea\013" +
    "\uffea\015\uffea\017\uffea\020\uffea\022\uffea\024\uffea\033\uffea" +
    "\046\uffea\053\uffea\054\uffea\055\uffea\057\uffea\061\uffea\062" +
    "\uffea\063\uffea\065\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\074\uffea\075\uffea\077\uffea\100\uffea\101\uffea\102" +
    "\uffea\103\uffea\105\uffea\001\002\000\102\003\uffe8\005\uffe8" +
    "\010\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\024" +
    "\uffe8\033\uffe8\046\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\065\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\105\uffe8\001\002\000\102\003" +
    "\uffe6\005\uffe6\010\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\024\uffe6\033\uffe6\046\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\105\uffe6\001\002" +
    "\000\102\003\uffeb\005\uffeb\010\uffeb\013\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\022\uffeb\024\uffeb\033\uffeb\046\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\065" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\105" +
    "\uffeb\001\002\000\102\003\uffe7\005\uffe7\010\uffe7\013\uffe7" +
    "\015\uffe7\017\uffe7\020\uffe7\022\uffe7\024\uffe7\033\uffe7\046" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7" +
    "\103\uffe7\105\uffe7\001\002\000\102\003\uffed\005\uffed\010" +
    "\uffed\013\uffed\015\uffed\017\uffed\020\uffed\022\uffed\024\uffed" +
    "\033\uffed\046\uffed\053\uffed\054\uffed\055\uffed\057\uffed\061" +
    "\uffed\062\uffed\063\uffed\065\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\105\uffed\001\002\000\102\003\uffe9" +
    "\005\uffe9\010\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\024\uffe9\033\uffe9\046\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\057\uffe9\061\uffe9\062\uffe9\063\uffe9\065\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\077\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\103\uffe9\105\uffe9\001\002\000" +
    "\102\003\uffec\005\uffec\010\uffec\013\uffec\015\uffec\017\uffec" +
    "\020\uffec\022\uffec\024\uffec\033\uffec\046\uffec\053\uffec\054" +
    "\uffec\055\uffec\057\uffec\061\uffec\062\uffec\063\uffec\065\uffec" +
    "\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\105\uffec" +
    "\001\002\000\102\003\uffee\005\uffee\010\uffee\013\uffee\015" +
    "\uffee\017\uffee\020\uffee\022\uffee\024\uffee\033\uffee\046\uffee" +
    "\053\uffee\054\uffee\055\uffee\057\uffee\061\uffee\062\uffee\063" +
    "\uffee\065\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103" +
    "\uffee\105\uffee\001\002\000\010\006\263\023\064\024\065" +
    "\001\002\000\022\010\047\013\057\015\010\017\033\020" +
    "\044\022\054\024\030\033\007\001\002\000\010\023\064" +
    "\024\065\064\265\001\002\000\022\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\001\002" +
    "\000\012\023\064\024\065\066\267\104\270\001\002\000" +
    "\054\003\035\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\046\050\053\024\063\034\067" +
    "\025\071\022\073\052\074\036\077\037\101\055\102\011" +
    "\103\043\105\045\001\002\000\004\013\271\001\002\000" +
    "\004\066\272\001\002\000\054\003\035\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\046" +
    "\050\053\024\063\034\067\025\071\022\073\052\074\036" +
    "\077\037\101\055\102\011\103\043\105\045\001\002\000" +
    "\056\003\035\010\047\013\057\015\010\017\033\020\044" +
    "\022\054\024\030\033\007\046\050\053\024\063\034\065" +
    "\274\067\025\071\022\073\052\074\036\077\037\101\055" +
    "\102\011\103\043\105\045\001\002\000\102\003\uffe4\005" +
    "\uffe4\010\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\024\uffe4\033\uffe4\046\uffe4\053\uffe4\054\uffe4\055\uffe4\057" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\105\uffe4\001\002\000\056" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\065\276" +
    "\067\025\071\022\073\052\074\036\077\037\101\055\102" +
    "\011\103\043\105\045\001\002\000\102\003\uffe5\005\uffe5" +
    "\010\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\033\uffe5\046\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\077\uffe5\100\uffe5" +
    "\101\uffe5\102\uffe5\103\uffe5\105\uffe5\001\002\000\024\010" +
    "\047\013\057\015\010\017\033\020\044\022\054\024\030" +
    "\033\007\045\135\001\002\000\010\043\160\044\156\051" +
    "\303\001\002\000\024\023\064\024\065\035\147\036\143" +
    "\037\144\040\141\041\142\042\146\051\302\001\002\000" +
    "\102\003\uffc0\005\uffc0\010\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\022\uffc0\024\uffc0\033\uffc0\046\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\105\uffc0" +
    "\001\002\000\102\003\uffbf\005\uffbf\010\uffbf\013\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\022\uffbf\024\uffbf\033\uffbf\046\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\057\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\065\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\105\uffbf\001\002\000\076\006\uffa9\012\uffa9\014\uffa9" +
    "\016\uffa9\021\uffa9\023\uffa9\024\uffa9\025\067\026\072\030" +
    "\uffa9\031\071\032\070\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\047" +
    "\uffa9\051\uffa9\052\uffa9\056\uffa9\064\uffa9\066\uffa9\076\uffa9" +
    "\104\uffa9\001\002\000\024\010\047\013\057\015\010\017" +
    "\306\020\307\022\054\024\030\033\007\045\135\001\002" +
    "\000\034\023\uff9f\024\uff9f\025\uff9f\026\uff9f\031\uff9f\032" +
    "\uff9f\034\uffe1\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\001\002\000\034\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\031\uff9e\032\uff9e\034\uffe0\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\001\002\000\010\034\uffdf\043" +
    "\160\044\156\001\002\000\004\034\312\001\002\000\004" +
    "\066\313\001\002\000\054\003\035\010\047\013\057\015" +
    "\010\017\033\020\044\022\054\024\030\033\007\046\050" +
    "\053\024\063\034\067\025\071\022\073\052\074\036\077" +
    "\037\101\055\102\011\103\043\105\045\001\002\000\056" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\070\315\071\022\073\052\074\036\077\037\101\055\102" +
    "\011\103\043\105\045\001\002\000\102\003\uffe3\005\uffe3" +
    "\010\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\022\uffe3\024" +
    "\uffe3\033\uffe3\046\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\103\uffe3\105\uffe3\001\002\000\024\010" +
    "\047\013\057\015\010\017\033\020\044\022\054\024\030" +
    "\033\007\045\135\001\002\000\010\034\320\043\160\044" +
    "\156\001\002\000\004\060\321\001\002\000\054\003\035" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\046\050\053\024\063\034\067\025\071\022" +
    "\073\052\074\036\077\037\101\055\102\011\103\043\105" +
    "\045\001\002\000\062\003\035\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\024\030\033\007\046\050\053" +
    "\024\054\326\057\325\062\323\063\034\067\025\071\022" +
    "\073\052\074\036\077\037\101\055\102\011\103\043\105" +
    "\045\001\002\000\102\003\uffda\005\uffda\010\uffda\013\uffda" +
    "\015\uffda\017\uffda\020\uffda\022\uffda\024\uffda\033\uffda\046" +
    "\uffda\053\uffda\054\uffda\055\uffda\057\uffda\061\uffda\062\uffda" +
    "\063\uffda\065\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\105\uffda\001\002\000\010\054\336\057\335\062" +
    "\337\001\002\000\054\003\035\010\047\013\057\015\010" +
    "\017\033\020\044\022\054\024\030\033\007\046\050\053" +
    "\024\063\034\067\025\071\022\073\052\074\036\077\037" +
    "\101\055\102\011\103\043\105\045\001\002\000\004\033" +
    "\327\001\002\000\024\010\047\013\057\015\010\017\033" +
    "\020\044\022\054\024\030\033\007\045\135\001\002\000" +
    "\010\034\331\043\160\044\156\001\002\000\004\060\332" +
    "\001\002\000\054\003\035\010\047\013\057\015\010\017" +
    "\033\020\044\022\054\024\030\033\007\046\050\053\024" +
    "\063\034\067\025\071\022\073\052\074\036\077\037\101" +
    "\055\102\011\103\043\105\045\001\002\000\062\003\035" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\046\050\053\024\054\uffd6\057\uffd6\062\uffd6" +
    "\063\034\067\025\071\022\073\052\074\036\077\037\101" +
    "\055\102\011\103\043\105\045\001\002\000\062\003\035" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\046\050\053\024\054\uffd5\057\uffd5\062\uffd5" +
    "\063\034\067\025\071\022\073\052\074\036\077\037\101" +
    "\055\102\011\103\043\105\045\001\002\000\054\003\035" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\046\050\053\024\063\034\067\025\071\022" +
    "\073\052\074\036\077\037\101\055\102\011\103\043\105" +
    "\045\001\002\000\004\033\340\001\002\000\102\003\uffd9" +
    "\005\uffd9\010\uffd9\013\uffd9\015\uffd9\017\uffd9\020\uffd9\022" +
    "\uffd9\024\uffd9\033\uffd9\046\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\057\uffd9\061\uffd9\062\uffd9\063\uffd9\065\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\077\uffd9" +
    "\100\uffd9\101\uffd9\102\uffd9\103\uffd9\105\uffd9\001\002\000" +
    "\024\010\047\013\057\015\010\017\033\020\044\022\054" +
    "\024\030\033\007\045\135\001\002\000\010\034\342\043" +
    "\160\044\156\001\002\000\004\060\343\001\002\000\054" +
    "\003\035\010\047\013\057\015\010\017\033\020\044\022" +
    "\054\024\030\033\007\046\050\053\024\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\101\055\102\011\103" +
    "\043\105\045\001\002\000\062\003\035\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\046" +
    "\050\053\024\054\uffd8\057\uffd8\062\uffd8\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\101\055\102\011\103" +
    "\043\105\045\001\002\000\062\003\035\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\046" +
    "\050\053\024\054\uffd7\057\uffd7\062\uffd7\063\034\067\025" +
    "\071\022\073\052\074\036\077\037\101\055\102\011\103" +
    "\043\105\045\001\002\000\056\003\035\010\047\013\057" +
    "\015\010\017\033\020\044\022\054\024\030\033\007\046" +
    "\050\053\024\063\034\067\025\071\022\072\347\073\052" +
    "\074\036\077\037\101\055\102\011\103\043\105\045\001" +
    "\002\000\004\033\350\001\002\000\024\010\047\013\057" +
    "\015\010\017\306\020\307\022\054\024\030\033\007\045" +
    "\135\001\002\000\004\034\352\001\002\000\004\051\353" +
    "\001\002\000\102\003\uffe2\005\uffe2\010\uffe2\013\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\033\uffe2\046\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\057\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\065\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\105\uffe2\001\002\000\004\002\uffff\001\002\000\024" +
    "\010\047\013\057\015\010\017\033\020\044\022\054\024" +
    "\030\033\007\101\055\001\002\000\004\034\362\001\002" +
    "\000\010\023\064\024\065\034\360\001\002\000\004\051" +
    "\361\001\002\000\102\003\uffc4\005\uffc4\010\uffc4\013\uffc4" +
    "\015\uffc4\017\uffc4\020\uffc4\022\uffc4\024\uffc4\033\uffc4\046" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\105\uffc4\001\002\000\004\051\363\001\002\000" +
    "\102\003\uffc3\005\uffc3\010\uffc3\013\uffc3\015\uffc3\017\uffc3" +
    "\020\uffc3\022\uffc3\024\uffc3\033\uffc3\046\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\105\uffc3" +
    "\001\002\000\010\023\064\024\065\034\365\001\002\000" +
    "\076\006\uffa2\012\uffa2\014\uffa2\016\uffa2\021\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\047\uffa2\051\uffa2\052\uffa2\056" +
    "\uffa2\064\uffa2\066\uffa2\076\uffa2\104\uffa2\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\006\002\003\045\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\026\004\022\006\016" +
    "\011\040\013\014\014\041\015\011\016\052\017\037\020" +
    "\013\021\012\022\057\023\055\024\050\025\015\026\031" +
    "\027\025\030\020\041\030\043\017\044\045\001\001\000" +
    "\014\003\026\004\022\030\363\043\017\044\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\026\004\022\011\040\013\177\014" +
    "\041\015\011\016\052\017\037\020\013\021\012\022\057" +
    "\023\055\024\050\025\015\026\031\027\025\030\020\041" +
    "\030\043\017\044\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\026\004\022\006\345\011\040\013" +
    "\014\014\041\015\011\016\052\017\037\020\013\021\012" +
    "\022\057\023\055\024\050\025\015\026\031\027\025\030" +
    "\020\041\030\043\017\044\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\303\004\022\043\017\044\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\026\004\022\030\261\043\017\044\045" +
    "\001\001\000\004\046\247\001\001\000\014\003\026\004" +
    "\022\030\236\043\017\044\045\001\001\000\014\003\026" +
    "\004\022\030\214\043\017\044\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\026\004\022\030\166\043" +
    "\017\044\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\026\004\022\030\020\041\122\043\017\044" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\026\004\022\030" +
    "\060\043\017\044\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\061\001\001\000" +
    "\002\001\001\000\016\003\026\004\022\030\103\040\102" +
    "\043\017\044\045\001\001\000\012\003\100\004\022\043" +
    "\017\044\045\001\001\000\012\003\065\004\022\043\017" +
    "\044\045\001\001\000\002\001\001\000\010\004\077\043" +
    "\017\044\045\001\001\000\010\004\076\043\017\044\045" +
    "\001\001\000\002\001\001\000\010\004\072\043\017\044" +
    "\045\001\001\000\002\001\001\000\014\003\026\004\022" +
    "\030\074\043\017\044\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\026\004\022\030\106" +
    "\043\017\044\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\026\004\022\027\113" +
    "\030\114\043\017\044\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\130\001\001\000\014" +
    "\003\026\004\022\030\125\043\017\044\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\026\004\022\030\137\032\136\042\135\043\017\044\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\026\004\022\030\154" +
    "\043\017\044\045\001\001\000\014\003\026\004\022\030" +
    "\153\043\017\044\045\001\001\000\014\003\026\004\022" +
    "\030\152\043\017\044\045\001\001\000\014\003\026\004" +
    "\022\030\151\043\017\044\045\001\001\000\002\001\001" +
    "\000\014\003\026\004\022\030\150\043\017\044\045\001" +
    "\001\000\014\003\026\004\022\030\147\043\017\044\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\026\004\022\030\161\042\162\043\017\044" +
    "\045\001\001\000\002\001\001\000\016\003\026\004\022" +
    "\030\161\042\160\043\017\044\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\026" +
    "\004\022\030\161\032\164\042\135\043\017\044\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\170\012\172\001\001\000\002\001\001\000" +
    "\014\003\026\004\022\030\201\043\017\044\045\001\001" +
    "\000\004\007\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\026\004\022\006\176\011\040\013\014" +
    "\014\041\015\011\016\052\017\037\020\013\021\012\022" +
    "\057\023\055\024\050\025\015\026\031\027\025\030\020" +
    "\041\030\043\017\044\045\001\001\000\052\003\026\004" +
    "\022\011\040\013\177\014\041\015\011\016\052\017\037" +
    "\020\013\021\012\022\057\023\055\024\050\025\015\026" +
    "\031\027\025\030\020\041\030\043\017\044\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\026\004\022\006\204\011\040" +
    "\013\014\014\041\015\011\016\052\017\037\020\013\021" +
    "\012\022\057\023\055\024\050\025\015\026\031\027\025" +
    "\030\020\041\030\043\017\044\045\001\001\000\052\003" +
    "\026\004\022\011\040\013\177\014\041\015\011\016\052" +
    "\017\037\020\013\021\012\022\057\023\055\024\050\025" +
    "\015\026\031\027\025\030\020\041\030\043\017\044\045" +
    "\001\001\000\016\003\026\004\022\027\206\030\207\043" +
    "\017\044\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\221\001\001\000\010\033" +
    "\225\035\226\036\224\001\001\000\054\003\026\004\022" +
    "\006\222\011\040\013\014\014\041\015\011\016\052\017" +
    "\037\020\013\021\012\022\057\023\055\024\050\025\015" +
    "\026\031\027\025\030\020\041\030\043\017\044\045\001" +
    "\001\000\052\003\026\004\022\011\040\013\177\014\041" +
    "\015\011\016\052\017\037\020\013\021\012\022\057\023" +
    "\055\024\050\025\015\026\031\027\025\030\020\041\030" +
    "\043\017\044\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\026\004\022\030\232\043\017\044\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\225\036\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\026\004\022\006\234\011\040\013\014\014" +
    "\041\015\011\016\052\017\037\020\013\021\012\022\057" +
    "\023\055\024\050\025\015\026\031\027\025\030\020\041" +
    "\030\043\017\044\045\001\001\000\052\003\026\004\022" +
    "\011\040\013\177\014\041\015\011\016\052\017\037\020" +
    "\013\021\012\022\057\023\055\024\050\025\015\026\031" +
    "\027\025\030\020\041\030\043\017\044\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\241\001\001\000\054\003\026\004\022\006\242\011" +
    "\040\013\014\014\041\015\011\016\052\017\037\020\013" +
    "\021\012\022\057\023\055\024\050\025\015\026\031\027" +
    "\025\030\020\041\030\043\017\044\045\001\001\000\052" +
    "\003\026\004\022\011\040\013\177\014\041\015\011\016" +
    "\052\017\037\020\013\021\012\022\057\023\055\024\050" +
    "\025\015\026\031\027\025\030\020\041\030\043\017\044" +
    "\045\001\001\000\002\001\001\000\054\003\026\004\022" +
    "\006\245\011\040\013\014\014\041\015\011\016\052\017" +
    "\037\020\013\021\012\022\057\023\055\024\050\025\015" +
    "\026\031\027\025\030\020\041\030\043\017\044\045\001" +
    "\001\000\052\003\026\004\022\011\040\013\177\014\041" +
    "\015\011\016\052\017\037\020\013\021\012\022\057\023" +
    "\055\024\050\025\015\026\031\027\025\030\020\041\030" +
    "\043\017\044\045\001\001\000\002\001\001\000\004\005" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\026\004\022\030\263\043" +
    "\017\044\045\001\001\000\002\001\001\000\014\003\026" +
    "\004\022\030\265\043\017\044\045\001\001\000\002\001" +
    "\001\000\054\003\026\004\022\006\274\011\040\013\014" +
    "\014\041\015\011\016\052\017\037\020\013\021\012\022" +
    "\057\023\055\024\050\025\015\026\031\027\025\030\020" +
    "\041\030\043\017\044\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\026\004\022\006\272\011\040" +
    "\013\014\014\041\015\011\016\052\017\037\020\013\021" +
    "\012\022\057\023\055\024\050\025\015\026\031\027\025" +
    "\030\020\041\030\043\017\044\045\001\001\000\052\003" +
    "\026\004\022\011\040\013\177\014\041\015\011\016\052" +
    "\017\037\020\013\021\012\022\057\023\055\024\050\025" +
    "\015\026\031\027\025\030\020\041\030\043\017\044\045" +
    "\001\001\000\002\001\001\000\052\003\026\004\022\011" +
    "\040\013\177\014\041\015\011\016\052\017\037\020\013" +
    "\021\012\022\057\023\055\024\050\025\015\026\031\027" +
    "\025\030\020\041\030\043\017\044\045\001\001\000\002" +
    "\001\001\000\020\003\026\004\022\030\300\032\277\042" +
    "\135\043\017\044\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\026\004\022\030\161\031\310\032\307" +
    "\042\135\043\017\044\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\026\004\022\006\313\011\040\013" +
    "\014\014\041\015\011\016\052\017\037\020\013\021\012" +
    "\022\057\023\055\024\050\025\015\026\031\027\025\030" +
    "\020\041\030\043\017\044\045\001\001\000\052\003\026" +
    "\004\022\011\040\013\177\014\041\015\011\016\052\017" +
    "\037\020\013\021\012\022\057\023\055\024\050\025\015" +
    "\026\031\027\025\030\020\041\030\043\017\044\045\001" +
    "\001\000\002\001\001\000\020\003\026\004\022\030\161" +
    "\032\316\042\135\043\017\044\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\026\004\022\006\321" +
    "\011\040\013\014\014\041\015\011\016\052\017\037\020" +
    "\013\021\012\022\057\023\055\024\050\025\015\026\031" +
    "\027\025\030\020\041\030\043\017\044\045\001\001\000" +
    "\054\003\026\004\022\010\323\011\040\013\177\014\041" +
    "\015\011\016\052\017\037\020\013\021\012\022\057\023" +
    "\055\024\050\025\015\026\031\027\025\030\020\041\030" +
    "\043\017\044\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\026\004\022\006\333\011\040\013\014" +
    "\014\041\015\011\016\052\017\037\020\013\021\012\022" +
    "\057\023\055\024\050\025\015\026\031\027\025\030\020" +
    "\041\030\043\017\044\045\001\001\000\002\001\001\000" +
    "\020\003\026\004\022\030\161\032\327\042\135\043\017" +
    "\044\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\026\004\022\006\332\011\040\013\014\014\041" +
    "\015\011\016\052\017\037\020\013\021\012\022\057\023" +
    "\055\024\050\025\015\026\031\027\025\030\020\041\030" +
    "\043\017\044\045\001\001\000\052\003\026\004\022\011" +
    "\040\013\177\014\041\015\011\016\052\017\037\020\013" +
    "\021\012\022\057\023\055\024\050\025\015\026\031\027" +
    "\025\030\020\041\030\043\017\044\045\001\001\000\052" +
    "\003\026\004\022\011\040\013\177\014\041\015\011\016" +
    "\052\017\037\020\013\021\012\022\057\023\055\024\050" +
    "\025\015\026\031\027\025\030\020\041\030\043\017\044" +
    "\045\001\001\000\054\003\026\004\022\006\344\011\040" +
    "\013\014\014\041\015\011\016\052\017\037\020\013\021" +
    "\012\022\057\023\055\024\050\025\015\026\031\027\025" +
    "\030\020\041\030\043\017\044\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\026\004\022\030\161" +
    "\032\340\042\135\043\017\044\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\026\004\022\006\343" +
    "\011\040\013\014\014\041\015\011\016\052\017\037\020" +
    "\013\021\012\022\057\023\055\024\050\025\015\026\031" +
    "\027\025\030\020\041\030\043\017\044\045\001\001\000" +
    "\052\003\026\004\022\011\040\013\177\014\041\015\011" +
    "\016\052\017\037\020\013\021\012\022\057\023\055\024" +
    "\050\025\015\026\031\027\025\030\020\041\030\043\017" +
    "\044\045\001\001\000\052\003\026\004\022\011\040\013" +
    "\177\014\041\015\011\016\052\017\037\020\013\021\012" +
    "\022\057\023\055\024\050\025\015\026\031\027\025\030" +
    "\020\041\030\043\017\044\045\001\001\000\052\003\026" +
    "\004\022\011\040\013\177\014\041\015\011\016\052\017" +
    "\037\020\013\021\012\022\057\023\055\024\050\025\015" +
    "\026\031\027\025\030\020\041\030\043\017\044\045\001" +
    "\001\000\002\001\001\000\022\003\026\004\022\030\161" +
    "\031\350\032\307\042\135\043\017\044\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\026\004\022\027\355\030\356\043" +
    "\017\044\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$as$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$as$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$as$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$as$actions {
  private final as parser;

  /** Constructor */
  CUP$as$actions(as parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$as$do_action_part00000000(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$as$result;

      /* select the action based on the action number */
      switch (CUP$as$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		RESULT = start_val;
              CUP$as$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$as$parser.done_parsing();
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PRINCIPAL ::= inicio INSTRUCCIONES finall 
            {
              Object RESULT =null;
		int _INSTRUCCIONESleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSTRUCCIONESright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INSTRUCCIONES = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		System.out.println(_INSTRUCCIONES.toString()); error imprime = new error("lexema","tipo","descripcion",3,3);imprime.imprime(ArrayList.class.cast(_INSTRUCCIONES),0);
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",35, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int _Arayleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Arayright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _Aray = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _INSTRUCCION2left = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCION2right = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION2 = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> instrucciones = ArrayList.class.cast(_Aray);if (_INSTRUCCION2.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION2)); else  instrucciones.add(_INSTRUCCION2);RESULT = instrucciones;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int _INSTRUCCIONleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCIONright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> instrucciones = new ArrayList<>();if (_INSTRUCCION.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION)); else instrucciones.add(_INSTRUCCION);RESULT = instrucciones;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("ENCONTRO DECLARACION"); RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int _IMPRIMIRleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIR = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIR.toString(); System.out.println("encontro impresion linea simple"); RESULT= Fimpr; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIRLN 
            {
              Object RESULT =null;
		int _IMPRIMIRLNleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRLNright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIRLN = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIRLN.toString();System.out.println("encontro impresion multipe linea");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("encontro ASIGNACION");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCION");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= METODOsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODOSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUNCIONsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCIONSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONDICIONIF 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CONDICION IF");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CICLO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= RETURN 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro RETURN");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CALL 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro LLAMADA");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro SWITCH");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
int columna = eright+1;
             int fila = eleft +1;
             String er = "\nLinea: "+fila+"\nColumna: "+columna;

             /*for (Integer id : expected_token_ids() ) {
                 System.out.println(id);
             }*/


             System.out.println("______ENCONTRO ERROR_________: "+er); System.out.println(e); 
              CUP$as$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error NT$0 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String c = "";RESULT = c;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fin ::= punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fin ::= fin_segun 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fin ::= fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fin ::= fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fin ::= fin_mientras 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fin ::= fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fin ::= fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fin ::= finall 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("fin",3, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CICLO ::= para E flechita E hasta E hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CICLO ::= para E flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-9)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+","+_D+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CICLO ::= mientras abre_parentesis COND_WHILE cierra_parentesis hacer INSTRUCCIONES fin_mientras 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while( "+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CICLO ::= repetir INSTRUCCIONES hasta_que abre_parentesis COND_WHILE cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while(True):";cond.add(ifins);cond.add(ins);String fifi = "     if ("+_C.toString()+"):";String brek= "          break";cond.add(fifi);cond.add(brek); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COND_WHILE ::= verdadero 
            {
              Object RESULT =null;
		String Fe = " True "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",23, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COND_WHILE ::= falso 
            {
              Object RESULT =null;
		String Fe = " False "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",23, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COND_WHILE ::= COMPARACIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",23, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SWITCH ::= segun E hacer OPCIONES de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _OPSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _OPSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _OPS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String primer = "k2 = "+_E.toString();condan.add(primer); condan.addAll(ArrayList.class.cast(_OPS));String elsa = "else:";condan.add(elsa); condan.add(ins);;RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCIONES ::= OPCIONES OPCION 
            {
              Object RESULT =null;
		int _OPSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _OPSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _OPS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _OPleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _OPright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _OP = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= ArrayList.class.cast(_OPS); ArrayList<Object> ins = ArrayList.class.cast(_OP);String ifins = "elif( k2 =="+ins.get(0).toString()+"):";condan.add(ifins);condan.add(ArrayList.class.cast(ins.get(1))); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCIONES ::= OPCION 
            {
              Object RESULT =null;
		int _OPleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _OPright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _OP = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>();ArrayList<Object> ins = ArrayList.class.cast(_OP);String ifins = "if( k2 =="+ins.get(0).toString()+"):";contr.add(ifins);contr.add( ArrayList.class.cast(ins.get(1))); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",8, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCION ::= abre_pregunta E cierra_pregunta entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>();ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = _E.toString();contr.add(ifins);contr.add(ins); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCION",5, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES IFANIDADOS fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";condan.add(ifins);condan.add(ins); condan.addAll(ArrayList.class.cast(_INFANIDADOS));RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFANIDADOS ::= IFANIDADOS o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "elif("+_C.toString()+"):";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",6, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IFANIDADOS ::= IFANIDADOS de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "else:";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",6, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IFANIDADOS ::= o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> conelse= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "elif("+_C.toString()+"):";conelse.add(ifins);conelse.add(ins); RESULT = conelse;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",6, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IFANIDADOS ::= de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "else:";contr.add(ifins);contr.add(ins); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",6, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= funcion E TIPODATO_DECLARACION con_parametros PARAMETROS INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO ::= metodo E con_parametros PARAMETROS INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODO",14, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS ::= abre_parentesis PARS cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                        String instruccion="";
                                                        ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                        for (Object c: ides )
                                                        {
                                                            if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                instruccion+= c.toString()+",";
                                                            else  instruccion+= c.toString();

                                                        }

                                                        String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARS ::= PARS coma PAR 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",27, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARS ::= PAR 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PAR ::= TIPODATO_DECLARACION E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PAR",28, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                              String instruccion="";
                                                              ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                              for (Object c: ides )
                                                              {
                                                                  if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                  instruccion+= c.toString()+",";
                                                                  else  instruccion+= c.toString();

                                                              }

                                                              String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROSLL",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARSLL ::= PARSLL coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",30, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARSLL ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCIONsp ::= funcion E TIPODATO_DECLARACION abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCIONsp",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODOsp ::= metodo E abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODOsp",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN ::= retornar abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "return("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN ::= retornar abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		String FIM = "return()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN ::= retornar abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "return("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",20, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CALL ::= ejecutar E PARAMETROSLL punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FIM = _E.toString()+"("+_C.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CALL ::= ejecutar E abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		String FIM = _E.toString()+"()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMPRIMIR ::= imprimir abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "print("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMPRIMIR ::= imprimir abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "print("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IMPRIMIRLN ::= imprimir_nl abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIML = "print("+_E.toString()+")"; RESULT = FIML;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IMPRIMIRLN ::= imprimir_nl abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIML = "print("+_E.toString()+")"; RESULT = FIML;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= IDS flechita E punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
    String instruccion="";
    ArrayList<Object> ides = ArrayList.class.cast(_IDS);
    for (Object c: ides )
    {
        instruccion+= c.toString()+"=";
        System.out.println(instruccion);
    }

    String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= IDS flechita COMPARACIONES punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
          String instruccion="";
          ArrayList<Object> ides = ArrayList.class.cast(_IDS);
          for (Object c: ides )
          {
              instruccion+= c.toString()+"=";
              System.out.println(instruccion);
          }

          String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPODATO_DECLARACION ::= numero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPODATO_DECLARACION ::= bulean 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPODATO_DECLARACION ::= cadena 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPODATO_DECLARACION ::= caracter 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= ingresar IDS como TIPODATO_DECLARACION con_valor E punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
String instruccion="";
ArrayList<Object> ides = ArrayList.class.cast(_IDS);
for (Object c: ides )
{
    instruccion+= c.toString()+"=";
    System.out.println(instruccion);
    }

String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= ingresar IDS como TIPODATO_DECLARACION con_valor COMPARACIONES punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
    String instruccion="";
    ArrayList<Object> ides = ArrayList.class.cast(_IDS);
    for (Object c: ides )
    {
        instruccion+= c.toString()+"=";
        System.out.println(instruccion);
    }

    String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IDS ::= IDS coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",31, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IDS ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",31, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIABLE ::= variable 
            {
              Object RESULT =null;
		int _variableleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _variableright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _variable = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String r = _variable.toString(); RESULT = r;
              CUP$as$result = parser.getSymbolFactory().newSymbol("VARIABLE",34, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMPARACIONES ::= not abre_parentesis COMPARACIONES cierra_parentesis 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE ="!("+ _E.toString()+ ")"; RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMPARACIONES ::= COMPARACIONES and COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "and"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COMPARACIONES ::= COMPARACIONES or COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "or"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",24, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMP ::= E menor E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMP ::= E mayor_o_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMP ::= E menor_o_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMP ::= E mayor E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMP ::= E es_diferente E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "!="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMP ::= E es_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "=="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E mas Term 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "+"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E menos Term 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "-"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= menos Term 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = "-"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= Term 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= Term por Factor 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "*"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Term ::= Term dividido Factor 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "/"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Term ::= Term mod Factor 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "%"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Term ::= Term potencia abre_corchete E cierra_corchete 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE = _E.toString()+ "**("+_F.toString()+")"; RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= Factor 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Term",1, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= abre_parentesis E cierra_parentesis 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE ="(" +_E.toString()+")"; RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Factor",2, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= F 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("Factor",2, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= number 
            {
              Object RESULT =null;
		int _numberleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _numberright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _number = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = _number.toString(); RESULT = FVR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= verdadero 
            {
              Object RESULT =null;
		int _verdaderoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _verdaderoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _verdadero = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = "True"; RESULT = FVR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F ::= falso 
            {
              Object RESULT =null;
		int _falsoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _falsoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _falso = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFS = "False"; RESULT = FFS;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= frase 
            {
              Object RESULT =null;
		int _fraseleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _fraseright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frase = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFR = _frase.toString(); RESULT = FFR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= frasecita 
            {
              Object RESULT =null;
		int _frasecitaleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _frasecitaright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frasecita = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FF = _frasecita.toString(); RESULT = FF;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= VARIABLE 
            {
              Object RESULT =null;
		int _VARIABLEleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _VARIABLEright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _VARIABLE = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FV = _VARIABLE.toString(); RESULT = FV;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$as$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$as$do_action(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
              return CUP$as$do_action_part00000000(
                               CUP$as$act_num,
                               CUP$as$parser,
                               CUP$as$stack,
                               CUP$as$top);
    }
}

}
