
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class as extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public as() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public as(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public as(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\003\000\002\042" +
    "\005\000\002\003\004\000\002\003\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\022\013\000\002\022\015" +
    "\000\002\022\010\000\002\022\011\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\006\012\000\002" +
    "\007\004\000\002\007\003\000\002\004\007\000\002\021" +
    "\011\000\002\021\012\000\002\005\011\000\002\005\005" +
    "\000\002\005\010\000\002\005\004\000\002\016\011\000" +
    "\002\015\010\000\002\031\005\000\002\032\005\000\002" +
    "\032\003\000\002\033\004\000\002\034\005\000\002\035" +
    "\005\000\002\035\003\000\002\020\011\000\002\017\010" +
    "\000\002\023\005\000\002\023\004\000\002\024\006\000" +
    "\002\024\007\000\002\012\007\000\002\013\007\000\002" +
    "\014\006\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\011\011\000\002\036\005" +
    "\000\002\036\003\000\002\041\003\000\002\027\006\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\007\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\004\006\001\002\000\004\002\303\001" +
    "\002\000\004\002\000\001\002\000\044\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\046\033\053\047\063" +
    "\011\067\023\071\013\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\016\010\043\013\012\015" +
    "\037\017\041\020\046\022\045\001\002\000\066\005\ufffd" +
    "\010\ufffd\013\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\046" +
    "\ufffd\053\ufffd\054\ufffd\057\ufffd\062\ufffd\063\ufffd\065\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075" +
    "\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\001\002" +
    "\000\016\010\043\013\012\015\037\017\041\020\046\022" +
    "\045\001\002\000\074\006\uffb4\012\uffb4\014\uffb4\016\uffb4" +
    "\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4\051" +
    "\uffb4\052\uffb4\064\uffb4\066\uffb4\076\uffb4\104\uffb4\001\002" +
    "\000\044\010\043\013\012\015\037\017\041\020\046\022" +
    "\045\046\033\053\047\063\011\067\023\071\013\073\040" +
    "\074\007\077\050\101\042\102\017\103\014\001\002\000" +
    "\004\033\243\001\002\000\066\005\ufff4\010\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\022\ufff4\046\ufff4\053\ufff4\054" +
    "\ufff4\057\ufff4\062\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4\100" +
    "\ufff4\101\ufff4\102\ufff4\103\ufff4\001\002\000\066\005\ufff1" +
    "\010\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\022\ufff1\046" +
    "\ufff1\053\ufff1\054\ufff1\057\ufff1\062\ufff1\063\ufff1\065\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\001\002" +
    "\000\004\033\237\001\002\000\066\005\ufffc\010\ufffc\013" +
    "\ufffc\015\ufffc\017\ufffc\020\ufffc\022\ufffc\046\ufffc\053\ufffc" +
    "\054\ufffc\057\ufffc\062\ufffc\063\ufffc\065\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\077\ufffc" +
    "\100\ufffc\101\ufffc\102\ufffc\103\ufffc\001\002\000\046\005" +
    "\236\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\046\033\053\047\063\011\067\023\071\013\073\040\074" +
    "\007\077\050\101\042\102\017\103\014\001\002\000\066" +
    "\005\ufff2\010\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\022" +
    "\ufff2\046\ufff2\053\ufff2\054\ufff2\057\ufff2\062\ufff2\063\ufff2" +
    "\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\001\002\000\004\033\226\001\002\000\066\005\ufffa\010" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\046\ufffa" +
    "\053\ufffa\054\ufffa\057\ufffa\062\ufffa\063\ufffa\065\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\001\002\000" +
    "\066\005\ufff5\010\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\046\ufff5\053\ufff5\054\ufff5\057\ufff5\062\ufff5\063" +
    "\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5" +
    "\074\ufff5\075\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103" +
    "\ufff5\001\002\000\066\005\ufffb\010\ufffb\013\ufffb\015\ufffb" +
    "\017\ufffb\020\ufffb\022\ufffb\046\ufffb\053\ufffb\054\ufffb\057" +
    "\ufffb\062\ufffb\063\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\077\ufffb\100\ufffb\101" +
    "\ufffb\102\ufffb\103\ufffb\001\002\000\074\006\uffaf\012\uffaf" +
    "\014\uffaf\016\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\047\uffaf\051\uffaf\052\uffaf\064\uffaf\066\uffaf\076\uffaf" +
    "\104\uffaf\001\002\000\066\005\ufff3\010\ufff3\013\ufff3\015" +
    "\ufff3\017\ufff3\020\ufff3\022\ufff3\046\ufff3\053\ufff3\054\ufff3" +
    "\057\ufff3\062\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\001\002\000\072\006\uffb5\012" +
    "\uffb5\014\uffb5\016\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\064\uffb5\066\uffb5\076\uffb5\104" +
    "\uffb5\001\002\000\066\005\ufff6\010\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\046\ufff6\053\ufff6\054\ufff6\057" +
    "\ufff6\062\ufff6\063\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6\100\ufff6\101" +
    "\ufff6\102\ufff6\103\ufff6\001\002\000\016\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\001\002\000\066\005" +
    "\ufff8\010\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\046\ufff8\053\ufff8\054\ufff8\057\ufff8\062\ufff8\063\ufff8\065" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\001" +
    "\002\000\066\005\ufff9\010\ufff9\013\ufff9\015\ufff9\017\ufff9" +
    "\020\ufff9\022\ufff9\046\ufff9\053\ufff9\054\ufff9\057\ufff9\062" +
    "\ufff9\063\ufff9\065\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\077\ufff9\100\ufff9\101\ufff9\102" +
    "\ufff9\103\ufff9\001\002\000\024\006\uffc7\023\065\024\060" +
    "\025\064\026\056\031\053\032\063\047\uffc7\052\uffc7\001" +
    "\002\000\074\006\uffb1\012\uffb1\014\uffb1\016\uffb1\021\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\047\uffb1\051\uffb1\052" +
    "\uffb1\064\uffb1\066\uffb1\076\uffb1\104\uffb1\001\002\000\020" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\051" +
    "\215\001\002\000\074\006\uffb3\012\uffb3\014\uffb3\016\uffb3" +
    "\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\047\uffb3\051" +
    "\uffb3\052\uffb3\064\uffb3\066\uffb3\076\uffb3\104\uffb3\001\002" +
    "\000\016\010\043\013\012\015\037\017\041\020\046\022" +
    "\045\001\002\000\074\006\uffc6\012\uffc6\014\uffc6\016\uffc6" +
    "\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\047\uffc6\051" +
    "\uffc6\052\uffc6\064\uffc6\066\uffc6\076\uffc6\104\uffc6\001\002" +
    "\000\006\006\176\052\175\001\002\000\074\006\uffb0\012" +
    "\uffb0\014\uffb0\016\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\047\uffb0\051\uffb0\052\uffb0\064\uffb0\066\uffb0\076" +
    "\uffb0\104\uffb0\001\002\000\074\006\uffb2\012\uffb2\014\uffb2" +
    "\016\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\047" +
    "\uffb2\051\uffb2\052\uffb2\064\uffb2\066\uffb2\076\uffb2\104\uffb2" +
    "\001\002\000\004\033\117\001\002\000\016\010\043\013" +
    "\012\015\037\017\041\020\046\022\045\001\002\000\066" +
    "\005\ufff7\010\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\046\ufff7\053\ufff7\054\ufff7\057\ufff7\062\ufff7\063\ufff7" +
    "\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7" +
    "\001\002\000\026\012\062\014\057\016\054\021\061\023" +
    "\065\024\060\025\064\026\056\031\053\032\063\001\002" +
    "\000\004\027\114\001\002\000\024\010\uffcc\013\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\033\uffcc\050\uffcc\076\uffcc" +
    "\001\002\000\006\033\073\076\074\001\002\000\016\010" +
    "\043\013\012\015\037\017\041\020\046\022\045\001\002" +
    "\000\024\010\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb\022" +
    "\uffcb\033\uffcb\050\uffcb\076\uffcb\001\002\000\016\010\043" +
    "\013\012\015\037\017\041\020\046\022\045\001\002\000" +
    "\024\010\uffca\013\uffca\015\uffca\017\uffca\020\uffca\022\uffca" +
    "\033\uffca\050\uffca\076\uffca\001\002\000\024\010\uffcd\013" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\022\uffcd\033\uffcd\050\uffcd" +
    "\076\uffcd\001\002\000\016\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\001\002\000\016\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\001\002\000\016\010" +
    "\043\013\012\015\037\017\041\020\046\022\045\001\002" +
    "\000\072\006\uffbb\012\uffbb\014\uffbb\016\uffbb\021\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\047\uffbb\051\uffbb\052\uffbb\064\uffbb" +
    "\066\uffbb\076\uffbb\104\uffbb\001\002\000\072\006\uffb8\012" +
    "\uffb8\014\uffb8\016\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\064\uffb8\066\uffb8\076\uffb8\104" +
    "\uffb8\001\002\000\072\006\uffb6\012\uffb6\014\uffb6\016\uffb6" +
    "\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\064\uffb6\066\uffb6\076\uffb6\104\uffb6\001\002\000\072" +
    "\006\uffba\012\uffba\014\uffba\016\uffba\021\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\047\uffba\051\uffba\052\uffba\064\uffba\066\uffba" +
    "\076\uffba\104\uffba\001\002\000\072\006\uffb7\012\uffb7\014" +
    "\uffb7\016\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\064\uffb7\066\uffb7\076\uffb7\104\uffb7\001" +
    "\002\000\004\034\111\001\002\000\004\033\075\001\002" +
    "\000\012\012\062\014\057\016\054\021\061\001\002\000" +
    "\044\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\046\033\053\047\063\011\067\023\071\013\073\040\074" +
    "\007\077\050\101\042\102\017\103\014\001\002\000\046" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\046" +
    "\033\053\047\063\011\067\023\071\013\073\040\074\007" +
    "\077\050\100\101\101\042\102\017\103\014\001\002\000" +
    "\066\005\ufffe\010\ufffe\013\ufffe\015\ufffe\017\ufffe\020\ufffe" +
    "\022\ufffe\046\ufffe\053\ufffe\054\ufffe\057\ufffe\062\ufffe\063" +
    "\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\074\ufffe\075\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103" +
    "\ufffe\001\002\000\066\005\uffdf\010\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\022\uffdf\046\uffdf\053\uffdf\054\uffdf\057" +
    "\uffdf\062\uffdf\063\uffdf\065\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\001\002\000\006\034\uffdb\052\uffdb" +
    "\001\002\000\016\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\001\002\000\006\034\105\052\106\001\002" +
    "\000\044\010\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\046\uffdd\053\uffdd\063\uffdd\067\uffdd\071\uffdd\073\uffdd" +
    "\074\uffdd\077\uffdd\101\uffdd\102\uffdd\103\uffdd\001\002\000" +
    "\012\012\062\014\057\016\054\021\061\001\002\000\006" +
    "\034\uffdc\052\uffdc\001\002\000\022\023\065\024\060\025" +
    "\064\026\056\031\053\032\063\034\uffda\052\uffda\001\002" +
    "\000\044\010\043\013\012\015\037\017\041\020\046\022" +
    "\045\046\033\053\047\063\011\067\023\071\013\073\040" +
    "\074\007\077\050\101\042\102\017\103\014\001\002\000" +
    "\046\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\046\033\053\047\063\011\067\023\071\013\073\040\074" +
    "\007\077\050\100\113\101\042\102\017\103\014\001\002" +
    "\000\066\005\uffd6\010\uffd6\013\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\022\uffd6\046\uffd6\053\uffd6\054\uffd6\057\uffd6\062\uffd6" +
    "\063\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\075\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\001\002\000\016\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\001\002\000\004\030\116\001\002" +
    "\000\072\006\uffb9\012\uffb9\014\uffb9\016\uffb9\021\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\047\uffb9\051\uffb9\052\uffb9\064\uffb9" +
    "\066\uffb9\076\uffb9\104\uffb9\001\002\000\020\010\043\013" +
    "\012\015\037\017\041\020\046\022\045\045\120\001\002" +
    "\000\004\033\172\001\002\000\010\034\uffc2\043\uffc2\044" +
    "\uffc2\001\002\000\010\034\140\043\142\044\141\001\002" +
    "\000\032\023\065\024\060\025\064\026\056\031\053\032" +
    "\063\035\131\036\126\037\127\040\124\041\125\042\130" +
    "\001\002\000\016\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\001\002\000\016\010\043\013\012\015\037" +
    "\017\041\020\046\022\045\001\002\000\016\010\043\013" +
    "\012\015\037\017\041\020\046\022\045\001\002\000\016" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\001" +
    "\002\000\016\010\043\013\012\015\037\017\041\020\046" +
    "\022\045\001\002\000\016\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\001\002\000\024\023\065\024\060" +
    "\025\064\026\056\031\053\032\063\034\uffbe\043\uffbe\044" +
    "\uffbe\001\002\000\024\023\065\024\060\025\064\026\056" +
    "\031\053\032\063\034\uffbd\043\uffbd\044\uffbd\001\002\000" +
    "\024\023\065\024\060\025\064\026\056\031\053\032\063" +
    "\034\uffc0\043\uffc0\044\uffc0\001\002\000\024\023\065\024" +
    "\060\025\064\026\056\031\053\032\063\034\uffc1\043\uffc1" +
    "\044\uffc1\001\002\000\024\023\065\024\060\025\064\026" +
    "\056\031\053\032\063\034\uffbc\043\uffbc\044\uffbc\001\002" +
    "\000\024\023\065\024\060\025\064\026\056\031\053\032" +
    "\063\034\uffbf\043\uffbf\044\uffbf\001\002\000\004\060\145" +
    "\001\002\000\016\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\001\002\000\016\010\043\013\012\015\037" +
    "\017\041\020\046\022\045\001\002\000\010\034\uffc3\043" +
    "\uffc3\044\uffc3\001\002\000\010\034\uffc4\043\uffc4\044\uffc4" +
    "\001\002\000\044\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\046\033\053\047\063\011\067\023\071\013" +
    "\073\040\074\007\077\050\101\042\102\017\103\014\001" +
    "\002\000\052\010\043\013\012\015\037\017\041\020\046" +
    "\022\045\046\033\053\047\054\152\057\151\062\147\063" +
    "\011\067\023\071\013\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\066\005\uffe5\010\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\046\uffe5\053\uffe5" +
    "\054\uffe5\057\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\001\002\000\010\054" +
    "\162\057\161\062\163\001\002\000\044\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\046\033\053\047\063" +
    "\011\067\023\071\013\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\004\033\153\001\002\000" +
    "\020\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\045\120\001\002\000\010\034\155\043\142\044\141\001" +
    "\002\000\004\060\156\001\002\000\044\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\046\033\053\047\063" +
    "\011\067\023\071\013\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\052\010\043\013\012\015" +
    "\037\017\041\020\046\022\045\046\033\053\047\054\uffe1" +
    "\057\uffe1\062\uffe1\063\011\067\023\071\013\073\040\074" +
    "\007\077\050\101\042\102\017\103\014\001\002\000\052" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\046" +
    "\033\053\047\054\uffe0\057\uffe0\062\uffe0\063\011\067\023" +
    "\071\013\073\040\074\007\077\050\101\042\102\017\103" +
    "\014\001\002\000\044\010\043\013\012\015\037\017\041" +
    "\020\046\022\045\046\033\053\047\063\011\067\023\071" +
    "\013\073\040\074\007\077\050\101\042\102\017\103\014" +
    "\001\002\000\004\033\164\001\002\000\066\005\uffe4\010" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\046\uffe4" +
    "\053\uffe4\054\uffe4\057\uffe4\062\uffe4\063\uffe4\065\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\001\002\000" +
    "\020\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\045\120\001\002\000\010\034\166\043\142\044\141\001" +
    "\002\000\004\060\167\001\002\000\044\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\046\033\053\047\063" +
    "\011\067\023\071\013\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\052\010\043\013\012\015" +
    "\037\017\041\020\046\022\045\046\033\053\047\054\uffe3" +
    "\057\uffe3\062\uffe3\063\011\067\023\071\013\073\040\074" +
    "\007\077\050\101\042\102\017\103\014\001\002\000\052" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\046" +
    "\033\053\047\054\uffe2\057\uffe2\062\uffe2\063\011\067\023" +
    "\071\013\073\040\074\007\077\050\101\042\102\017\103" +
    "\014\001\002\000\020\010\043\013\012\015\037\017\041" +
    "\020\046\022\045\045\120\001\002\000\010\034\174\043" +
    "\142\044\141\001\002\000\010\034\uffc5\043\uffc5\044\uffc5" +
    "\001\002\000\016\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\001\002\000\016\010\043\013\012\015\037" +
    "\017\041\020\046\022\045\001\002\000\020\023\065\024" +
    "\060\025\064\026\056\031\053\032\063\051\200\001\002" +
    "\000\066\005\uffce\010\uffce\013\uffce\015\uffce\017\uffce\020" +
    "\uffce\022\uffce\046\uffce\053\uffce\054\uffce\057\uffce\062\uffce" +
    "\063\uffce\065\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\103\uffce\001\002\000\024\006\uffc8\023\065\024\060\025" +
    "\064\026\056\031\053\032\063\047\uffc8\052\uffc8\001\002" +
    "\000\020\023\065\024\060\025\064\026\056\031\053\032" +
    "\063\033\204\001\002\000\004\051\214\001\002\000\020" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\034" +
    "\205\001\002\000\004\051\213\001\002\000\006\034\210" +
    "\052\211\001\002\000\022\023\065\024\060\025\064\026" +
    "\056\031\053\032\063\034\uffd7\052\uffd7\001\002\000\004" +
    "\051\uffd9\001\002\000\016\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\001\002\000\022\023\065\024\060" +
    "\025\064\026\056\031\053\032\063\034\uffd8\052\uffd8\001" +
    "\002\000\066\005\uffd1\010\uffd1\013\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\022\uffd1\046\uffd1\053\uffd1\054\uffd1\057\uffd1\062" +
    "\uffd1\063\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\077\uffd1\100\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\001\002\000\066\005\uffd2\010\uffd2\013\uffd2" +
    "\015\uffd2\017\uffd2\020\uffd2\022\uffd2\046\uffd2\053\uffd2\054" +
    "\uffd2\057\uffd2\062\uffd2\063\uffd2\065\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\077\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\001\002\000\066\005\uffd3" +
    "\010\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3\022\uffd3\046" +
    "\uffd3\053\uffd3\054\uffd3\057\uffd3\062\uffd3\063\uffd3\065\uffd3" +
    "\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002" +
    "\000\020\023\065\024\060\025\064\026\056\031\053\032" +
    "\063\051\217\001\002\000\066\005\uffd4\010\uffd4\013\uffd4" +
    "\015\uffd4\017\uffd4\020\uffd4\022\uffd4\046\uffd4\053\uffd4\054" +
    "\uffd4\057\uffd4\062\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\001\002\000\006\047\221" +
    "\052\175\001\002\000\012\012\062\014\057\016\054\021" +
    "\061\001\002\000\004\050\223\001\002\000\016\010\043" +
    "\013\012\015\037\017\041\020\046\022\045\001\002\000" +
    "\020\023\065\024\060\025\064\026\056\031\053\032\063" +
    "\051\225\001\002\000\066\005\uffc9\010\uffc9\013\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\022\uffc9\046\uffc9\053\uffc9\054\uffc9" +
    "\057\uffc9\062\uffc9\063\uffc9\065\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\077\uffc9\100\uffc9" +
    "\101\uffc9\102\uffc9\103\uffc9\001\002\000\020\010\043\013" +
    "\012\015\037\017\230\020\227\022\045\045\120\001\002" +
    "\000\034\023\uffb2\024\uffb2\025\uffb2\026\uffb2\031\uffb2\032" +
    "\uffb2\034\uffeb\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\001\002\000\034\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\031\uffb3\032\uffb3\034\uffec\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\001\002\000\010\034\uffea\043" +
    "\142\044\141\001\002\000\004\034\233\001\002\000\044" +
    "\010\043\013\012\015\037\017\041\020\046\022\045\046" +
    "\033\053\047\063\011\067\023\071\013\073\040\074\007" +
    "\077\050\101\042\102\017\103\014\001\002\000\046\010" +
    "\043\013\012\015\037\017\041\020\046\022\045\046\033" +
    "\053\047\063\011\067\023\070\235\071\013\073\040\074" +
    "\007\077\050\101\042\102\017\103\014\001\002\000\066" +
    "\005\uffee\010\uffee\013\uffee\015\uffee\017\uffee\020\uffee\022" +
    "\uffee\046\uffee\053\uffee\054\uffee\057\uffee\062\uffee\063\uffee" +
    "\065\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074" +
    "\uffee\075\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee" +
    "\001\002\000\004\002\uffff\001\002\000\016\010\043\013" +
    "\012\015\037\017\041\020\046\022\045\001\002\000\020" +
    "\023\065\024\060\025\064\026\056\031\053\032\063\034" +
    "\241\001\002\000\004\051\242\001\002\000\066\005\uffd0" +
    "\010\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\022\uffd0\046" +
    "\uffd0\053\uffd0\054\uffd0\057\uffd0\062\uffd0\063\uffd0\065\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002" +
    "\000\016\010\043\013\012\015\037\017\041\020\046\022" +
    "\045\001\002\000\020\023\065\024\060\025\064\026\056" +
    "\031\053\032\063\034\245\001\002\000\004\051\246\001" +
    "\002\000\066\005\uffcf\010\uffcf\013\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\022\uffcf\046\uffcf\053\uffcf\054\uffcf\057\uffcf\062" +
    "\uffcf\063\uffcf\065\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\001\002\000\046\010\043\013\012\015\037" +
    "\017\041\020\046\022\045\046\033\053\047\063\011\067" +
    "\023\071\013\072\250\073\040\074\007\077\050\101\042" +
    "\102\017\103\014\001\002\000\004\033\251\001\002\000" +
    "\020\010\043\013\012\015\037\017\230\020\227\022\045" +
    "\045\120\001\002\000\004\034\253\001\002\000\004\051" +
    "\254\001\002\000\066\005\uffed\010\uffed\013\uffed\015\uffed" +
    "\017\uffed\020\uffed\022\uffed\046\uffed\053\uffed\054\uffed\057" +
    "\uffed\062\uffed\063\uffed\065\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\001\002\000\020\006\256\023\065" +
    "\024\060\025\064\026\056\031\053\032\063\001\002\000" +
    "\016\010\043\013\012\015\037\017\041\020\046\022\045" +
    "\001\002\000\020\023\065\024\060\025\064\026\056\031" +
    "\053\032\063\064\260\001\002\000\016\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\001\002\000\022\023" +
    "\065\024\060\025\064\026\056\031\053\032\063\066\262" +
    "\104\263\001\002\000\044\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\046\033\053\047\063\011\067\023" +
    "\071\013\073\040\074\007\077\050\101\042\102\017\103" +
    "\014\001\002\000\004\013\264\001\002\000\004\066\265" +
    "\001\002\000\044\010\043\013\012\015\037\017\041\020" +
    "\046\022\045\046\033\053\047\063\011\067\023\071\013" +
    "\073\040\074\007\077\050\101\042\102\017\103\014\001" +
    "\002\000\046\010\043\013\012\015\037\017\041\020\046" +
    "\022\045\046\033\053\047\063\011\065\267\067\023\071" +
    "\013\073\040\074\007\077\050\101\042\102\017\103\014" +
    "\001\002\000\066\005\uffef\010\uffef\013\uffef\015\uffef\017" +
    "\uffef\020\uffef\022\uffef\046\uffef\053\uffef\054\uffef\057\uffef" +
    "\062\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\073\uffef\074\uffef\075\uffef\077\uffef\100\uffef\101\uffef" +
    "\102\uffef\103\uffef\001\002\000\046\010\043\013\012\015" +
    "\037\017\041\020\046\022\045\046\033\053\047\063\011" +
    "\065\271\067\023\071\013\073\040\074\007\077\050\101" +
    "\042\102\017\103\014\001\002\000\066\005\ufff0\010\ufff0" +
    "\013\ufff0\015\ufff0\017\ufff0\020\ufff0\022\ufff0\046\ufff0\053" +
    "\ufff0\054\ufff0\057\ufff0\062\ufff0\063\ufff0\065\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\001\002\000\022" +
    "\023\065\024\060\025\064\026\056\031\053\032\063\033" +
    "\273\076\274\001\002\000\004\034\300\001\002\000\004" +
    "\033\075\001\002\000\044\010\043\013\012\015\037\017" +
    "\041\020\046\022\045\046\033\053\047\063\011\067\023" +
    "\071\013\073\040\074\007\077\050\101\042\102\017\103" +
    "\014\001\002\000\046\010\043\013\012\015\037\017\041" +
    "\020\046\022\045\046\033\053\047\063\011\067\023\071" +
    "\013\073\040\074\007\075\277\077\050\101\042\102\017" +
    "\103\014\001\002\000\066\005\uffde\010\uffde\013\uffde\015" +
    "\uffde\017\uffde\020\uffde\022\uffde\046\uffde\053\uffde\054\uffde" +
    "\057\uffde\062\uffde\063\uffde\065\uffde\067\uffde\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\077\uffde\100\uffde" +
    "\101\uffde\102\uffde\103\uffde\001\002\000\044\010\043\013" +
    "\012\015\037\017\041\020\046\022\045\046\033\053\047" +
    "\063\011\067\023\071\013\073\040\074\007\077\050\101" +
    "\042\102\017\103\014\001\002\000\046\010\043\013\012" +
    "\015\037\017\041\020\046\022\045\046\033\053\047\063" +
    "\011\067\023\071\013\073\040\074\007\075\302\077\050" +
    "\101\042\102\017\103\014\001\002\000\066\005\uffd5\010" +
    "\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\022\uffd5\046\uffd5" +
    "\053\uffd5\054\uffd5\057\uffd5\062\uffd5\063\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\020\010\007\011\017" +
    "\012\025\013\023\014\034\015\033\016\050\017\031\020" +
    "\024\021\014\022\027\023\021\024\015\025\035\036\043" +
    "\040\030\041\026\001\001\000\010\025\271\040\030\041" +
    "\026\001\001\000\002\001\001\000\010\025\254\040\030" +
    "\041\026\001\001\000\002\001\001\000\046\003\246\010" +
    "\007\011\017\012\025\013\023\014\034\015\033\016\050" +
    "\017\031\020\024\021\014\022\027\023\021\024\015\025" +
    "\035\036\043\040\030\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\010\077\011\017\012\025\013\023" +
    "\014\034\015\033\016\050\017\031\020\024\021\014\022" +
    "\027\023\021\024\015\025\035\036\043\040\030\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\035\036\217\040\030\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\215\040\030\041\026\001\001\000\002" +
    "\001\001\000\010\025\201\040\030\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\051\040\030\041" +
    "\026\001\001\000\002\001\001\000\004\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\071\041\026\001\001\000\002\001\001\000\006" +
    "\040\070\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\067\041\026\001\001\000\006\040\066" +
    "\041\026\001\001\000\006\040\065\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\075\001\001\000\010\030\102\032\103\033\101\001\001" +
    "\000\046\003\076\010\007\011\017\012\025\013\023\014" +
    "\034\015\033\016\050\017\031\020\024\021\014\022\027" +
    "\023\021\024\015\025\035\036\043\040\030\041\026\001" +
    "\001\000\044\010\077\011\017\012\025\013\023\014\034" +
    "\015\033\016\050\017\031\020\024\021\014\022\027\023" +
    "\021\024\015\025\035\036\043\040\030\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\107\040\030\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\102\033\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\111\010\007" +
    "\011\017\012\025\013\023\014\034\015\033\016\050\017" +
    "\031\020\024\021\014\022\027\023\021\024\015\025\035" +
    "\036\043\040\030\041\026\001\001\000\044\010\077\011" +
    "\017\012\025\013\023\014\034\015\033\016\050\017\031" +
    "\020\024\021\014\022\027\023\021\024\015\025\035\036" +
    "\043\040\030\041\026\001\001\000\002\001\001\000\006" +
    "\040\114\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\122\027\121\037\120\040\030\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\136\040\030\041\026" +
    "\001\001\000\010\025\135\040\030\041\026\001\001\000" +
    "\010\025\134\040\030\041\026\001\001\000\010\025\133" +
    "\040\030\041\026\001\001\000\010\025\132\040\030\041" +
    "\026\001\001\000\010\025\131\040\030\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\122\037\143\040\030\041\026\001" +
    "\001\000\012\025\122\037\142\040\030\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\145\010" +
    "\007\011\017\012\025\013\023\014\034\015\033\016\050" +
    "\017\031\020\024\021\014\022\027\023\021\024\015\025" +
    "\035\036\043\040\030\041\026\001\001\000\046\005\147" +
    "\010\077\011\017\012\025\013\023\014\034\015\033\016" +
    "\050\017\031\020\024\021\014\022\027\023\021\024\015" +
    "\025\035\036\043\040\030\041\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\157\010\007\011\017" +
    "\012\025\013\023\014\034\015\033\016\050\017\031\020" +
    "\024\021\014\022\027\023\021\024\015\025\035\036\043" +
    "\040\030\041\026\001\001\000\002\001\001\000\014\025" +
    "\122\027\153\037\120\040\030\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\156\010\007\011" +
    "\017\012\025\013\023\014\034\015\033\016\050\017\031" +
    "\020\024\021\014\022\027\023\021\024\015\025\035\036" +
    "\043\040\030\041\026\001\001\000\044\010\077\011\017" +
    "\012\025\013\023\014\034\015\033\016\050\017\031\020" +
    "\024\021\014\022\027\023\021\024\015\025\035\036\043" +
    "\040\030\041\026\001\001\000\044\010\077\011\017\012" +
    "\025\013\023\014\034\015\033\016\050\017\031\020\024" +
    "\021\014\022\027\023\021\024\015\025\035\036\043\040" +
    "\030\041\026\001\001\000\046\003\170\010\007\011\017" +
    "\012\025\013\023\014\034\015\033\016\050\017\031\020" +
    "\024\021\014\022\027\023\021\024\015\025\035\036\043" +
    "\040\030\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\122\027\164\037\120\040\030\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\167\010\007\011\017\012\025\013\023\014\034\015\033" +
    "\016\050\017\031\020\024\021\014\022\027\023\021\024" +
    "\015\025\035\036\043\040\030\041\026\001\001\000\044" +
    "\010\077\011\017\012\025\013\023\014\034\015\033\016" +
    "\050\017\031\020\024\021\014\022\027\023\021\024\015" +
    "\025\035\036\043\040\030\041\026\001\001\000\044\010" +
    "\077\011\017\012\025\013\023\014\034\015\033\016\050" +
    "\017\031\020\024\021\014\022\027\023\021\024\015\025" +
    "\035\036\043\040\030\041\026\001\001\000\014\025\122" +
    "\027\172\037\120\040\030\041\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\200\040\030\041\026" +
    "\001\001\000\010\025\176\040\030\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\202\001\001\000\002\001\001\000\012\025\206\035" +
    "\205\040\030\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\211\040\030\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\221" +
    "\001\001\000\002\001\001\000\010\025\223\040\030\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\025\122\026\231\027\230\037\120\040\030\041\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\233\010\007\011\017\012" +
    "\025\013\023\014\034\015\033\016\050\017\031\020\024" +
    "\021\014\022\027\023\021\024\015\025\035\036\043\040" +
    "\030\041\026\001\001\000\044\010\077\011\017\012\025" +
    "\013\023\014\034\015\033\016\050\017\031\020\024\021" +
    "\014\022\027\023\021\024\015\025\035\036\043\040\030" +
    "\041\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\237\040\030\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\243\040" +
    "\030\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\010\077\011\017\012\025\013" +
    "\023\014\034\015\033\016\050\017\031\020\024\021\014" +
    "\022\027\023\021\024\015\025\035\036\043\040\030\041" +
    "\026\001\001\000\002\001\001\000\016\025\122\026\251" +
    "\027\230\037\120\040\030\041\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\256\040\030\041\026\001\001\000\002\001" +
    "\001\000\010\025\260\040\030\041\026\001\001\000\002" +
    "\001\001\000\046\003\267\010\007\011\017\012\025\013" +
    "\023\014\034\015\033\016\050\017\031\020\024\021\014" +
    "\022\027\023\021\024\015\025\035\036\043\040\030\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\265\010\007\011\017\012\025\013\023\014\034\015" +
    "\033\016\050\017\031\020\024\021\014\022\027\023\021" +
    "\024\015\025\035\036\043\040\030\041\026\001\001\000" +
    "\044\010\077\011\017\012\025\013\023\014\034\015\033" +
    "\016\050\017\031\020\024\021\014\022\027\023\021\024" +
    "\015\025\035\036\043\040\030\041\026\001\001\000\002" +
    "\001\001\000\044\010\077\011\017\012\025\013\023\014" +
    "\034\015\033\016\050\017\031\020\024\021\014\022\027" +
    "\023\021\024\015\025\035\036\043\040\030\041\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\274\001\001\000\046\003\275\010\007\011" +
    "\017\012\025\013\023\014\034\015\033\016\050\017\031" +
    "\020\024\021\014\022\027\023\021\024\015\025\035\036" +
    "\043\040\030\041\026\001\001\000\044\010\077\011\017" +
    "\012\025\013\023\014\034\015\033\016\050\017\031\020" +
    "\024\021\014\022\027\023\021\024\015\025\035\036\043" +
    "\040\030\041\026\001\001\000\002\001\001\000\046\003" +
    "\300\010\007\011\017\012\025\013\023\014\034\015\033" +
    "\016\050\017\031\020\024\021\014\022\027\023\021\024" +
    "\015\025\035\036\043\040\030\041\026\001\001\000\044" +
    "\010\077\011\017\012\025\013\023\014\034\015\033\016" +
    "\050\017\031\020\024\021\014\022\027\023\021\024\015" +
    "\025\035\036\043\040\030\041\026\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$as$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$as$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$as$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$as$actions {
  private final as parser;

  /** Constructor */
  CUP$as$actions(as parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$as$do_action_part00000000(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$as$result;

      /* select the action based on the action number */
      switch (CUP$as$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		RESULT = start_val;
              CUP$as$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$as$parser.done_parsing();
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PRINCIPAL ::= inicio INSTRUCCIONES finall 
            {
              Object RESULT =null;
		System.out.println("TERMINO BLOQUE PRINCIPAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		System.out.println("ENCONTRO DECLARACION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		System.out.println("encontro impresion linea simple");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIRLN 
            {
              Object RESULT =null;
		System.out.println("encontro impresion multipe linea");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		System.out.println("encontro ASIGNACION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		System.out.println("encontro METODO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		System.out.println("encontro FUNCION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= METODOsp 
            {
              Object RESULT =null;
		System.out.println("encontro METODOSP");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUNCIONsp 
            {
              Object RESULT =null;
		System.out.println("encontro FUNCIONSP");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONDICIONIF 
            {
              Object RESULT =null;
		System.out.println("encontro CONDICION IF");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;
		System.out.println("encontro CICLO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("encontro RETURN");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CALL 
            {
              Object RESULT =null;
		System.out.println("encontro LLAMADA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CICLO ::= para E flechita E hasta E hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CICLO ::= para E flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CICLO ::= mientras abre_parentesis COND_WHILE cierra_parentesis INSTRUCCIONES fin_mientras 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CICLO ::= repetir INSTRUCCIONES hasta_que abre_parentesis COND_WHILE cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COND_WHILE ::= verdadero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND_WHILE ::= falso 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COND_WHILE ::= COMPARACIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH ::= segun E hacer OPCIONES de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("SWITCH",4, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCIONES ::= OPCIONES OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCIONES ::= OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= abre_pregunta E cierra_pregunta entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCION",2, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES IFANIDADOS fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFANIDADOS ::= IFANIDADOS o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFANIDADOS ::= IFANIDADOS de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFANIDADOS ::= o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFANIDADOS ::= de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= funcion E TIPODATO_DECLARACION con_parametros PARAMETROS INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO ::= metodo E con_parametros PARAMETROS INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= abre_parentesis PARS cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARS ::= PARS coma PAR 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARS ::= PAR 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PAR ::= TIPODATO_DECLARACION E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PAR",25, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROSLL",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARSLL ::= PARSLL coma E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARSLL ::= E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCIONsp ::= funcion E TIPODATO_DECLARACION abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCIONsp",14, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODOsp ::= metodo E abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("METODOsp",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETURN ::= retornar E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETURN ::= retornar punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CALL ::= ejecutar E PARAMETROSLL punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CALL ::= ejecutar E abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= imprimir abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIRLN ::= imprimir_nl abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= IDS flechita E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPODATO_DECLARACION ::= numero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPODATO_DECLARACION ::= bulean 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPODATO_DECLARACION ::= cadena 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPODATO_DECLARACION ::= caracter 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= ingresar IDS como TIPODATO_DECLARACION con_valor E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IDS ::= IDS coma E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDS ::= E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLE ::= variable 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("VARIABLE",31, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMPARACIONES ::= not abre_parentesis COMPARACIONES cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPARACIONES ::= COMPARACIONES and COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMPARACIONES ::= COMPARACIONES or COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMP ::= E menor E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMP ::= E mayor_o_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMP ::= E menor_o_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMP ::= E mayor E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMP ::= E es_diferente E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMP ::= E es_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E mas F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E menos F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E potencia abre_corchete F cierra_corchete 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E por F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E dividido F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E mod F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // F ::= number 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // F ::= verdadero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= falso 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= frase 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= frasecita 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$as$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$as$do_action(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
              return CUP$as$do_action_part00000000(
                               CUP$as$act_num,
                               CUP$as$parser,
                               CUP$as$stack,
                               CUP$as$top);
    }
}

}
