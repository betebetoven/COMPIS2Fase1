
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class as extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public as() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public as(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public as(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\042" +
    "\005\000\002\042\003\000\002\003\004\000\002\003\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\022\013" +
    "\000\002\022\015\000\002\022\010\000\002\022\011\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\006\012\000\002\007\004\000\002\007\003\000\002\004" +
    "\007\000\002\021\011\000\002\021\012\000\002\005\011" +
    "\000\002\005\005\000\002\005\010\000\002\005\004\000" +
    "\002\016\011\000\002\015\010\000\002\031\005\000\002" +
    "\032\005\000\002\032\003\000\002\033\004\000\002\034" +
    "\005\000\002\035\005\000\002\035\003\000\002\020\011" +
    "\000\002\017\010\000\002\023\005\000\002\023\004\000" +
    "\002\024\006\000\002\024\007\000\002\012\007\000\002" +
    "\013\007\000\002\014\006\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\011\011" +
    "\000\002\036\005\000\002\036\003\000\002\041\005\000" +
    "\002\027\006\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\007\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\004\006\001\002\000\004\002\305\001" +
    "\002\000\004\002\000\001\002\000\046\002\ufffe\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\045\032\052" +
    "\046\062\011\066\023\070\013\072\042\073\007\076\050" +
    "\100\043\101\017\102\014\001\002\000\016\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\001\002\000\066" +
    "\005\ufffc\010\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc\021" +
    "\ufffc\045\ufffc\052\ufffc\053\ufffc\056\ufffc\061\ufffc\062\ufffc" +
    "\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc" +
    "\001\002\000\016\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\001\002\000\074\006\uffb3\011\uffb3\013\uffb3" +
    "\015\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\046" +
    "\uffb3\050\uffb3\051\uffb3\063\uffb3\065\uffb3\075\uffb3\103\uffb3" +
    "\001\002\000\044\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\045\032\052\046\062\011\066\023\070\013" +
    "\072\042\073\007\076\050\100\043\101\017\102\014\001" +
    "\002\000\004\032\245\001\002\000\066\005\ufff3\010\ufff3" +
    "\012\ufff3\014\ufff3\016\ufff3\017\ufff3\021\ufff3\045\ufff3\052" +
    "\ufff3\053\ufff3\056\ufff3\061\ufff3\062\ufff3\064\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\066" +
    "\005\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\045\ufff0\052\ufff0\053\ufff0\056\ufff0\061\ufff0\062\ufff0" +
    "\064\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0" +
    "\001\002\000\004\032\241\001\002\000\066\005\ufffb\010" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\017\ufffb\021\ufffb\045\ufffb" +
    "\052\ufffb\053\ufffb\056\ufffb\061\ufffb\062\ufffb\064\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\001\002\000" +
    "\066\005\ufff1\010\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\021\ufff1\045\ufff1\052\ufff1\053\ufff1\056\ufff1\061\ufff1\062" +
    "\ufff1\064\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\001\002\000\046\005\240\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\004\032\230\001\002\000\066\005" +
    "\ufff9\010\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\045\ufff9\052\ufff9\053\ufff9\056\ufff9\061\ufff9\062\ufff9\064" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\001" +
    "\002\000\066\005\ufff4\010\ufff4\012\ufff4\014\ufff4\016\ufff4" +
    "\017\ufff4\021\ufff4\045\ufff4\052\ufff4\053\ufff4\056\ufff4\061" +
    "\ufff4\062\ufff4\064\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\073\ufff4\074\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\001\002\000\066\005\ufffa\010\ufffa\012\ufffa" +
    "\014\ufffa\016\ufffa\017\ufffa\021\ufffa\045\ufffa\052\ufffa\053" +
    "\ufffa\056\ufffa\061\ufffa\062\ufffa\064\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\076\ufffa\077" +
    "\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000\074\006\uffae" +
    "\011\uffae\013\uffae\015\uffae\020\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\046\uffae\050\uffae\051\uffae\063\uffae\065\uffae" +
    "\075\uffae\103\uffae\001\002\000\066\005\ufff2\010\ufff2\012" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\045\ufff2\052\ufff2" +
    "\053\ufff2\056\ufff2\061\ufff2\062\ufff2\064\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\001\002\000\066\005" +
    "\ufff5\010\ufff5\012\ufff5\014\ufff5\016\ufff5\017\ufff5\021\ufff5" +
    "\045\ufff5\052\ufff5\053\ufff5\056\ufff5\061\ufff5\062\ufff5\064" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5" +
    "\074\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\001" +
    "\002\000\016\010\034\012\012\014\040\016\041\017\045" +
    "\021\047\001\002\000\072\006\uffb4\011\uffb4\013\uffb4\015" +
    "\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\046\uffb4\050\uffb4" +
    "\051\uffb4\063\uffb4\065\uffb4\075\uffb4\103\uffb4\001\002\000" +
    "\004\007\220\001\002\000\066\005\ufff8\010\ufff8\012\ufff8" +
    "\014\ufff8\016\ufff8\017\ufff8\021\ufff8\045\ufff8\052\ufff8\053" +
    "\ufff8\056\ufff8\061\ufff8\062\ufff8\064\ufff8\066\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\076\ufff8\077" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002\000\024\006\uffc6" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\046" +
    "\uffc6\051\uffc6\001\002\000\066\005\ufff7\010\ufff7\012\ufff7" +
    "\014\ufff7\016\ufff7\017\ufff7\021\ufff7\045\ufff7\052\ufff7\053" +
    "\ufff7\056\ufff7\061\ufff7\062\ufff7\064\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\076\ufff7\077" +
    "\ufff7\100\ufff7\101\ufff7\102\ufff7\001\002\000\074\006\uffb0" +
    "\011\uffb0\013\uffb0\015\uffb0\020\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\046\uffb0\050\uffb0\051\uffb0\063\uffb0\065\uffb0" +
    "\075\uffb0\103\uffb0\001\002\000\074\006\uffb2\011\uffb2\013" +
    "\uffb2\015\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\046\uffb2\050\uffb2\051\uffb2\063\uffb2\065\uffb2\075\uffb2\103" +
    "\uffb2\001\002\000\020\010\034\012\012\014\040\016\041" +
    "\017\045\021\047\050\215\001\002\000\016\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\001\002\000\006" +
    "\006\176\051\175\001\002\000\074\006\uffb1\011\uffb1\013" +
    "\uffb1\015\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\046\uffb1\050\uffb1\051\uffb1\063\uffb1\065\uffb1\075\uffb1\103" +
    "\uffb1\001\002\000\004\032\117\001\002\000\074\006\uffaf" +
    "\011\uffaf\013\uffaf\015\uffaf\020\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\046\uffaf\050\uffaf\051\uffaf\063\uffaf\065\uffaf" +
    "\075\uffaf\103\uffaf\001\002\000\016\010\034\012\012\014" +
    "\040\016\041\017\045\021\047\001\002\000\066\005\ufff6" +
    "\010\ufff6\012\ufff6\014\ufff6\016\ufff6\017\ufff6\021\ufff6\045" +
    "\ufff6\052\ufff6\053\ufff6\056\ufff6\061\ufff6\062\ufff6\064\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\001\002" +
    "\000\026\011\062\013\057\015\054\020\061\022\065\023" +
    "\060\024\064\025\056\030\053\031\063\001\002\000\004" +
    "\026\114\001\002\000\024\010\uffcb\012\uffcb\014\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\032\uffcb\047\uffcb\075\uffcb\001\002" +
    "\000\006\032\073\075\074\001\002\000\016\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\001\002\000\024" +
    "\010\uffca\012\uffca\014\uffca\016\uffca\017\uffca\021\uffca\032" +
    "\uffca\047\uffca\075\uffca\001\002\000\016\010\034\012\012" +
    "\014\040\016\041\017\045\021\047\001\002\000\024\010" +
    "\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\032\uffc9" +
    "\047\uffc9\075\uffc9\001\002\000\024\010\uffcc\012\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\032\uffcc\047\uffcc\075\uffcc" +
    "\001\002\000\016\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\001\002\000\016\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\001\002\000\016\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\001\002\000\072" +
    "\006\uffba\011\uffba\013\uffba\015\uffba\020\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\046\uffba\050\uffba\051\uffba\063\uffba\065\uffba" +
    "\075\uffba\103\uffba\001\002\000\072\006\uffb7\011\uffb7\013" +
    "\uffb7\015\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\063\uffb7\065\uffb7\075\uffb7\103\uffb7\001" +
    "\002\000\072\006\uffb5\011\uffb5\013\uffb5\015\uffb5\020\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\046\uffb5\050\uffb5\051\uffb5\063" +
    "\uffb5\065\uffb5\075\uffb5\103\uffb5\001\002\000\072\006\uffb9" +
    "\011\uffb9\013\uffb9\015\uffb9\020\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\046\uffb9\050\uffb9\051\uffb9\063\uffb9\065\uffb9\075\uffb9" +
    "\103\uffb9\001\002\000\072\006\uffb6\011\uffb6\013\uffb6\015" +
    "\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6\050\uffb6" +
    "\051\uffb6\063\uffb6\065\uffb6\075\uffb6\103\uffb6\001\002\000" +
    "\004\033\111\001\002\000\004\032\075\001\002\000\012" +
    "\011\062\013\057\015\054\020\061\001\002\000\044\010" +
    "\034\012\012\014\040\016\041\017\045\021\047\045\032" +
    "\052\046\062\011\066\023\070\013\072\042\073\007\076" +
    "\050\100\043\101\017\102\014\001\002\000\046\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\045\032\052" +
    "\046\062\011\066\023\070\013\072\042\073\007\076\050" +
    "\077\101\100\043\101\017\102\014\001\002\000\066\005" +
    "\ufffd\010\ufffd\012\ufffd\014\ufffd\016\ufffd\017\ufffd\021\ufffd" +
    "\045\ufffd\052\ufffd\053\ufffd\056\ufffd\061\ufffd\062\ufffd\064" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\001" +
    "\002\000\066\005\uffde\010\uffde\012\uffde\014\uffde\016\uffde" +
    "\017\uffde\021\uffde\045\uffde\052\uffde\053\uffde\056\uffde\061" +
    "\uffde\062\uffde\064\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\076\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\001\002\000\006\033\uffda\051\uffda\001\002" +
    "\000\016\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\001\002\000\006\033\105\051\106\001\002\000\044" +
    "\010\uffdc\012\uffdc\014\uffdc\016\uffdc\017\uffdc\021\uffdc\045" +
    "\uffdc\052\uffdc\062\uffdc\066\uffdc\070\uffdc\072\uffdc\073\uffdc" +
    "\076\uffdc\100\uffdc\101\uffdc\102\uffdc\001\002\000\012\011" +
    "\062\013\057\015\054\020\061\001\002\000\006\033\uffdb" +
    "\051\uffdb\001\002\000\022\022\065\023\060\024\064\025" +
    "\056\030\053\031\063\033\uffd9\051\uffd9\001\002\000\044" +
    "\010\034\012\012\014\040\016\041\017\045\021\047\045" +
    "\032\052\046\062\011\066\023\070\013\072\042\073\007" +
    "\076\050\100\043\101\017\102\014\001\002\000\046\010" +
    "\034\012\012\014\040\016\041\017\045\021\047\045\032" +
    "\052\046\062\011\066\023\070\013\072\042\073\007\076" +
    "\050\077\113\100\043\101\017\102\014\001\002\000\066" +
    "\005\uffd5\010\uffd5\012\uffd5\014\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\045\uffd5\052\uffd5\053\uffd5\056\uffd5\061\uffd5\062\uffd5" +
    "\064\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5" +
    "\001\002\000\016\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\001\002\000\004\027\116\001\002\000\072" +
    "\006\uffb8\011\uffb8\013\uffb8\015\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\046\uffb8\050\uffb8\051\uffb8\063\uffb8\065\uffb8" +
    "\075\uffb8\103\uffb8\001\002\000\020\010\034\012\012\014" +
    "\040\016\041\017\045\021\047\044\120\001\002\000\004" +
    "\032\172\001\002\000\010\033\uffc1\042\uffc1\043\uffc1\001" +
    "\002\000\010\033\140\042\142\043\141\001\002\000\032" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\034" +
    "\131\035\126\036\127\037\124\040\125\041\130\001\002" +
    "\000\016\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\001\002\000\016\010\034\012\012\014\040\016\041" +
    "\017\045\021\047\001\002\000\016\010\034\012\012\014" +
    "\040\016\041\017\045\021\047\001\002\000\016\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\001\002\000" +
    "\016\010\034\012\012\014\040\016\041\017\045\021\047" +
    "\001\002\000\016\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\001\002\000\024\022\065\023\060\024\064" +
    "\025\056\030\053\031\063\033\uffbd\042\uffbd\043\uffbd\001" +
    "\002\000\024\022\065\023\060\024\064\025\056\030\053" +
    "\031\063\033\uffbc\042\uffbc\043\uffbc\001\002\000\024\022" +
    "\065\023\060\024\064\025\056\030\053\031\063\033\uffbf" +
    "\042\uffbf\043\uffbf\001\002\000\024\022\065\023\060\024" +
    "\064\025\056\030\053\031\063\033\uffc0\042\uffc0\043\uffc0" +
    "\001\002\000\024\022\065\023\060\024\064\025\056\030" +
    "\053\031\063\033\uffbb\042\uffbb\043\uffbb\001\002\000\024" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\033" +
    "\uffbe\042\uffbe\043\uffbe\001\002\000\004\057\145\001\002" +
    "\000\016\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\001\002\000\016\010\034\012\012\014\040\016\041" +
    "\017\045\021\047\001\002\000\010\033\uffc2\042\uffc2\043" +
    "\uffc2\001\002\000\010\033\uffc3\042\uffc3\043\uffc3\001\002" +
    "\000\044\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\045\032\052\046\062\011\066\023\070\013\072\042" +
    "\073\007\076\050\100\043\101\017\102\014\001\002\000" +
    "\052\010\034\012\012\014\040\016\041\017\045\021\047" +
    "\045\032\052\046\053\152\056\151\061\147\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\066\005\uffe4\010\uffe4\012\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\045\uffe4\052\uffe4\053\uffe4" +
    "\056\uffe4\061\uffe4\062\uffe4\064\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\001\002\000\010\053\162\056" +
    "\161\061\163\001\002\000\044\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\004\032\153\001\002\000\020\010" +
    "\034\012\012\014\040\016\041\017\045\021\047\044\120" +
    "\001\002\000\010\033\155\042\142\043\141\001\002\000" +
    "\004\057\156\001\002\000\044\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\052\010\034\012\012\014\040\016" +
    "\041\017\045\021\047\045\032\052\046\053\uffe0\056\uffe0" +
    "\061\uffe0\062\011\066\023\070\013\072\042\073\007\076" +
    "\050\100\043\101\017\102\014\001\002\000\052\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\045\032\052" +
    "\046\053\uffdf\056\uffdf\061\uffdf\062\011\066\023\070\013" +
    "\072\042\073\007\076\050\100\043\101\017\102\014\001" +
    "\002\000\044\010\034\012\012\014\040\016\041\017\045" +
    "\021\047\045\032\052\046\062\011\066\023\070\013\072" +
    "\042\073\007\076\050\100\043\101\017\102\014\001\002" +
    "\000\004\032\164\001\002\000\066\005\uffe3\010\uffe3\012" +
    "\uffe3\014\uffe3\016\uffe3\017\uffe3\021\uffe3\045\uffe3\052\uffe3" +
    "\053\uffe3\056\uffe3\061\uffe3\062\uffe3\064\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\001\002\000\020\010" +
    "\034\012\012\014\040\016\041\017\045\021\047\044\120" +
    "\001\002\000\010\033\166\042\142\043\141\001\002\000" +
    "\004\057\167\001\002\000\044\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\052\010\034\012\012\014\040\016" +
    "\041\017\045\021\047\045\032\052\046\053\uffe2\056\uffe2" +
    "\061\uffe2\062\011\066\023\070\013\072\042\073\007\076" +
    "\050\100\043\101\017\102\014\001\002\000\052\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\045\032\052" +
    "\046\053\uffe1\056\uffe1\061\uffe1\062\011\066\023\070\013" +
    "\072\042\073\007\076\050\100\043\101\017\102\014\001" +
    "\002\000\020\010\034\012\012\014\040\016\041\017\045" +
    "\021\047\044\120\001\002\000\010\033\174\042\142\043" +
    "\141\001\002\000\010\033\uffc4\042\uffc4\043\uffc4\001\002" +
    "\000\016\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\001\002\000\016\010\034\012\012\014\040\016\041" +
    "\017\045\021\047\001\002\000\020\022\065\023\060\024" +
    "\064\025\056\030\053\031\063\050\200\001\002\000\066" +
    "\005\uffcd\010\uffcd\012\uffcd\014\uffcd\016\uffcd\017\uffcd\021" +
    "\uffcd\045\uffcd\052\uffcd\053\uffcd\056\uffcd\061\uffcd\062\uffcd" +
    "\064\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\001\002\000\024\006\uffc7\022\065\023\060\024\064\025" +
    "\056\030\053\031\063\046\uffc7\051\uffc7\001\002\000\020" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\032" +
    "\204\001\002\000\004\050\214\001\002\000\020\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\033\205\001" +
    "\002\000\004\050\213\001\002\000\006\033\210\051\211" +
    "\001\002\000\022\022\065\023\060\024\064\025\056\030" +
    "\053\031\063\033\uffd6\051\uffd6\001\002\000\004\050\uffd8" +
    "\001\002\000\016\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\001\002\000\022\022\065\023\060\024\064" +
    "\025\056\030\053\031\063\033\uffd7\051\uffd7\001\002\000" +
    "\066\005\uffd0\010\uffd0\012\uffd0\014\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\045\uffd0\052\uffd0\053\uffd0\056\uffd0\061\uffd0\062" +
    "\uffd0\064\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\001\002\000\066\005\uffd1\010\uffd1\012\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\045\uffd1\052\uffd1\053\uffd1\056" +
    "\uffd1\061\uffd1\062\uffd1\064\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\101\uffd1\102\uffd1\001\002\000\066\005\uffd2\010\uffd2" +
    "\012\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\045\uffd2\052" +
    "\uffd2\053\uffd2\056\uffd2\061\uffd2\062\uffd2\064\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\076" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\001\002\000\020" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\050" +
    "\217\001\002\000\066\005\uffd3\010\uffd3\012\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\045\uffd3\052\uffd3\053\uffd3\056" +
    "\uffd3\061\uffd3\062\uffd3\064\uffd3\066\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\074\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\001\002\000\004\010\221\001\002" +
    "\000\074\006\uffc5\011\uffc5\013\uffc5\015\uffc5\020\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffc5\050\uffc5\051\uffc5" +
    "\063\uffc5\065\uffc5\075\uffc5\103\uffc5\001\002\000\006\046" +
    "\223\051\175\001\002\000\012\011\062\013\057\015\054" +
    "\020\061\001\002\000\004\047\225\001\002\000\016\010" +
    "\034\012\012\014\040\016\041\017\045\021\047\001\002" +
    "\000\020\022\065\023\060\024\064\025\056\030\053\031" +
    "\063\050\227\001\002\000\066\005\uffc8\010\uffc8\012\uffc8" +
    "\014\uffc8\016\uffc8\017\uffc8\021\uffc8\045\uffc8\052\uffc8\053" +
    "\uffc8\056\uffc8\061\uffc8\062\uffc8\064\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000\020\010\034" +
    "\012\012\014\040\016\231\017\232\021\047\044\120\001" +
    "\002\000\034\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2" +
    "\031\uffb2\033\uffeb\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\001\002\000\034\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\030\uffb1\031\uffb1\033\uffea\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000\010\033\uffe9" +
    "\042\142\043\141\001\002\000\004\033\235\001\002\000" +
    "\044\010\034\012\012\014\040\016\041\017\045\021\047" +
    "\045\032\052\046\062\011\066\023\070\013\072\042\073" +
    "\007\076\050\100\043\101\017\102\014\001\002\000\046" +
    "\010\034\012\012\014\040\016\041\017\045\021\047\045" +
    "\032\052\046\062\011\066\023\067\237\070\013\072\042" +
    "\073\007\076\050\100\043\101\017\102\014\001\002\000" +
    "\066\005\uffed\010\uffed\012\uffed\014\uffed\016\uffed\017\uffed" +
    "\021\uffed\045\uffed\052\uffed\053\uffed\056\uffed\061\uffed\062" +
    "\uffed\064\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\073\uffed\074\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102" +
    "\uffed\001\002\000\004\002\uffff\001\002\000\016\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\001\002\000" +
    "\020\022\065\023\060\024\064\025\056\030\053\031\063" +
    "\033\243\001\002\000\004\050\244\001\002\000\066\005" +
    "\uffcf\010\uffcf\012\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf" +
    "\045\uffcf\052\uffcf\053\uffcf\056\uffcf\061\uffcf\062\uffcf\064" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001" +
    "\002\000\016\010\034\012\012\014\040\016\041\017\045" +
    "\021\047\001\002\000\020\022\065\023\060\024\064\025" +
    "\056\030\053\031\063\033\247\001\002\000\004\050\250" +
    "\001\002\000\066\005\uffce\010\uffce\012\uffce\014\uffce\016" +
    "\uffce\017\uffce\021\uffce\045\uffce\052\uffce\053\uffce\056\uffce" +
    "\061\uffce\062\uffce\064\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\076\uffce\077\uffce\100\uffce" +
    "\101\uffce\102\uffce\001\002\000\046\010\034\012\012\014" +
    "\040\016\041\017\045\021\047\045\032\052\046\062\011" +
    "\066\023\070\013\071\252\072\042\073\007\076\050\100" +
    "\043\101\017\102\014\001\002\000\004\032\253\001\002" +
    "\000\020\010\034\012\012\014\040\016\231\017\232\021" +
    "\047\044\120\001\002\000\004\033\255\001\002\000\004" +
    "\050\256\001\002\000\066\005\uffec\010\uffec\012\uffec\014" +
    "\uffec\016\uffec\017\uffec\021\uffec\045\uffec\052\uffec\053\uffec" +
    "\056\uffec\061\uffec\062\uffec\064\uffec\066\uffec\067\uffec\070" +
    "\uffec\071\uffec\072\uffec\073\uffec\074\uffec\076\uffec\077\uffec" +
    "\100\uffec\101\uffec\102\uffec\001\002\000\020\006\260\022" +
    "\065\023\060\024\064\025\056\030\053\031\063\001\002" +
    "\000\016\010\034\012\012\014\040\016\041\017\045\021" +
    "\047\001\002\000\020\022\065\023\060\024\064\025\056" +
    "\030\053\031\063\063\262\001\002\000\016\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\001\002\000\022" +
    "\022\065\023\060\024\064\025\056\030\053\031\063\065" +
    "\264\103\265\001\002\000\044\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\004\012\266\001\002\000\004\065" +
    "\267\001\002\000\044\010\034\012\012\014\040\016\041" +
    "\017\045\021\047\045\032\052\046\062\011\066\023\070" +
    "\013\072\042\073\007\076\050\100\043\101\017\102\014" +
    "\001\002\000\046\010\034\012\012\014\040\016\041\017" +
    "\045\021\047\045\032\052\046\062\011\064\271\066\023" +
    "\070\013\072\042\073\007\076\050\100\043\101\017\102" +
    "\014\001\002\000\066\005\uffee\010\uffee\012\uffee\014\uffee" +
    "\016\uffee\017\uffee\021\uffee\045\uffee\052\uffee\053\uffee\056" +
    "\uffee\061\uffee\062\uffee\064\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\001\002\000\046\010\034\012\012" +
    "\014\040\016\041\017\045\021\047\045\032\052\046\062" +
    "\011\064\273\066\023\070\013\072\042\073\007\076\050" +
    "\100\043\101\017\102\014\001\002\000\066\005\uffef\010" +
    "\uffef\012\uffef\014\uffef\016\uffef\017\uffef\021\uffef\045\uffef" +
    "\052\uffef\053\uffef\056\uffef\061\uffef\062\uffef\064\uffef\066" +
    "\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef" +
    "\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\001\002\000" +
    "\022\022\065\023\060\024\064\025\056\030\053\031\063" +
    "\032\275\075\276\001\002\000\004\033\302\001\002\000" +
    "\004\032\075\001\002\000\044\010\034\012\012\014\040" +
    "\016\041\017\045\021\047\045\032\052\046\062\011\066" +
    "\023\070\013\072\042\073\007\076\050\100\043\101\017" +
    "\102\014\001\002\000\046\010\034\012\012\014\040\016" +
    "\041\017\045\021\047\045\032\052\046\062\011\066\023" +
    "\070\013\072\042\073\007\074\301\076\050\100\043\101" +
    "\017\102\014\001\002\000\066\005\uffdd\010\uffdd\012\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\021\uffdd\045\uffdd\052\uffdd\053" +
    "\uffdd\056\uffdd\061\uffdd\062\uffdd\064\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\076\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\001\002\000\044\010\034" +
    "\012\012\014\040\016\041\017\045\021\047\045\032\052" +
    "\046\062\011\066\023\070\013\072\042\073\007\076\050" +
    "\100\043\101\017\102\014\001\002\000\046\010\034\012" +
    "\012\014\040\016\041\017\045\021\047\045\032\052\046" +
    "\062\011\066\023\070\013\072\042\073\007\074\304\076" +
    "\050\100\043\101\017\102\014\001\002\000\066\005\uffd4" +
    "\010\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4\045" +
    "\uffd4\052\uffd4\053\uffd4\056\uffd4\061\uffd4\062\uffd4\064\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\021\010\007\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\010\025\273\040\032\041" +
    "\026\001\001\000\002\001\001\000\010\025\256\040\032" +
    "\041\026\001\001\000\002\001\001\000\046\003\250\010" +
    "\007\011\017\012\025\013\023\014\034\015\036\016\050" +
    "\017\030\020\024\021\014\022\027\023\020\024\015\025" +
    "\035\036\043\040\032\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\010\077\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\035\036" +
    "\221\040\032\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\215" +
    "\040\032\041\026\001\001\000\010\025\201\040\032\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\051\040\032\041" +
    "\026\001\001\000\002\001\001\000\004\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\071\041\026\001\001\000\002\001\001\000\006" +
    "\040\070\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\067\041\026\001\001\000\006\040\066" +
    "\041\026\001\001\000\006\040\065\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\075\001\001\000\010\030\102\032\103\033\101\001\001" +
    "\000\046\003\076\010\007\011\017\012\025\013\023\014" +
    "\034\015\036\016\050\017\030\020\024\021\014\022\027" +
    "\023\020\024\015\025\035\036\043\040\032\041\026\001" +
    "\001\000\044\010\077\011\017\012\025\013\023\014\034" +
    "\015\036\016\050\017\030\020\024\021\014\022\027\023" +
    "\020\024\015\025\035\036\043\040\032\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\107\040\032\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\102\033\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\111\010\007" +
    "\011\017\012\025\013\023\014\034\015\036\016\050\017" +
    "\030\020\024\021\014\022\027\023\020\024\015\025\035" +
    "\036\043\040\032\041\026\001\001\000\044\010\077\011" +
    "\017\012\025\013\023\014\034\015\036\016\050\017\030" +
    "\020\024\021\014\022\027\023\020\024\015\025\035\036" +
    "\043\040\032\041\026\001\001\000\002\001\001\000\006" +
    "\040\114\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\122\027\121\037\120\040\032\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\136\040\032\041\026" +
    "\001\001\000\010\025\135\040\032\041\026\001\001\000" +
    "\010\025\134\040\032\041\026\001\001\000\010\025\133" +
    "\040\032\041\026\001\001\000\010\025\132\040\032\041" +
    "\026\001\001\000\010\025\131\040\032\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\122\037\143\040\032\041\026\001" +
    "\001\000\012\025\122\037\142\040\032\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\145\010" +
    "\007\011\017\012\025\013\023\014\034\015\036\016\050" +
    "\017\030\020\024\021\014\022\027\023\020\024\015\025" +
    "\035\036\043\040\032\041\026\001\001\000\046\005\147" +
    "\010\077\011\017\012\025\013\023\014\034\015\036\016" +
    "\050\017\030\020\024\021\014\022\027\023\020\024\015" +
    "\025\035\036\043\040\032\041\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\157\010\007\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\002\001\001\000\014\025" +
    "\122\027\153\037\120\040\032\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\156\010\007\011" +
    "\017\012\025\013\023\014\034\015\036\016\050\017\030" +
    "\020\024\021\014\022\027\023\020\024\015\025\035\036" +
    "\043\040\032\041\026\001\001\000\044\010\077\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\044\010\077\011\017\012" +
    "\025\013\023\014\034\015\036\016\050\017\030\020\024" +
    "\021\014\022\027\023\020\024\015\025\035\036\043\040" +
    "\032\041\026\001\001\000\046\003\170\010\007\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\122\027\164\037\120\040\032\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\167\010\007\011\017\012\025\013\023\014\034\015\036" +
    "\016\050\017\030\020\024\021\014\022\027\023\020\024" +
    "\015\025\035\036\043\040\032\041\026\001\001\000\044" +
    "\010\077\011\017\012\025\013\023\014\034\015\036\016" +
    "\050\017\030\020\024\021\014\022\027\023\020\024\015" +
    "\025\035\036\043\040\032\041\026\001\001\000\044\010" +
    "\077\011\017\012\025\013\023\014\034\015\036\016\050" +
    "\017\030\020\024\021\014\022\027\023\020\024\015\025" +
    "\035\036\043\040\032\041\026\001\001\000\014\025\122" +
    "\027\172\037\120\040\032\041\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\200\040\032\041\026" +
    "\001\001\000\010\025\176\040\032\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\202\001\001\000\002\001\001\000\012\025\206\035" +
    "\205\040\032\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\211\040\032\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\223\001\001\000\002\001" +
    "\001\000\010\025\225\040\032\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\025\122\026\233\027" +
    "\232\037\120\040\032\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\235\010\007\011\017\012\025\013\023\014\034" +
    "\015\036\016\050\017\030\020\024\021\014\022\027\023" +
    "\020\024\015\025\035\036\043\040\032\041\026\001\001" +
    "\000\044\010\077\011\017\012\025\013\023\014\034\015" +
    "\036\016\050\017\030\020\024\021\014\022\027\023\020" +
    "\024\015\025\035\036\043\040\032\041\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\241\040\032" +
    "\041\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\245\040\032\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\010\077\011\017\012\025\013\023\014\034\015\036" +
    "\016\050\017\030\020\024\021\014\022\027\023\020\024" +
    "\015\025\035\036\043\040\032\041\026\001\001\000\002" +
    "\001\001\000\016\025\122\026\253\027\232\037\120\040" +
    "\032\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\260\040" +
    "\032\041\026\001\001\000\002\001\001\000\010\025\262" +
    "\040\032\041\026\001\001\000\002\001\001\000\046\003" +
    "\271\010\007\011\017\012\025\013\023\014\034\015\036" +
    "\016\050\017\030\020\024\021\014\022\027\023\020\024" +
    "\015\025\035\036\043\040\032\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\267\010\007\011" +
    "\017\012\025\013\023\014\034\015\036\016\050\017\030" +
    "\020\024\021\014\022\027\023\020\024\015\025\035\036" +
    "\043\040\032\041\026\001\001\000\044\010\077\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\002\001\001\000\044\010" +
    "\077\011\017\012\025\013\023\014\034\015\036\016\050" +
    "\017\030\020\024\021\014\022\027\023\020\024\015\025" +
    "\035\036\043\040\032\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\276\001" +
    "\001\000\046\003\277\010\007\011\017\012\025\013\023" +
    "\014\034\015\036\016\050\017\030\020\024\021\014\022" +
    "\027\023\020\024\015\025\035\036\043\040\032\041\026" +
    "\001\001\000\044\010\077\011\017\012\025\013\023\014" +
    "\034\015\036\016\050\017\030\020\024\021\014\022\027" +
    "\023\020\024\015\025\035\036\043\040\032\041\026\001" +
    "\001\000\002\001\001\000\046\003\302\010\007\011\017" +
    "\012\025\013\023\014\034\015\036\016\050\017\030\020" +
    "\024\021\014\022\027\023\020\024\015\025\035\036\043" +
    "\040\032\041\026\001\001\000\044\010\077\011\017\012" +
    "\025\013\023\014\034\015\036\016\050\017\030\020\024" +
    "\021\014\022\027\023\020\024\015\025\035\036\043\040" +
    "\032\041\026\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$as$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$as$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$as$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$as$actions {
  private final as parser;

  /** Constructor */
  CUP$as$actions(as parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$as$do_action_part00000000(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$as$result;

      /* select the action based on the action number */
      switch (CUP$as$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		RESULT = start_val;
              CUP$as$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$as$parser.done_parsing();
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PRINCIPAL ::= inicio INSTRUCCIONES finall 
            {
              Object RESULT =null;
		System.out.println("TERMINO BLOQUE PRINCIPAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_PRINCIPAL ::= inicio 
            {
              Object RESULT =null;
		System.out.println("TERMINO BLOQUE PRINCIPAL");
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",32, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		System.out.println("ENCONTRO DECLARACION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		System.out.println("encontro impresion linea simple");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IMPRIMIRLN 
            {
              Object RESULT =null;
		System.out.println("encontro impresion multipe linea");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		System.out.println("encontro ASIGNACION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		System.out.println("encontro METODO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		System.out.println("encontro FUNCION");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= METODOsp 
            {
              Object RESULT =null;
		System.out.println("encontro METODOSP");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONsp 
            {
              Object RESULT =null;
		System.out.println("encontro FUNCIONSP");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CONDICIONIF 
            {
              Object RESULT =null;
		System.out.println("encontro CONDICION IF");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;
		System.out.println("encontro CICLO");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("encontro RETURN");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= CALL 
            {
              Object RESULT =null;
		System.out.println("encontro LLAMADA");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CICLO ::= para E flechita E hasta E hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CICLO ::= para E flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CICLO ::= mientras abre_parentesis COND_WHILE cierra_parentesis INSTRUCCIONES fin_mientras 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CICLO ::= repetir INSTRUCCIONES hasta_que abre_parentesis COND_WHILE cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND_WHILE ::= verdadero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COND_WHILE ::= falso 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COND_WHILE ::= COMPARACIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH ::= segun E hacer OPCIONES de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("SWITCH",4, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCIONES ::= OPCIONES OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCIONES ::= OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= abre_pregunta E cierra_pregunta entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCION",2, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES IFANIDADOS fin_si 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFANIDADOS ::= IFANIDADOS o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFANIDADOS ::= IFANIDADOS de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFANIDADOS ::= o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFANIDADOS ::= de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= funcion E TIPODATO_DECLARACION con_parametros PARAMETROS INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= metodo E con_parametros PARAMETROS INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= abre_parentesis PARS cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARS ::= PARS coma PAR 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARS ::= PAR 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PAR ::= TIPODATO_DECLARACION E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PAR",25, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROSLL",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARSLL ::= PARSLL coma E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARSLL ::= E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONsp ::= funcion E TIPODATO_DECLARACION abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCIONsp",14, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODOsp ::= metodo E abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("METODOsp",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETURN ::= retornar E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETURN ::= retornar punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CALL ::= ejecutar E PARAMETROSLL punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CALL ::= ejecutar E abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIR ::= imprimir abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMPRIMIRLN ::= imprimir_nl abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= IDS flechita E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPODATO_DECLARACION ::= numero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPODATO_DECLARACION ::= bulean 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPODATO_DECLARACION ::= cadena 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPODATO_DECLARACION ::= caracter 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= ingresar IDS como TIPODATO_DECLARACION con_valor E punto_y_coma 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDS ::= IDS coma E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDS ::= E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLE ::= guion id guion 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("VARIABLE",31, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPARACIONES ::= not abre_parentesis COMPARACIONES cierra_parentesis 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMPARACIONES ::= COMPARACIONES and COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMPARACIONES ::= COMPARACIONES or COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMP ::= E menor E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMP ::= E mayor_o_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMP ::= E menor_o_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMP ::= E mayor E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMP ::= E es_diferente E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COMP ::= E es_igual E 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E mas F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E menos F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E potencia abre_corchete F cierra_corchete 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E por F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E dividido F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E mod F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= F 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // F ::= number 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= verdadero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= falso 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= frase 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= frasecita 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // F ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$as$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$as$do_action(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
              return CUP$as$do_action_part00000000(
                               CUP$as$act_num,
                               CUP$as$parser,
                               CUP$as$stack,
                               CUP$as$top);
    }
}

}
