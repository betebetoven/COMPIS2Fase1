
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import com.company.error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class as extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public as() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public as(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public as(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\042" +
    "\005\000\002\003\004\000\002\003\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\022\013" +
    "\000\002\022\015\000\002\022\011\000\002\022\011\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\006\012\000\002\007\004\000\002\007\003\000\002\004" +
    "\007\000\002\021\011\000\002\021\012\000\002\005\011" +
    "\000\002\005\005\000\002\005\010\000\002\005\004\000" +
    "\002\016\011\000\002\015\010\000\002\031\005\000\002" +
    "\032\005\000\002\032\003\000\002\033\004\000\002\034" +
    "\005\000\002\035\005\000\002\035\003\000\002\020\011" +
    "\000\002\017\010\000\002\023\007\000\002\023\006\000" +
    "\002\023\007\000\002\024\006\000\002\024\007\000\002" +
    "\012\007\000\002\012\007\000\002\013\007\000\002\013" +
    "\007\000\002\014\006\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\011\011\000" +
    "\002\036\005\000\002\036\003\000\002\041\003\000\002" +
    "\027\006\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\007\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\004\006\001\002\000\004\002\340\001" +
    "\002\000\004\002\000\001\002\000\046\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\046\043\053\022\063" +
    "\030\067\023\071\021\073\045\074\031\077\032\101\050" +
    "\102\010\103\036\105\040\001\002\000\076\006\uffad\012" +
    "\uffad\014\uffad\016\uffad\021\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\047\uffad\051\uffad\052\uffad\056\uffad\064\uffad\066" +
    "\uffad\076\uffad\104\uffad\001\002\000\004\033\331\001\002" +
    "\000\074\005\ufffb\010\ufffb\013\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\022\ufffb\046\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\065\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\102\ufffb\103\ufffb\105\ufffb\001\002\000\074\005" +
    "\ufff7\010\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\046\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\103\ufff7\105\ufff7\001\002\000\074\005\ufff8\010\ufff8" +
    "\013\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8\046\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074" +
    "\ufff8\075\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8" +
    "\105\ufff8\001\002\000\074\005\ufffd\010\ufffd\013\ufffd\015" +
    "\ufffd\017\ufffd\020\ufffd\022\ufffd\046\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\057\ufffd\061\ufffd\062\ufffd\063\ufffd\065\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\105\ufffd\001" +
    "\002\000\074\005\ufff3\010\ufff3\013\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\022\ufff3\046\ufff3\053\ufff3\054\ufff3\055\ufff3\057" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\100" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\105\ufff3\001\002\000\050" +
    "\005\330\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\046\043\053\022\063\030\067\023\071\021\073\045" +
    "\074\031\077\032\101\050\102\010\103\036\105\040\001" +
    "\002\000\074\006\uffb1\012\uffb1\014\uffb1\016\uffb1\021\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\047\uffb1\051\uffb1\052\uffb1\056" +
    "\uffb1\064\uffb1\066\uffb1\076\uffb1\104\uffb1\001\002\000\024" +
    "\006\uffc3\023\061\024\062\025\055\026\064\031\063\032" +
    "\060\047\uffc3\052\uffc3\001\002\000\046\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\046\043\053\022\063" +
    "\030\067\023\071\021\073\045\074\031\077\032\101\050" +
    "\102\010\103\036\105\040\001\002\000\004\033\272\001" +
    "\002\000\004\033\233\001\002\000\074\005\ufff1\010\ufff1" +
    "\013\ufff1\015\ufff1\017\ufff1\020\ufff1\022\ufff1\046\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1" +
    "\105\ufff1\001\002\000\006\006\230\052\120\001\002\000" +
    "\074\005\ufff2\010\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2" +
    "\022\ufff2\046\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\077\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\105\ufff2\001\002\000\076\006\uffaf" +
    "\012\uffaf\014\uffaf\016\uffaf\021\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\047\uffaf\051\uffaf\052\uffaf\056\uffaf\064\uffaf" +
    "\066\uffaf\076\uffaf\104\uffaf\001\002\000\016\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\001\002\000\016" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\001" +
    "\002\000\016\010\042\013\052\015\007\017\027\020\037" +
    "\022\047\001\002\000\074\005\ufff9\010\ufff9\013\ufff9\015" +
    "\ufff9\017\ufff9\020\ufff9\022\ufff9\046\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\105\ufff9\001" +
    "\002\000\074\005\ufff0\010\ufff0\013\ufff0\015\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\046\ufff0\053\ufff0\054\ufff0\055\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\077\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\105\ufff0\001\002\000\074" +
    "\005\ufffc\010\ufffc\013\ufffc\015\ufffc\017\ufffc\020\ufffc\022" +
    "\ufffc\046\ufffc\053\ufffc\054\ufffc\055\ufffc\057\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\077\ufffc\100\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\105\ufffc\001\002\000\004\033\151\001" +
    "\002\000\076\006\uffae\012\uffae\014\uffae\016\uffae\021\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\047\uffae\051\uffae\052" +
    "\uffae\056\uffae\064\uffae\066\uffae\076\uffae\104\uffae\001\002" +
    "\000\016\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\001\002\000\076\006\uffab\012\uffab\014\uffab\016\uffab" +
    "\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\047\uffab\051" +
    "\uffab\052\uffab\056\uffab\064\uffab\066\uffab\076\uffab\104\uffab" +
    "\001\002\000\076\006\uffc2\012\uffc2\014\uffc2\016\uffc2\021" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\047\uffc2\051\uffc2" +
    "\052\uffc2\056\uffc2\064\uffc2\066\uffc2\076\uffc2\104\uffc2\001" +
    "\002\000\016\010\042\013\052\015\007\017\027\020\037" +
    "\022\047\001\002\000\074\005\ufff4\010\ufff4\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\022\ufff4\046\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\065\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\105\ufff4\001" +
    "\002\000\004\033\105\001\002\000\074\005\ufffa\010\ufffa" +
    "\013\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\046\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\057\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\065\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa" +
    "\105\ufffa\001\002\000\076\006\uffac\012\uffac\014\uffac\016" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\047\uffac" +
    "\051\uffac\052\uffac\056\uffac\064\uffac\066\uffac\076\uffac\104" +
    "\uffac\001\002\000\016\010\042\013\052\015\007\017\027" +
    "\020\037\022\047\001\002\000\074\005\ufff5\010\ufff5\013" +
    "\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5\046\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\057\ufff5\061\ufff5\062\ufff5\063\ufff5\065" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\075\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\105" +
    "\ufff5\001\002\000\076\006\uffb0\012\uffb0\014\uffb0\016\uffb0" +
    "\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\047\uffb0\051" +
    "\uffb0\052\uffb0\056\uffb0\064\uffb0\066\uffb0\076\uffb0\104\uffb0" +
    "\001\002\000\074\005\ufff6\010\ufff6\013\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\022\ufff6\046\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\057\ufff6\061\ufff6\062\ufff6\063\ufff6\065\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6" +
    "\100\ufff6\101\ufff6\102\ufff6\103\ufff6\105\ufff6\001\002\000" +
    "\020\023\061\024\062\025\055\026\064\031\063\032\060" +
    "\033\057\001\002\000\016\010\042\013\052\015\007\017" +
    "\027\020\037\022\047\001\002\000\004\051\103\001\002" +
    "\000\020\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\034\074\001\002\000\016\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\001\002\000\016\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\001\002\000\016" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\001" +
    "\002\000\004\027\066\001\002\000\016\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\001\002\000\074\006" +
    "\uffb3\012\uffb3\014\uffb3\016\uffb3\021\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\047\uffb3\051\uffb3\052\uffb3\056\uffb3\064\uffb3\066" +
    "\uffb3\076\uffb3\104\uffb3\001\002\000\016\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\001\002\000\004\030" +
    "\070\001\002\000\074\006\uffb5\012\uffb5\014\uffb5\016\uffb5" +
    "\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\047\uffb5\051\uffb5\052" +
    "\uffb5\056\uffb5\064\uffb5\066\uffb5\076\uffb5\104\uffb5\001\002" +
    "\000\074\006\uffb6\012\uffb6\014\uffb6\016\uffb6\021\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\047\uffb6\051\uffb6\052\uffb6\056\uffb6" +
    "\064\uffb6\066\uffb6\076\uffb6\104\uffb6\001\002\000\074\006" +
    "\uffb7\012\uffb7\014\uffb7\016\uffb7\021\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\047\uffb7\051\uffb7\052\uffb7\056\uffb7\064\uffb7\066" +
    "\uffb7\076\uffb7\104\uffb7\001\002\000\074\006\uffb2\012\uffb2" +
    "\014\uffb2\016\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\047" +
    "\uffb2\051\uffb2\052\uffb2\056\uffb2\064\uffb2\066\uffb2\076\uffb2" +
    "\104\uffb2\001\002\000\004\051\102\001\002\000\006\034" +
    "\077\052\100\001\002\000\022\023\061\024\062\025\055" +
    "\026\064\031\063\032\060\034\uffd6\052\uffd6\001\002\000" +
    "\004\051\uffd8\001\002\000\016\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\001\002\000\022\023\061\024" +
    "\062\025\055\026\064\031\063\032\060\034\uffd7\052\uffd7" +
    "\001\002\000\076\005\uffcf\010\uffcf\013\uffcf\015\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\034\uffcf\046\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\105\uffcf\001" +
    "\002\000\076\005\uffd0\010\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\034\uffd0\046\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\105\uffd0\001\002" +
    "\000\074\006\uffb4\012\uffb4\014\uffb4\016\uffb4\021\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\047\uffb4\051\uffb4\052\uffb4\056\uffb4" +
    "\064\uffb4\066\uffb4\076\uffb4\104\uffb4\001\002\000\022\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\034\106" +
    "\101\050\001\002\000\004\051\115\001\002\000\004\034" +
    "\113\001\002\000\020\023\061\024\062\025\055\026\064" +
    "\031\063\032\060\034\111\001\002\000\004\051\112\001" +
    "\002\000\074\005\uffd3\010\uffd3\013\uffd3\015\uffd3\017\uffd3" +
    "\020\uffd3\022\uffd3\046\uffd3\053\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\105\uffd3\001\002\000\004" +
    "\051\114\001\002\000\074\005\uffd1\010\uffd1\013\uffd1\015" +
    "\uffd1\017\uffd1\020\uffd1\022\uffd1\046\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\105\uffd1\001" +
    "\002\000\074\005\uffd2\010\uffd2\013\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\046\uffd2\053\uffd2\054\uffd2\055\uffd2\057" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\077\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\105\uffd2\001\002\000\006" +
    "\047\117\052\120\001\002\000\012\012\122\014\123\016" +
    "\125\021\126\001\002\000\016\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\001\002\000\024\006\uffc4\023" +
    "\061\024\062\025\055\026\064\031\063\032\060\047\uffc4" +
    "\052\uffc4\001\002\000\024\010\uffc9\013\uffc9\015\uffc9\017" +
    "\uffc9\020\uffc9\022\uffc9\033\uffc9\050\uffc9\076\uffc9\001\002" +
    "\000\024\010\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7\022" +
    "\uffc7\033\uffc7\050\uffc7\076\uffc7\001\002\000\004\050\127" +
    "\001\002\000\024\010\uffc8\013\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\022\uffc8\033\uffc8\050\uffc8\076\uffc8\001\002\000\024" +
    "\010\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\022\uffc6\033" +
    "\uffc6\050\uffc6\076\uffc6\001\002\000\016\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\001\002\000\020\023" +
    "\061\024\062\025\055\026\064\031\063\032\060\051\131" +
    "\001\002\000\074\005\uffc5\010\uffc5\013\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\022\uffc5\046\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\105\uffc5\001\002\000" +
    "\020\023\061\024\062\025\055\026\064\031\063\032\060" +
    "\066\133\001\002\000\004\055\134\001\002\000\016\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\001\002" +
    "\000\006\055\uffe6\057\uffe6\001\002\000\006\055\134\057" +
    "\140\001\002\000\006\055\uffe7\057\uffe7\001\002\000\004" +
    "\060\141\001\002\000\046\010\042\013\052\015\007\017" +
    "\027\020\037\022\047\046\043\053\022\063\030\067\023" +
    "\071\021\073\045\074\031\077\032\101\050\102\010\103" +
    "\036\105\040\001\002\000\050\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\046\043\053\022\061\144\063" +
    "\030\067\023\071\021\073\045\074\031\077\032\101\050" +
    "\102\010\103\036\105\040\001\002\000\074\005\ufffe\010" +
    "\ufffe\013\ufffe\015\ufffe\017\ufffe\020\ufffe\022\ufffe\046\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\057\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\074\ufffe\075\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103" +
    "\ufffe\105\ufffe\001\002\000\074\005\uffe8\010\uffe8\013\uffe8" +
    "\015\uffe8\017\uffe8\020\uffe8\022\uffe8\046\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\065\uffe8" +
    "\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\105\uffe8" +
    "\001\002\000\020\023\061\024\062\025\055\026\064\031" +
    "\063\032\060\056\146\001\002\000\004\060\147\001\002" +
    "\000\046\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\046\043\053\022\063\030\067\023\071\021\073\045" +
    "\074\031\077\032\101\050\102\010\103\036\105\040\001" +
    "\002\000\052\010\042\013\052\015\007\017\027\020\037" +
    "\022\047\046\043\053\022\055\uffe5\057\uffe5\063\030\067" +
    "\023\071\021\073\045\074\031\077\032\101\050\102\010" +
    "\103\036\105\040\001\002\000\020\010\042\013\052\015" +
    "\007\017\027\020\037\022\047\101\050\001\002\000\004" +
    "\034\156\001\002\000\020\023\061\024\062\025\055\026" +
    "\064\031\063\032\060\034\154\001\002\000\004\051\155" +
    "\001\002\000\074\005\uffcc\010\uffcc\013\uffcc\015\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\046\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\057\uffcc\061\uffcc\062\uffcc\063\uffcc\065\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\103\uffcc\105\uffcc\001\002\000" +
    "\004\051\157\001\002\000\074\005\uffcb\010\uffcb\013\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\022\uffcb\046\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\105\uffcb" +
    "\001\002\000\026\012\122\014\123\016\125\021\126\023" +
    "\061\024\062\025\055\026\064\031\063\032\060\001\002" +
    "\000\006\033\162\076\163\001\002\000\004\034\177\001" +
    "\002\000\004\033\164\001\002\000\012\012\122\014\123" +
    "\016\125\021\126\001\002\000\046\010\042\013\052\015" +
    "\007\017\027\020\037\022\047\046\043\053\022\063\030" +
    "\067\023\071\021\073\045\074\031\077\032\101\050\102" +
    "\010\103\036\105\040\001\002\000\050\010\042\013\052" +
    "\015\007\017\027\020\037\022\047\046\043\053\022\063" +
    "\030\067\023\071\021\073\045\074\031\077\032\100\167" +
    "\101\050\102\010\103\036\105\040\001\002\000\074\005" +
    "\uffde\010\uffde\013\uffde\015\uffde\017\uffde\020\uffde\022\uffde" +
    "\046\uffde\053\uffde\054\uffde\055\uffde\057\uffde\061\uffde\062" +
    "\uffde\063\uffde\065\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\077\uffde\100\uffde\101\uffde\102" +
    "\uffde\103\uffde\105\uffde\001\002\000\006\034\uffda\052\uffda" +
    "\001\002\000\016\010\042\013\052\015\007\017\027\020" +
    "\037\022\047\001\002\000\006\034\173\052\174\001\002" +
    "\000\046\010\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\046\uffdc\053\uffdc\063\uffdc\067\uffdc\071\uffdc\073\uffdc" +
    "\074\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc\105\uffdc\001" +
    "\002\000\012\012\122\014\123\016\125\021\126\001\002" +
    "\000\006\034\uffdb\052\uffdb\001\002\000\022\023\061\024" +
    "\062\025\055\026\064\031\063\032\060\034\uffd9\052\uffd9" +
    "\001\002\000\046\010\042\013\052\015\007\017\027\020" +
    "\037\022\047\046\043\053\022\063\030\067\023\071\021" +
    "\073\045\074\031\077\032\101\050\102\010\103\036\105" +
    "\040\001\002\000\050\010\042\013\052\015\007\017\027" +
    "\020\037\022\047\046\043\053\022\063\030\067\023\071" +
    "\021\073\045\074\031\077\032\100\201\101\050\102\010" +
    "\103\036\105\040\001\002\000\074\005\uffd5\010\uffd5\013" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\022\uffd5\046\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\057\uffd5\061\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\105" +
    "\uffd5\001\002\000\022\023\061\024\062\025\055\026\064" +
    "\031\063\032\060\033\203\076\204\001\002\000\004\034" +
    "\210\001\002\000\004\033\164\001\002\000\046\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\063\030\067\023\071\021\073\045\074\031\077\032" +
    "\101\050\102\010\103\036\105\040\001\002\000\050\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\046\043" +
    "\053\022\063\030\067\023\071\021\073\045\074\031\075" +
    "\207\077\032\101\050\102\010\103\036\105\040\001\002" +
    "\000\074\005\uffdd\010\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\022\uffdd\046\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\065\uffdd\067\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\103\uffdd\105\uffdd\001\002\000\046\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\046\043" +
    "\053\022\063\030\067\023\071\021\073\045\074\031\077" +
    "\032\101\050\102\010\103\036\105\040\001\002\000\050" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\046" +
    "\043\053\022\063\030\067\023\071\021\073\045\074\031" +
    "\075\212\077\032\101\050\102\010\103\036\105\040\001" +
    "\002\000\074\005\uffd4\010\uffd4\013\uffd4\015\uffd4\017\uffd4" +
    "\020\uffd4\022\uffd4\046\uffd4\053\uffd4\054\uffd4\055\uffd4\057" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\105\uffd4\001\002\000\020" +
    "\006\214\023\061\024\062\025\055\026\064\031\063\032" +
    "\060\001\002\000\016\010\042\013\052\015\007\017\027" +
    "\020\037\022\047\001\002\000\020\023\061\024\062\025" +
    "\055\026\064\031\063\032\060\064\216\001\002\000\016" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\001" +
    "\002\000\022\023\061\024\062\025\055\026\064\031\063" +
    "\032\060\066\220\104\221\001\002\000\046\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\046\043\053\022" +
    "\063\030\067\023\071\021\073\045\074\031\077\032\101" +
    "\050\102\010\103\036\105\040\001\002\000\004\013\222" +
    "\001\002\000\004\066\223\001\002\000\046\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\046\043\053\022" +
    "\063\030\067\023\071\021\073\045\074\031\077\032\101" +
    "\050\102\010\103\036\105\040\001\002\000\050\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\063\030\065\225\067\023\071\021\073\045\074\031" +
    "\077\032\101\050\102\010\103\036\105\040\001\002\000" +
    "\074\005\uffee\010\uffee\013\uffee\015\uffee\017\uffee\020\uffee" +
    "\022\uffee\046\uffee\053\uffee\054\uffee\055\uffee\057\uffee\061" +
    "\uffee\062\uffee\063\uffee\065\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee\100\uffee\101" +
    "\uffee\102\uffee\103\uffee\105\uffee\001\002\000\050\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\063\030\065\227\067\023\071\021\073\045\074\031" +
    "\077\032\101\050\102\010\103\036\105\040\001\002\000" +
    "\074\005\uffef\010\uffef\013\uffef\015\uffef\017\uffef\020\uffef" +
    "\022\uffef\046\uffef\053\uffef\054\uffef\055\uffef\057\uffef\061" +
    "\uffef\062\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\077\uffef\100\uffef\101" +
    "\uffef\102\uffef\103\uffef\105\uffef\001\002\000\016\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\001\002\000" +
    "\020\023\061\024\062\025\055\026\064\031\063\032\060" +
    "\051\232\001\002\000\074\005\uffca\010\uffca\013\uffca\015" +
    "\uffca\017\uffca\020\uffca\022\uffca\046\uffca\053\uffca\054\uffca" +
    "\055\uffca\057\uffca\061\uffca\062\uffca\063\uffca\065\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\105\uffca\001" +
    "\002\000\020\010\042\013\052\015\007\017\237\020\236" +
    "\022\047\045\234\001\002\000\004\033\267\001\002\000" +
    "\010\034\uffbe\043\uffbe\044\uffbe\001\002\000\034\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\031\uffae\032\uffae\034\uffea\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\001\002" +
    "\000\034\023\uffaf\024\uffaf\025\uffaf\026\uffaf\031\uffaf\032" +
    "\uffaf\034\uffeb\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\001\002\000\010\034\uffe9\043\264\044\263\001" +
    "\002\000\004\034\257\001\002\000\032\023\061\024\062" +
    "\025\055\026\064\031\063\032\060\035\250\036\245\037" +
    "\246\040\243\041\244\042\247\001\002\000\016\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\001\002\000" +
    "\016\010\042\013\052\015\007\017\027\020\037\022\047" +
    "\001\002\000\016\010\042\013\052\015\007\017\027\020" +
    "\037\022\047\001\002\000\016\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\001\002\000\016\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\001\002\000\016" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\001" +
    "\002\000\024\023\061\024\062\025\055\026\064\031\063" +
    "\032\060\034\uffba\043\uffba\044\uffba\001\002\000\024\023" +
    "\061\024\062\025\055\026\064\031\063\032\060\034\uffb9" +
    "\043\uffb9\044\uffb9\001\002\000\024\023\061\024\062\025" +
    "\055\026\064\031\063\032\060\034\uffbc\043\uffbc\044\uffbc" +
    "\001\002\000\024\023\061\024\062\025\055\026\064\031" +
    "\063\032\060\034\uffbd\043\uffbd\044\uffbd\001\002\000\024" +
    "\023\061\024\062\025\055\026\064\031\063\032\060\034" +
    "\uffb8\043\uffb8\044\uffb8\001\002\000\024\023\061\024\062" +
    "\025\055\026\064\031\063\032\060\034\uffbb\043\uffbb\044" +
    "\uffbb\001\002\000\004\066\260\001\002\000\046\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\063\030\067\023\071\021\073\045\074\031\077\032" +
    "\101\050\102\010\103\036\105\040\001\002\000\050\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\046\043" +
    "\053\022\063\030\067\023\070\262\071\021\073\045\074" +
    "\031\077\032\101\050\102\010\103\036\105\040\001\002" +
    "\000\074\005\uffed\010\uffed\013\uffed\015\uffed\017\uffed\020" +
    "\uffed\022\uffed\046\uffed\053\uffed\054\uffed\055\uffed\057\uffed" +
    "\061\uffed\062\uffed\063\uffed\065\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed\100\uffed" +
    "\101\uffed\102\uffed\103\uffed\105\uffed\001\002\000\016\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\001\002" +
    "\000\016\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\001\002\000\010\034\uffbf\043\uffbf\044\uffbf\001\002" +
    "\000\010\034\uffc0\043\uffc0\044\uffc0\001\002\000\020\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\045\234" +
    "\001\002\000\010\034\271\043\264\044\263\001\002\000" +
    "\010\034\uffc1\043\uffc1\044\uffc1\001\002\000\020\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\045\234\001" +
    "\002\000\010\034\274\043\264\044\263\001\002\000\004" +
    "\060\275\001\002\000\046\010\042\013\052\015\007\017" +
    "\027\020\037\022\047\046\043\053\022\063\030\067\023" +
    "\071\021\073\045\074\031\077\032\101\050\102\010\103" +
    "\036\105\040\001\002\000\054\010\042\013\052\015\007" +
    "\017\027\020\037\022\047\046\043\053\022\054\302\057" +
    "\301\062\277\063\030\067\023\071\021\073\045\074\031" +
    "\077\032\101\050\102\010\103\036\105\040\001\002\000" +
    "\074\005\uffe4\010\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\046\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\065\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\103\uffe4\105\uffe4\001\002\000\010\054\312" +
    "\057\311\062\313\001\002\000\046\010\042\013\052\015" +
    "\007\017\027\020\037\022\047\046\043\053\022\063\030" +
    "\067\023\071\021\073\045\074\031\077\032\101\050\102" +
    "\010\103\036\105\040\001\002\000\004\033\303\001\002" +
    "\000\020\010\042\013\052\015\007\017\027\020\037\022" +
    "\047\045\234\001\002\000\010\034\305\043\264\044\263" +
    "\001\002\000\004\060\306\001\002\000\046\010\042\013" +
    "\052\015\007\017\027\020\037\022\047\046\043\053\022" +
    "\063\030\067\023\071\021\073\045\074\031\077\032\101" +
    "\050\102\010\103\036\105\040\001\002\000\054\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\054\uffe0\057\uffe0\062\uffe0\063\030\067\023\071\021" +
    "\073\045\074\031\077\032\101\050\102\010\103\036\105" +
    "\040\001\002\000\054\010\042\013\052\015\007\017\027" +
    "\020\037\022\047\046\043\053\022\054\uffdf\057\uffdf\062" +
    "\uffdf\063\030\067\023\071\021\073\045\074\031\077\032" +
    "\101\050\102\010\103\036\105\040\001\002\000\046\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\046\043" +
    "\053\022\063\030\067\023\071\021\073\045\074\031\077" +
    "\032\101\050\102\010\103\036\105\040\001\002\000\004" +
    "\033\314\001\002\000\074\005\uffe3\010\uffe3\013\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\046\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\065\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\105\uffe3\001" +
    "\002\000\020\010\042\013\052\015\007\017\027\020\037" +
    "\022\047\045\234\001\002\000\010\034\316\043\264\044" +
    "\263\001\002\000\004\060\317\001\002\000\046\010\042" +
    "\013\052\015\007\017\027\020\037\022\047\046\043\053" +
    "\022\063\030\067\023\071\021\073\045\074\031\077\032" +
    "\101\050\102\010\103\036\105\040\001\002\000\054\010" +
    "\042\013\052\015\007\017\027\020\037\022\047\046\043" +
    "\053\022\054\uffe2\057\uffe2\062\uffe2\063\030\067\023\071" +
    "\021\073\045\074\031\077\032\101\050\102\010\103\036" +
    "\105\040\001\002\000\054\010\042\013\052\015\007\017" +
    "\027\020\037\022\047\046\043\053\022\054\uffe1\057\uffe1" +
    "\062\uffe1\063\030\067\023\071\021\073\045\074\031\077" +
    "\032\101\050\102\010\103\036\105\040\001\002\000\050" +
    "\010\042\013\052\015\007\017\027\020\037\022\047\046" +
    "\043\053\022\063\030\067\023\071\021\072\323\073\045" +
    "\074\031\077\032\101\050\102\010\103\036\105\040\001" +
    "\002\000\004\033\324\001\002\000\020\010\042\013\052" +
    "\015\007\017\237\020\236\022\047\045\234\001\002\000" +
    "\004\034\326\001\002\000\004\051\327\001\002\000\074" +
    "\005\uffec\010\uffec\013\uffec\015\uffec\017\uffec\020\uffec\022" +
    "\uffec\046\uffec\053\uffec\054\uffec\055\uffec\057\uffec\061\uffec" +
    "\062\uffec\063\uffec\065\uffec\067\uffec\070\uffec\071\uffec\072" +
    "\uffec\073\uffec\074\uffec\075\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\105\uffec\001\002\000\004\002\uffff\001" +
    "\002\000\020\010\042\013\052\015\007\017\027\020\037" +
    "\022\047\101\050\001\002\000\004\034\336\001\002\000" +
    "\020\023\061\024\062\025\055\026\064\031\063\032\060" +
    "\034\334\001\002\000\004\051\335\001\002\000\074\005" +
    "\uffce\010\uffce\013\uffce\015\uffce\017\uffce\020\uffce\022\uffce" +
    "\046\uffce\053\uffce\054\uffce\055\uffce\057\uffce\061\uffce\062" +
    "\uffce\063\uffce\065\uffce\067\uffce\070\uffce\071\uffce\072\uffce" +
    "\073\uffce\074\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\103\uffce\105\uffce\001\002\000\004\051\337\001\002" +
    "\000\074\005\uffcd\010\uffcd\013\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\022\uffcd\046\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\065\uffcd\067\uffcd\070\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\105\uffcd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\015\006\033\010\013" +
    "\011\034\012\010\013\045\014\032\015\012\016\011\017" +
    "\052\020\050\021\043\022\014\023\025\024\023\025\017" +
    "\036\024\040\016\041\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\006" +
    "\033\010\142\011\034\012\010\013\045\014\032\015\012" +
    "\016\011\017\052\020\050\021\043\022\014\023\025\024" +
    "\023\025\017\036\024\040\016\041\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\321\006\033\010" +
    "\013\011\034\012\010\013\045\014\032\015\012\016\011" +
    "\017\052\020\050\021\043\022\014\023\025\024\023\025" +
    "\017\036\024\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\212\040\016" +
    "\041\040\001\001\000\010\025\201\040\016\041\040\001" +
    "\001\000\010\025\157\040\016\041\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\131\040\016\041\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\017\036\115\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\053\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\055\001" +
    "\001\000\006\040\103\041\040\001\001\000\002\001\001" +
    "\000\012\025\075\035\074\040\016\041\040\001\001\000" +
    "\006\040\072\041\040\001\001\000\006\040\071\041\040" +
    "\001\001\000\006\040\070\041\040\001\001\000\002\001" +
    "\001\000\006\040\064\041\040\001\001\000\002\001\001" +
    "\000\006\040\066\041\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\100\040\016\041\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\106\025\107\040\016" +
    "\041\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\123\001\001\000\010\025\120\040\016" +
    "\041\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\127\040\016\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\134\007\135\001\001\000\010\025\144\040\016\041" +
    "\040\001\001\000\002\001\001\000\004\004\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\141\006" +
    "\033\010\013\011\034\012\010\013\045\014\032\015\012" +
    "\016\011\017\052\020\050\021\043\022\014\023\025\024" +
    "\023\025\017\036\024\040\016\041\040\001\001\000\046" +
    "\006\033\010\142\011\034\012\010\013\045\014\032\015" +
    "\012\016\011\017\052\020\050\021\043\022\014\023\025" +
    "\024\023\025\017\036\024\040\016\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\147\006\033\010\013\011\034\012" +
    "\010\013\045\014\032\015\012\016\011\017\052\020\050" +
    "\021\043\022\014\023\025\024\023\025\017\036\024\040" +
    "\016\041\040\001\001\000\046\006\033\010\142\011\034" +
    "\012\010\013\045\014\032\015\012\016\011\017\052\020" +
    "\050\021\043\022\014\023\025\024\023\025\017\036\024" +
    "\040\016\041\040\001\001\000\012\024\151\025\152\040" +
    "\016\041\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\164\001\001\000\010\030" +
    "\170\032\171\033\167\001\001\000\050\003\165\006\033" +
    "\010\013\011\034\012\010\013\045\014\032\015\012\016" +
    "\011\017\052\020\050\021\043\022\014\023\025\024\023" +
    "\025\017\036\024\040\016\041\040\001\001\000\046\006" +
    "\033\010\142\011\034\012\010\013\045\014\032\015\012" +
    "\016\011\017\052\020\050\021\043\022\014\023\025\024" +
    "\023\025\017\036\024\040\016\041\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\175\040\016\041" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\170\033\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\177\006\033\010\013\011\034\012\010" +
    "\013\045\014\032\015\012\016\011\017\052\020\050\021" +
    "\043\022\014\023\025\024\023\025\017\036\024\040\016" +
    "\041\040\001\001\000\046\006\033\010\142\011\034\012" +
    "\010\013\045\014\032\015\012\016\011\017\052\020\050" +
    "\021\043\022\014\023\025\024\023\025\017\036\024\040" +
    "\016\041\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\204\001\001\000\050\003" +
    "\205\006\033\010\013\011\034\012\010\013\045\014\032" +
    "\015\012\016\011\017\052\020\050\021\043\022\014\023" +
    "\025\024\023\025\017\036\024\040\016\041\040\001\001" +
    "\000\046\006\033\010\142\011\034\012\010\013\045\014" +
    "\032\015\012\016\011\017\052\020\050\021\043\022\014" +
    "\023\025\024\023\025\017\036\024\040\016\041\040\001" +
    "\001\000\002\001\001\000\050\003\210\006\033\010\013" +
    "\011\034\012\010\013\045\014\032\015\012\016\011\017" +
    "\052\020\050\021\043\022\014\023\025\024\023\025\017" +
    "\036\024\040\016\041\040\001\001\000\046\006\033\010" +
    "\142\011\034\012\010\013\045\014\032\015\012\016\011" +
    "\017\052\020\050\021\043\022\014\023\025\024\023\025" +
    "\017\036\024\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\214\040\016\041\040\001" +
    "\001\000\002\001\001\000\010\025\216\040\016\041\040" +
    "\001\001\000\002\001\001\000\050\003\225\006\033\010" +
    "\013\011\034\012\010\013\045\014\032\015\012\016\011" +
    "\017\052\020\050\021\043\022\014\023\025\024\023\025" +
    "\017\036\024\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\223\006\033\010\013\011" +
    "\034\012\010\013\045\014\032\015\012\016\011\017\052" +
    "\020\050\021\043\022\014\023\025\024\023\025\017\036" +
    "\024\040\016\041\040\001\001\000\046\006\033\010\142" +
    "\011\034\012\010\013\045\014\032\015\012\016\011\017" +
    "\052\020\050\021\043\022\014\023\025\024\023\025\017" +
    "\036\024\040\016\041\040\001\001\000\002\001\001\000" +
    "\046\006\033\010\142\011\034\012\010\013\045\014\032" +
    "\015\012\016\011\017\052\020\050\021\043\022\014\023" +
    "\025\024\023\025\017\036\024\040\016\041\040\001\001" +
    "\000\002\001\001\000\010\025\230\040\016\041\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\025\241" +
    "\026\240\027\237\037\234\040\016\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\255\040\016\041\040\001\001\000\010" +
    "\025\254\040\016\041\040\001\001\000\010\025\253\040" +
    "\016\041\040\001\001\000\010\025\252\040\016\041\040" +
    "\001\001\000\010\025\251\040\016\041\040\001\001\000" +
    "\010\025\250\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\003\260\006\033\010\013\011\034\012\010\013\045\014" +
    "\032\015\012\016\011\017\052\020\050\021\043\022\014" +
    "\023\025\024\023\025\017\036\024\040\016\041\040\001" +
    "\001\000\046\006\033\010\142\011\034\012\010\013\045" +
    "\014\032\015\012\016\011\017\052\020\050\021\043\022" +
    "\014\023\025\024\023\025\017\036\024\040\016\041\040" +
    "\001\001\000\002\001\001\000\012\025\241\037\265\040" +
    "\016\041\040\001\001\000\012\025\241\037\264\040\016" +
    "\041\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\241\027\267\037\234\040\016\041\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\241\027" +
    "\272\037\234\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\275\006\033\010\013\011" +
    "\034\012\010\013\045\014\032\015\012\016\011\017\052" +
    "\020\050\021\043\022\014\023\025\024\023\025\017\036" +
    "\024\040\016\041\040\001\001\000\050\005\277\006\033" +
    "\010\142\011\034\012\010\013\045\014\032\015\012\016" +
    "\011\017\052\020\050\021\043\022\014\023\025\024\023" +
    "\025\017\036\024\040\016\041\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\307\006\033\010\013" +
    "\011\034\012\010\013\045\014\032\015\012\016\011\017" +
    "\052\020\050\021\043\022\014\023\025\024\023\025\017" +
    "\036\024\040\016\041\040\001\001\000\002\001\001\000" +
    "\014\025\241\027\303\037\234\040\016\041\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\306\006" +
    "\033\010\013\011\034\012\010\013\045\014\032\015\012" +
    "\016\011\017\052\020\050\021\043\022\014\023\025\024" +
    "\023\025\017\036\024\040\016\041\040\001\001\000\046" +
    "\006\033\010\142\011\034\012\010\013\045\014\032\015" +
    "\012\016\011\017\052\020\050\021\043\022\014\023\025" +
    "\024\023\025\017\036\024\040\016\041\040\001\001\000" +
    "\046\006\033\010\142\011\034\012\010\013\045\014\032" +
    "\015\012\016\011\017\052\020\050\021\043\022\014\023" +
    "\025\024\023\025\017\036\024\040\016\041\040\001\001" +
    "\000\050\003\320\006\033\010\013\011\034\012\010\013" +
    "\045\014\032\015\012\016\011\017\052\020\050\021\043" +
    "\022\014\023\025\024\023\025\017\036\024\040\016\041" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\241\027\314\037\234\040\016\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\317\006\033" +
    "\010\013\011\034\012\010\013\045\014\032\015\012\016" +
    "\011\017\052\020\050\021\043\022\014\023\025\024\023" +
    "\025\017\036\024\040\016\041\040\001\001\000\046\006" +
    "\033\010\142\011\034\012\010\013\045\014\032\015\012" +
    "\016\011\017\052\020\050\021\043\022\014\023\025\024" +
    "\023\025\017\036\024\040\016\041\040\001\001\000\046" +
    "\006\033\010\142\011\034\012\010\013\045\014\032\015" +
    "\012\016\011\017\052\020\050\021\043\022\014\023\025" +
    "\024\023\025\017\036\024\040\016\041\040\001\001\000" +
    "\046\006\033\010\142\011\034\012\010\013\045\014\032" +
    "\015\012\016\011\017\052\020\050\021\043\022\014\023" +
    "\025\024\023\025\017\036\024\040\016\041\040\001\001" +
    "\000\002\001\001\000\016\025\241\026\324\027\237\037" +
    "\234\040\016\041\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\331\025\332\040\016\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$as$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$as$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$as$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$as$actions {
  private final as parser;

  /** Constructor */
  CUP$as$actions(as parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$as$do_action_part00000000(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$as$result;

      /* select the action based on the action number */
      switch (CUP$as$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		RESULT = start_val;
              CUP$as$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$as$parser.done_parsing();
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BLOQUE_PRINCIPAL 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PRINCIPAL ::= inicio INSTRUCCIONES finall 
            {
              Object RESULT =null;
		int _INSTRUCCIONESleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSTRUCCIONESright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INSTRUCCIONES = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		System.out.println(_INSTRUCCIONES.toString()); error imprime = new error("lexema","tipo","descripcion",3,3);imprime.imprime(ArrayList.class.cast(_INSTRUCCIONES),0);
              CUP$as$result = parser.getSymbolFactory().newSymbol("BLOQUE_PRINCIPAL",32, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int _Arayleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Arayright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _Aray = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		int _INSTRUCCION2left = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCION2right = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION2 = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> instrucciones = ArrayList.class.cast(_Aray);if (_INSTRUCCION2.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION2)); else  instrucciones.add(_INSTRUCCION2);RESULT = instrucciones;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int _INSTRUCCIONleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSTRUCCIONright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INSTRUCCION = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> instrucciones = new ArrayList<>();if (_INSTRUCCION.getClass() == ArrayList.class) instrucciones.addAll(ArrayList.class.cast(_INSTRUCCION)); else instrucciones.add(_INSTRUCCION);RESULT = instrucciones;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("ENCONTRO DECLARACION"); RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int _IMPRIMIRleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIR = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIR.toString(); System.out.println("encontro impresion linea simple"); RESULT= Fimpr; 
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIRLN 
            {
              Object RESULT =null;
		int _IMPRIMIRLNleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _IMPRIMIRLNright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _IMPRIMIRLN = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _IMPRIMIRLN.toString();System.out.println("encontro impresion multipe linea");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _D.toString();System.out.println("encontro ASIGNACION");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCION");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= METODOsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro METODOSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FUNCIONsp 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro FUNCIONSP");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONDICIONIF 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CONDICION IF");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ins = ArrayList.class.cast(_INS);System.out.println("encontro CICLO");RESULT = ins;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= RETURN 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro RETURN");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CALL 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fimpr = _C.toString();System.out.println("encontro LLAMADA");RESULT= Fimpr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;
		System.out.println("encontro SWITCH");
              CUP$as$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CICLO ::= para E flechita E hasta E hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-8)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CICLO ::= para E flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para 
            {
              Object RESULT =null;
		int _Aleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).left;
		int _Aright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-9)).right;
		Object _A = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-9)).value;
		int _Bleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).left;
		int _Bright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)).right;
		Object _B = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-7)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Dleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Dright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _D = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "for "+_A.toString()+" in range("+_B.toString()+","+_C.toString()+","+_D+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-10)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CICLO ::= mientras abre_parentesis COND_WHILE cierra_parentesis hacer INSTRUCCIONES fin_mientras 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while( "+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CICLO ::= repetir INSTRUCCIONES hasta_que abre_parentesis COND_WHILE cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "while(True):";cond.add(ifins);cond.add(ins);String fifi = "     if ("+_C.toString()+"):";String brek= "          break";cond.add(fifi);cond.add(brek); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CICLO",16, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND_WHILE ::= verdadero 
            {
              Object RESULT =null;
		String Fe = " True "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COND_WHILE ::= falso 
            {
              Object RESULT =null;
		String Fe = " False "; RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COND_WHILE ::= COMPARACIONES 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COND_WHILE",20, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH ::= segun E hacer OPCIONES de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("SWITCH",4, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCIONES ::= OPCIONES OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCIONES ::= OPCION 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCIONES",5, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPCION ::= abre_pregunta E cierra_pregunta entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("OPCION",2, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICIONIF ::= si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES IFANIDADOS fin_si 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "if("+_C.toString()+"):";condan.add(ifins);condan.add(ins); condan.addAll(ArrayList.class.cast(_INFANIDADOS));RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",15, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-7)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFANIDADOS ::= IFANIDADOS o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-6)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "elif("+_C.toString()+"):";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFANIDADOS ::= IFANIDADOS de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INFANIDADOSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _INFANIDADOSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _INFANIDADOS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> condan= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);condan.addAll(ArrayList.class.cast(_INFANIDADOS));String ifins = "else:";condan.add(ifins);condan.add(ins); RESULT = condan;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFANIDADOS ::= o_si abre_parentesis COMPARACIONES cierra_parentesis entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> conelse= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "elif("+_C.toString()+"):";conelse.add(ifins);conelse.add(ins); RESULT = conelse;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFANIDADOS ::= de_lo_contrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> contr= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "else:";contr.add(ifins);contr.add(ins); RESULT = contr;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IFANIDADOS",3, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= funcion E TIPODATO_DECLARACION con_parametros PARAMETROS INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= metodo E con_parametros PARAMETROS INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"("+_C.toString()+"):";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= abre_parentesis PARS cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                        String instruccion="";
                                                        ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                        for (Object c: ides )
                                                        {
                                                            if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                instruccion+= c.toString()+",";
                                                            else  instruccion+= c.toString();

                                                        }

                                                        String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARS ::= PARS coma PAR 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARS ::= PAR 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARS",24, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PAR ::= TIPODATO_DECLARACION E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String Fe = _E.toString(); RESULT = Fe;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PAR",25, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
                                                              String instruccion="";
                                                              ArrayList<Object> ides = ArrayList.class.cast(_IDS);
                                                              for (Object c: ides )
                                                              {
                                                                  if (ides.get(ides.size()-1).toString()!=c.toString())
                                                                  instruccion+= c.toString()+",";
                                                                  else  instruccion+= c.toString();

                                                              }

                                                              String FIM = instruccion; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARAMETROSLL",26, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARSLL ::= PARSLL coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARSLL ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("PARSLL",27, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONsp ::= funcion E TIPODATO_DECLARACION abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("FUNCIONsp",14, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODOsp ::= metodo E abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _INSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _INSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _INS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		ArrayList<Object> cond= new ArrayList<>(); ArrayList<Object> ins = ArrayList.class.cast(_INS);String ifins = "def "+_E.toString()+"():";cond.add(ifins);cond.add(ins); RESULT = cond;
              CUP$as$result = parser.getSymbolFactory().newSymbol("METODOsp",13, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETURN ::= retornar abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "return("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETURN ::= retornar abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		String FIM = "return()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURN ::= retornar abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "return("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CALL ::= ejecutar E PARAMETROSLL punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Cleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Cright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _C = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FIM = _E.toString()+"("+_C.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL ::= ejecutar E abre_parentesis cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		String FIM = _E.toString()+"()"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMPRIMIR ::= imprimir abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "print("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMPRIMIR ::= imprimir abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIM = "print("+_E.toString()+")"; RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMPRIMIRLN ::= imprimir_nl abre_parentesis E cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIML = "print("+_E.toString()+")"; RESULT = FIML;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IMPRIMIRLN ::= imprimir_nl abre_parentesis CALL cierra_parentesis punto_y_coma 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		String FIML = "print("+_E.toString()+")"; RESULT = FIML;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IMPRIMIRLN",9, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= IDS flechita E punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-3)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
    String instruccion="";
    ArrayList<Object> ides = ArrayList.class.cast(_IDS);
    for (Object c: ides )
    {
        instruccion+= c.toString()+"=";
        System.out.println(instruccion);
    }

    String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPODATO_DECLARACION ::= numero 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPODATO_DECLARACION ::= bulean 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPODATO_DECLARACION ::= cadena 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPODATO_DECLARACION ::= caracter 
            {
              Object RESULT =null;

              CUP$as$result = parser.getSymbolFactory().newSymbol("TIPODATO_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= ingresar IDS como TIPODATO_DECLARACION con_valor E punto_y_coma 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-5)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-5)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		
String instruccion="";
ArrayList<Object> ides = ArrayList.class.cast(_IDS);
for (Object c: ides )
{
    instruccion+= c.toString()+"=";
    System.out.println(instruccion);
    }

String FIM = instruccion+_E.toString(); RESULT = FIM;
              CUP$as$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-6)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDS ::= IDS coma E 
            {
              Object RESULT =null;
		int _IDSleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _IDSright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _IDS = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		ArrayList<Object> ides = ArrayList.class.cast(_IDS); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDS ::= E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		 ArrayList<Object> ides = new ArrayList<>(); ides.add(_E.toString());RESULT = ides;
              CUP$as$result = parser.getSymbolFactory().newSymbol("IDS",28, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLE ::= variable 
            {
              Object RESULT =null;
		int _variableleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _variableright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _variable = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String r = _variable.toString(); RESULT = r;
              CUP$as$result = parser.getSymbolFactory().newSymbol("VARIABLE",31, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPARACIONES ::= not abre_parentesis COMPARACIONES cierra_parentesis 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE ="!("+ _E.toString()+ ")"; RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-3)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMPARACIONES ::= COMPARACIONES and COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "and"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARACIONES ::= COMPARACIONES or COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "or"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",21, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMP ::= E menor E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMP ::= E mayor_o_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COMP ::= E menor_o_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "<="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COMP ::= E mayor E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ ">"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COMP ::= E es_diferente E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "!="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COMP ::= E es_igual E 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "=="+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("COMP",29, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E mas F 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "+"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E menos F 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "-"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E potencia abre_corchete F cierra_corchete 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-4)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-1)).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-1)).value;
		String FE = _E.toString()+ "**"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-4)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E por F 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "*"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E dividido F 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "/"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E mod F 
            {
              Object RESULT =null;
		int _Eleft = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).left;
		int _Eright = ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)).right;
		Object _E = (Object)((java_cup.runtime.Symbol) CUP$as$stack.elementAt(CUP$as$top-2)).value;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _E.toString()+ "%"+_F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.elementAt(CUP$as$top-2)), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= F 
            {
              Object RESULT =null;
		int _Fleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _Fright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _F = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FE = _F.toString(); RESULT = FE;
              CUP$as$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= number 
            {
              Object RESULT =null;
		int _numberleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _numberright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _number = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = _number.toString(); RESULT = FVR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= verdadero 
            {
              Object RESULT =null;
		int _verdaderoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _verdaderoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _verdadero = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FVR = "True"; RESULT = FVR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // F ::= falso 
            {
              Object RESULT =null;
		int _falsoleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _falsoright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _falso = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFS = "False"; RESULT = FFS;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // F ::= frase 
            {
              Object RESULT =null;
		int _fraseleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _fraseright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frase = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FFR = _frase.toString(); RESULT = FFR;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // F ::= frasecita 
            {
              Object RESULT =null;
		int _frasecitaleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _frasecitaright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _frasecita = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FF = _frasecita.toString(); RESULT = FF;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= VARIABLE 
            {
              Object RESULT =null;
		int _VARIABLEleft = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).left;
		int _VARIABLEright = ((java_cup.runtime.Symbol)CUP$as$stack.peek()).right;
		Object _VARIABLE = (Object)((java_cup.runtime.Symbol) CUP$as$stack.peek()).value;
		String FV = _VARIABLE.toString(); RESULT = FV;
              CUP$as$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$as$stack.peek()), ((java_cup.runtime.Symbol)CUP$as$stack.peek()), RESULT);
            }
          return CUP$as$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$as$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$as$do_action(
    int                        CUP$as$act_num,
    java_cup.runtime.lr_parser CUP$as$parser,
    java.util.Stack            CUP$as$stack,
    int                        CUP$as$top)
    throws java.lang.Exception
    {
              return CUP$as$do_action_part00000000(
                               CUP$as$act_num,
                               CUP$as$parser,
                               CUP$as$stack,
                               CUP$as$top);
    }
}

}
