package analizadores;
import java_cup.runtime.Symbol;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
terminal inicio;
    terminal final;
      terminal flechita;
      terminal id   ;
      terminal frase ;
    terminal guion  ;
    terminal numero ;
    terminal number ;
    terminal cadena ;
    terminal frase ;
      terminal bulean ;
      terminal verdadero ;
      terminal falso    ;
      terminal caracter ;
      terminal frasecita ;
      terminal mas   ;
      terminal menos  ;
      terminal por ;
      terminal dividido ;
      terminal abre_corchete  ;
      terminal cierra_corchete   ;
      terminal potencia    ;
      terminal mod    ;
      terminal abre_parentesis ;
      terminal cierra_parentesis;
      terminal mayor;
      terminal menor;
      terminal mayor_o_igual ;
      terminal menor_o_igual ;
      terminal es_igual ;
      terminal es_diferente ;
      terminal or     ;
      terminal and ;
      terminal not ;
      terminal ingresar  ;
      terminal como;
      terminal con_valor;
      terminal punto_y_coma;
      terminal coma ;
      terminal si ;
      terminal o_si  ;
      terminal abre_pregunta ;
      terminal cierra_pregunta;
      terminal de_lo_contrario;
      terminal entonces;
      terminal fin_segun ;
      terminal fin_si;
      terminal para;
      terminal hasta ;
      terminal fin_para;
      terminal hacer;
      terminal mientras ;
      terminal fin_mientras ;
      terminal repetir ;
      terminal hasta_que;
      terminal retornar;
      terminal metodo ;
      terminal fin_metodo ;
      terminal con_parametros ;
      terminal funcion ;
      terminal fin_funcion ;
      terminal ejecutar;
      terminal imprimir  ;
      terminal imprimir_nl  ;

non terminal INIT, INSTRUCCIONES, INSTRUCCION, DECLARACION ,BLOQUE,IMPRIMIR, IMPRIMIRLN, ASIGNACION,METODO,FUNCION,METODOsp,FUNCIONsp,CONDICIONIF,CICLO,RETURN,CALL,E,error,
COND_WHILE, COMPARACIONES,AUMENTO,TIPODATO_DECLARACION,PARAMETROS,PARS,PAR,PARAMETROSLL,PARSLL, FUNCIONsp, METODOsp, RETURN,ES,IDS,COMP,F;
start with INIT;
INIT::= INSTRUCCIONES {return $1} ;


INSTRUCCIONES ::=   INSTRUCCIONES INSTRUCCION { $1.push($2); $$=$1; console.log("s ")}
              |   INSTRUCCION               {$$ = [$1]; console.log("s ") }
              ;


INSTRUCCION ::= DECLARACION   { $$=$1;console.log("reconocio declaracion ") }
            | BLOQUE        { console.log("reconocio bloque") }
            | IMPRIMIR      { $$=$1;console.log("reconocio PRINT ") }
            | IMPRIMIRLN    { console.log("reconocio PRINTLN ") }
            | ASIGNACION    { $$=$1;console.log("reconocio asignacion ") }
            | METODO        {  console.log("reconocio metodo")}
            | FUNCION       { console.log("reconocio funcion") }
            | METODOsp        {  console.log("reconocio metodo sin parametros")}
            | FUNCIONsp       { console.log("reconocio funcion sin parametros") }
            | CONDICIONIF   { console.log("reconocio condicion if") }
            | CICLO         {console.log("reconocio  ciclo")}
            | RETURN   {console.log("reconocio  RETURN")}
            | CALL      {console.log("reconocio  LLAMADA")}
            |DECLARACION_ARRAY {$$=$1;console.log("reconocio delcaracion array")}
            |E ';'{console.log("reconocio instruccion expresion")}
            | error    ';'  { console.log("Error sintactico en la linea "+(yylineno+1)); }
;
//INSTRUCCIONES CICLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOS
CICLO::= 'pr_for'  '(' DECLARACION_INTERNA ',' COMPARACIONES ',' AUMENTO ')' BLOQUE {console.log("reconocio CICLO FOR ") }
    | 'pr_while' '(' COND_WHILE ')' BLOQUE {console.log("reconocio CICLO WHILE ")}
    | 'pr_do' BLOQUE 'pr_while' '(' COND_WHILE ')' ';' {console.log("reconocio CICLO DO-WHILE ")}
    ;
COND_WHILE::= 'expreR_bool'
          |  COMPARACIONES
;

AUMENTO::= ASIGNACION {}
        | E {}
;




//CONDICION IF
CONDICIONIF::= 'pr_if' '(' COMPARACIONES ')' BLOQUE 'pr_else' BLOQUE  { console.log("reconoci una sentencia if");
                                                       }
| 'pr_if' '(' COMPARACIONES ')' BLOQUE

;






//FUNCIONES Y METODOS CON PARAMETROS
FUNCION::= TIPODATO_DECLARACION 'id' PARAMETROS BLOQUE
;
METODO ::= 'pr_void' 'id' PARAMETROS BLOQUE
;
PARAMETROS ::= '(' PARS ')'
;
PARS ::= PARS ',' PAR
     | PAR
;
PAR ::= TIPODATO_DECLARACION 'id'
;
PARAMETROSLL ::= '(' PARSLL ')'
;
PARSLL ::= PARSLL ',' E
     | E
;

//sin parametros

FUNCIONsp::= TIPODATO_DECLARACION 'id' '(' ')'BLOQUE
;
METODOsp ::= 'pr_void' 'id' '(' ')' BLOQUE
;
//EL RETURN

RETURN ::= 'pr_return' E ';'
        | 'pr_return' ';'
;

//LLAMADA DE FUNCION O METODOS
CALL::= 'pr_call' 'id' PARAMETROSLL ';'
    | 'pr_call' 'id' '('')'';'

;




//INSTRUCCION IMPRIMIR UNA Y VARIAS LINEAS

IMPRIMIR ::= 'pr_print' '(' E ')' ';' {$$ = new imprimir($3,@1.first_line, @1.first_column );}
;
IMPRIMIRLN ::= 'pr_println' '(' E ')' ';'
;


//ASIGNACION DE VARIABLES YA DECLARADAS (CAMBIO DE VALOR)
ASIGNACION ::= 'id' '=' 'E' ';' {$$= new Asignacion($1,$3, @1.first_line, @1.first_column);}
            | 'id' '=' 'id' ';'{$$= new Asignacion($1,$3, @1.first_line, @1.first_column);}
            ;

//DECLARACION DE VARIABLES NO DECLARADAS SINGULAR O EN CONJUNTO, FINALES O NO FINALES, INCLUYE EXPRESIONES
ES ::= ES ',' E {$1.push($3); $$=$1;}
    | E {$$ = [$1]}
    ;




TIPODATO_DECLARACION  ::=  'pr_numero' {$$=Type.NUMBER}
                       | 'pr_bool'    {$$=Type.BOOLEAN}
                       | 'pr_string' {$$=Type.STRING}
                       ;

DECLARACION ::= TIPO_DECLARACION_CONST  TIPODATO_DECLARACION IDS '=' E ';' {$$=new Declaracion(true,$2, $3,$5, @1.first_line, @1.first_column)}
            |
            TIPODATO_DECLARACION IDS '=' E ';'  {$$=new Declaracion(false,$1, $2,$4, @1.first_line, @1.first_column)}
            ;
DECLARACION_INTERNA ::= TIPODATO_DECLARACION IDS '=' E {}
            ;

IDS ::= IDS ',' 'id'{$1.push($3); $$=$1;}
    | 'id' {$$ = [$1]}
    ;
COMPARACIONES::= '!' COMPARACIONES  {$$= new Relacional(null,$2,RelacionalOption.NEGACION, @1.first_line, @1.first_column);}
            |  COMPARACIONES '&&' COMP {$$= new Relacional($1,$3,RelacionalOption.AND, @1.first_line, @1.first_column);}
            |  COMPARACIONES '||' COMP {$$= new Relacional($1,$3,RelacionalOption.OR, @1.first_line, @1.first_column);}
            |   COMP  {$$=$1;}
;
COMP::=  E '<' E {$$= new Relacional($1,$3,RelacionalOption.MENOR, @1.first_line, @1.first_column);}
    |  E '>''=' E  {$$= new Relacional($1,$3,RelacionalOption.MAYORIGUAL, @1.first_line, @1.first_column);}
    |  E '<''=' E  {$$= new Relacional($1,$3,RelacionalOption.MENORIGUAL, @1.first_line, @1.first_column);}
    |  E '>' E     {$$= new Relacional($1,$3,RelacionalOption.MAYOR, @1.first_line, @1.first_column);}
    |  E '!''=' E   {$$= new Relacional($1,$3,RelacionalOption.NOIGUAL, @1.first_line, @1.first_column);}
    |  E '=''=' E   {$$= new Relacional($1,$3,RelacionalOption.IGUAL, @1.first_line, @1.first_column);}
;
E::= E '+' E  {$$= new Arithmetic($1,$3,AritmeticOption.MAS, @1.first_line, @1.first_column);}
    |  E '-' E  {$$= new Arithmetic($1,$3,AritmeticOption.MENOS, @1.first_line, @1.first_column);}
    |  E '*' E  {$$= new Arithmetic($1,$3,AritmeticOption.MULTIPLICACION, @1.first_line, @1.first_column);}
    |  E '/' E  {$$= new Arithmetic($1,$3,AritmeticOption.DIVISION, @1.first_line, @1.first_column);}
    |  E '%' E  {$$= new Arithmetic($1,$3,AritmeticOption.MODULO, @1.first_line, @1.first_column);}
    |  E '+''+' {$$= new Arithmetic($1,null,AritmeticOption.SOBRESUMA, @1.first_line, @1.first_column);}
    |  E '-''-' {$$= new Arithmetic($1,null,AritmeticOption.SOBRERESTA, @1.first_line, @1.first_column);}
    |  F   {$$=$1;}
;

F::= expreR_numero {$$=new Literal($1,Type.NUMBER , @1.first_line, @1.first_column)}
    |expreR_bool {$$=new Literal($1,Type.BOOLEAN, @1.first_line, @1.first_column)}
    |expreR_cadena {$$=new Literal($1,Type.STRING , @1.first_line, @1.first_column)}
    | 'id' {$$=new Literal($1,Type.VARIABLE , @1.first_line, @1.first_column)}
;
// INSSTRUCCION FOR


