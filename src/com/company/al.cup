package analizadores;
import java_cup.runtime.Symbol;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
terminal inicio;
    terminal final;
      terminal flechita;
      terminal id   ;
      terminal frase ;
    terminal guion  ;
    terminal numero ;
    terminal number ;
    terminal cadena ;
    terminal frase ;
      terminal bulean ;
      terminal verdadero ;
      terminal falso    ;
      terminal caracter ;
      terminal frasecita ;
      terminal mas   ;
      terminal menos  ;
      terminal por ;
      terminal dividido ;
      terminal abre_corchete  ;
      terminal cierra_corchete   ;
      terminal potencia    ;
      terminal mod    ;
      terminal abre_parentesis ;
      terminal cierra_parentesis;
      terminal mayor;
      terminal menor;
      terminal mayor_o_igual ;
      terminal menor_o_igual ;
      terminal es_igual ;
      terminal es_diferente ;
      terminal or     ;
      terminal and ;
      terminal not ;
      terminal ingresar  ;
      terminal como;
      terminal con_valor;
      terminal punto_y_coma;
      terminal coma ;
      terminal si ;
      terminal o_si  ;
      terminal abre_pregunta ;
      terminal cierra_pregunta;
      terminal de_lo_contrario;
      terminal entonces;
      terminal fin_segun ;
      terminal fin_si;
      terminal para;
      terminal hasta ;
      terminal fin_para;
      terminal hacer;
      terminal mientras ;
      terminal fin_mientras ;
      terminal repetir ;
      terminal hasta_que;
      terminal retornar;
      terminal metodo ;
      terminal fin_metodo ;
      terminal con_parametros ;
      terminal funcion ;
      terminal fin_funcion ;
      terminal ejecutar;
      terminal imprimir  ;
      terminal imprimir_nl  ;
      terminal con_incremental;

non terminal INIT, INSTRUCCIONES, INSTRUCCION, DECLARACION ,BLOQUE,IMPRIMIR, IMPRIMIRLN, ASIGNACION,METODO,FUNCION,METODOsp,FUNCIONsp,CONDICIONIF,CICLO,RETURN,CALL,E,error,COND_WHILE, COMPARACIONES,AUMENTO,TIPODATO_DECLARACION,PARAMETROS,PARS,PAR,PARAMETROSLL,PARSLL, RETURN,ES,IDS,COMP,F,VARIABLE,TIPO_DECLARACION_CONST,BLOQUE_PRINCIPAL;
start with INIT;
INIT::= BLOQUE_PRINCIPAL {:System.out.println("Fin de analisis de entrada");:} ;

BLOQUE_PRINCIPAL ::= inicio INSTRUCCIONES final {:System.out.println("TERMINO BLOQUE PRINCIPAL");:}
;

INSTRUCCIONES ::=   INSTRUCCIONES INSTRUCCION
              |   INSTRUCCION
              ;


INSTRUCCION ::= DECLARACION   {:System.out.println("ENCONTRO DECLARACION");:}
            | IMPRIMIR      {:System.out.println("encontro impresion linea simple");:}
            | IMPRIMIRLN    {:System.out.println("encontro impresion multipe linea");:}
            | ASIGNACION    {:System.out.println("encontro ASIGNACION");:}
            | METODO        {:System.out.println("encontro METODO");:}
            | FUNCION       {:System.out.println("encontro FUNCION");:}
            | METODOsp        {:System.out.println("encontro METODOSP");:}
            | FUNCIONsp       {:System.out.println("encontro FUNCIONSP");:}
            | CONDICIONIF   {:System.out.println("encontro CONDICION IF");:}
            | CICLO         {:System.out.println("encontro CICLO");:}
            | RETURN   {:System.out.println("encontro RETURN");:}
            | CALL      {:System.out.println("encontro LLAMADA");:}
            |E punto_y_coma {:System.out.println("encontro impresion linea simple");:}
            //| error   punto_y_coma  {:System.out.println("encontro un erro que asco");:}
;
//INSTRUCCIONES CICLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOS
CICLO::= para  VARIABLE flechita E hasta E hacer INSTRUCCIONES fin_para
    | para  VARIABLE flechita E hasta E con_incremental number hacer INSTRUCCIONES fin_para
    | mientras abre_parentesis COND_WHILE cierra_parentesis INSTRUCCIONES fin_mientras
    | repetir INSTRUCCIONES hasta_que abre_parentesis COND_WHILE cierra_parentesis punto_y_coma
    ;
COND_WHILE::= true
          | false
          |  COMPARACIONES
;

AUMENTO::= ASIGNACION
        | E
;




//CONDICION IF
CONDICIONIF::= si abre_parentesis COMPARACIONES cierra_parentesis INSTRUCCIONES de_lo_contrario INSTRUCCIONES fin_si
| si abre_parentesis COMPARACIONES cierra_parentesis INSTRUCCIONES fin_si

;






//FUNCIONES Y METODOS CON PARAMETROS
FUNCION::= TIPODATO_DECLARACION VARIABLE PARAMETROS INTRUCCIONES fin_funcion
;
METODO ::= metodo VARIABLE PARAMETROS INSTRUCCIONES fin_metodo
;
PARAMETROS ::= abre_parentesis PARS cierra_parentesis
;
PARS ::= PARS coma PAR
     | PAR
;
PAR ::= TIPODATO_DECLARACION VARIABLE
;
PARAMETROSLL ::= abre_parentesis PARSLL cierra_parentesis
;
PARSLL ::= PARSLL coma E
     | E
;

//sin parametros

FUNCIONsp::= TIPODATO_DECLARACION VARIABLE abre_parentesis cierra_parentesis INSTRUCCIONES fin_funcion
;
METODOsp ::= metodo VARIABLE abre_parentesis cierra_parentesis INSTRUCCIONES fin_metodo
;
//EL RETURN

RETURN ::= retornar E punto_y_coma
        | retornar  punto_y_coma
;

//LLAMADA DE FUNCION O METODOS
CALL::= ejecutar VARIABLE PARAMETROSLL punto_y_coma
    | ejecutar VARIABLE abre_parentesis cierra_parentesis punto_y_coma

;




//INSTRUCCION IMPRIMIR UNA Y VARIAS LINEAS

IMPRIMIR ::= imprimir  abre_parentesis E cierra_parentesis punto_y_coma
;
IMPRIMIRLN ::= imprimir_nl abre_parentesis E cierra_parentesis punto_y_coma
;


//ASIGNACION DE VARIABLES YA DECLARADAS (CAMBIO DE VALOR)
ASIGNACION ::= IDS flechita E punto_y_coma
            | IDS flechita VARIABLE punto_y_coma
            ;

//DECLARACION DE VARIABLES NO DECLARADAS SINGULAR O EN CONJUNTO, FINALES O NO FINALES, INCLUYE EXPRESIONES
ES ::= ES coma E
    | E
    ;




TIPODATO_DECLARACION  ::=  numero
                       | bulean
                       | cadena
                       ;

DECLARACION ::= TIPO_DECLARACION_CONST  TIPODATO_DECLARACION IDS con_valor E punto_y_coma
            |   TIPODATO_DECLARACION IDS con_valor E punto_y_coma
            ;
DECLARACION_INTERNA ::= TIPODATO_DECLARACION IDS con_valor E
            ;

IDS ::= IDS coma VARIABLE
    | VARIABLE
    ;
VARIABLE ::= guion id guion
;
COMPARACIONES::= not COMPARACIONES
            |  COMPARACIONES and COMP
            |  COMPARACIONES or COMP
            |   COMP
;
COMP::=  E menor E
    |  E mayor_o_igual E
    |  E menor_o_igual E
    |  E mayor E
    |  E es_diferente E
    |  E es_igual E
;
E::= E mas E
    |  E menos E
    |  E potencia E
    |  E por E
    |  E dividido E
    |  E mod E
    |  E mas mas
    |  E menos menos
    |  F
;

F::= number
    |true
    |false
    |frase
    |frasecita
    | VARIABLE
;
// INSSTRUCCION FOR


